{"version":3,"file":"testing.js","sources":["../../../../../../packages/common/http/testing/index.ts","../../../../../../packages/common/http/testing/public_api.ts","../../../../../../packages/common/http/testing/src/module.ts","../../../../../../packages/common/http/testing/src/backend.ts","../../../../../../packages/common/http/testing/src/request.ts","../../../../../../packages/common/http/testing/src/api.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {HttpTestingController,RequestMatch,HttpClientTestingModule,TestRequest} from './public_api';\n\nexport {HttpClientTestingBackend as Éµa} from './src/backend';","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {HttpTestingController, RequestMatch} from './src/api';\nexport {HttpClientTestingModule} from './src/module';\nexport {TestRequest} from './src/request';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n * \n * Inject `HttpTestingController` to expect and flush requests in your tests.\n * \n * \\@experimental\n */\nexport class HttpClientTestingModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientTestingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientTestingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientTestingModule.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {startWith} from 'rxjs/operator/startWith';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n * \n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n * \n * \\@experimental\n */\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n/**\n * List of pending requests which have not yet been expected.\n */\n\nprivate open: TestRequest[] = [];\n/**\n * Handle an incoming request by queueing it in the list of open requests.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const /** @type {?} */ testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next( /** @type {?} */(({ type: HttpEventType.Sent } as HttpEvent<any>)));\n      return () => { testReq._cancelled = true; };\n    });\n  }\n/**\n * Helper function to search for requests in the list of open requests.\n * @param {?} match\n * @return {?}\n */\n\nprivate _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n/**\n * Search for requests in the list of open requests, and return all that match\n * without asserting anything about the number of matches.\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const /** @type {?} */ results = this._match(match);\n    results.forEach(result => {\n      const /** @type {?} */ index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n/**\n * Expect that a single outstanding request matches the given matcher, and return\n * it.\n * \n * Requests returned through this API will no longer be in the list of open requests,\n * and thus will not match twice.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n          `Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found none.`);\n    }\n    return matches[0];\n  }\n/**\n * Expect that no outstanding requests match the given matcher, and throw an error\n * if any do.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n          `Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n    }\n  }\n/**\n * Validate that there are no outstanding requests.\n * @param {?=} opts\n * @return {?}\n */\nverify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let /** @type {?} */ open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const /** @type {?} */ requests = open.map(testReq => {\n                             const /** @type {?} */ url = testReq.request.urlWithParams.split('?')[0];\n                             const /** @type {?} */ method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n/**\n * @param {?} matcher\n * @return {?}\n */\n\nprivate descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const /** @type {?} */ method = matcher.method || '(any)';\n      const /** @type {?} */ url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientTestingBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientTestingBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientTestingBackend.ctorParameters;\n/**\n * List of pending requests which have not yet been expected.\n * @type {?}\n */\nHttpClientTestingBackend.prototype.open;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaders, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {Observer} from 'rxjs/Observer';\n/**\n * A mock requests that was received and is ready to be answered.\n * \n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n * \n * \\@experimental\n */\nexport class TestRequest {\n/**\n * Whether the request was cancelled after it was sent.\n * @return {?}\n */\nget cancelled(): boolean { return this._cancelled; }\n/**\n * \\@internal set by `HttpClientTestingBackend`\n */\n_cancelled = false;\n/**\n * @param {?} request\n * @param {?} observer\n */\nconstructor(public request: HttpRequest<any>,\nprivate observer: Observer<HttpEvent<any>>) {}\n/**\n * Resolve the request by returning a body plus additional HTTP information (such as response\n * headers) if provided.\n * \n * Both successful and unsuccessful responses can be delivered via `flush()`.\n * @param {?} body\n * @param {?=} opts\n * @return {?}\n */\nflush(body: ArrayBuffer|Blob|string|number|Object|(string|number|Object|null)[]|null, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const /** @type {?} */ url = this.request.urlWithParams;\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let /** @type {?} */ statusText: string|undefined = opts.statusText;\n    let /** @type {?} */ status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n/**\n * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n * @param {?} error\n * @param {?=} opts\n * @return {?}\n */\nerror(error: ErrorEvent, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n/**\n * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n * request.\n * @param {?} event\n * @return {?}\n */\nevent(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\nfunction TestRequest_tsickle_Closure_declarations() {\n/**\n * \\@internal set by `HttpClientTestingBackend`\n * @type {?}\n */\nTestRequest.prototype._cancelled;\n/** @type {?} */\nTestRequest.prototype.request;\n/** @type {?} */\nTestRequest.prototype.observer;\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(\n    body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(\n    responseType: string, body: ArrayBuffer | Blob | string | number | Object |\n        (string | number | Object | null)[] | null): ArrayBuffer|Blob|string|number|Object|\n    (string | number | Object | null)[]|null {\n  switch (responseType) {\n    case 'arraybuffer':\n      if (body === null) {\n        return null;\n      }\n      return _toArrayBufferBody(body);\n    case 'blob':\n      if (body === null) {\n        return null;\n      }\n      return _toBlob(body);\n    case 'json':\n      if (body === null) {\n        return 'null';\n      }\n      return _toJsonBody(body);\n    case 'text':\n      if (body === null) {\n        return null;\n      }\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n/**\n * Defines a matcher for requests based on URL, method, or both.\n * \n * \\@experimental\n * @record\n */\nexport function RequestMatch() {}\n\n\nfunction RequestMatch_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nRequestMatch.prototype.method;\n/** @type {?|undefined} */\nRequestMatch.prototype.url;\n}\n\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @experimental\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n\nfunction HttpTestingController_tsickle_Closure_declarations() {\n\n/**\n * Search for requests that match the given parameter, without any expectations.\n * @abstract\n * @param {?} match\n * @return {?}\n */\nHttpTestingController.prototype.match = function(match) {};\n\n/**\n * Expect that a single request has been made which matches the given URL, and return its\n * mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(url, description) {};\n\n/**\n * Expect that a single request has been made which matches the given parameters, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(params, description) {};\n\n/**\n * Expect that a single request has been made which matches the given predicate function, and\n * return its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(matchFn, description) {};\n\n/**\n * Expect that a single request has been made which matches the given condition, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectOne = function(match, description) {};\n\n/**\n * Expect that no requests have been made which match the given URL.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(url, description) {};\n\n/**\n * Expect that no requests have been made which match the given parameters.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(params, description) {};\n\n/**\n * Expect that no requests have been made which match the given predicate function.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(matchFn, description) {};\n\n/**\n * Expect that no requests have been made which match the given condition.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nHttpTestingController.prototype.expectNone = function(match, description) {};\n\n/**\n * Verify that no unmatched requests are outstanding.\n * \n * If any requests are outstanding, fail with an error message indicating which requests were not\n * handled.\n * \n * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n * were not explicitly matched.\n * @abstract\n * @param {?=} opts\n * @return {?}\n */\nHttpTestingController.prototype.verify = function(opts) {};\n}\n\n"],"names":[],"mappings":"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"}