{"version":3,"sources":["../../../../../modules/@angular/common/src/location/platform_location.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,cAAE,EAAc,MAAA,qBAAA,CAAA;AACvB;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MADC;IAED;;;OAGG;IACH,kBALY,KAAA,CAAA;IAMZ;;;;OAIG;IACH,UAVY,CAAA,EAAA,IAAA,CAAA;IAWZ;;;;OAIG;IACH,YAfY,CAAA,EAAA,IAAA,CAAA;IAgBZ;;OAEG;IACH,IAjBG,QAAA,KAAwB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAkBxC;;OAEG;IACH,IApBG,MAAA,KAAsB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAqBtC;;OAEG;IACH,IAvBG,IAAA,KAAoB,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAwBpC;;;;;;OAMG;IACH,YA7BY,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,IAAA,CAAA;IA8BZ;;;;;;OAMG;IACH,SAnCY,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,IAAA,CAAA;IAoCZ;;;OAGG;IACH,OAtCY,KAAA,CAAA;IAuCZ;;;OAGG;IACH,IAzCY,KAAA,CAAA;CA0CX;AAED;;;GAGG;AACH,MAAM,CAzCC,MAAA,gBAAA,CAAM,oBAAA,GAAuB,IAAI,cAAA,CAA4B,sBAAE,CAAsB,CAAC","file":"platform_location.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core/index';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms\n * that angular supports. For example, the default `PlatformLocation` is {\\@link\n * BrowserPlatformLocation},\n * however when you run your app in a WebWorker you use {\\@link WebWorkerPlatformLocation}.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when\n * they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by\n * the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class\n * they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHrefFromDOM() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener) {}\n/**\n * @return {?}\n */\nget pathname(): string { return null; }\n/**\n * @return {?}\n */\nget search(): string { return null; }\n/**\n * @return {?}\n */\nget hash(): string { return null; }\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n}\n\n/**\n * @whatItDoes indicates when a location is initialized\n * @experimental\n */\nexport const /** @type {?} */ LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n"]}