{"version":3,"sources":["../../../../../modules/@angular/common/src/location/location_strategy.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,cAAE,EAAc,MAAA,qBAAA;AAEvB;;;;;;;;;;;;;;;;;;GAkBG;AACH;IACA;;;;OAIG;IACH,IALY,CAAA,WAAA,IAAA,CAAA;IAMZ;;;;OAIG;IACH,kBAVY,CAAA,QAAA,IAAA,CAAA;IAWZ;;;;;;;OAOG;IACH,SAlBY,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,WAAA,IAAA,CAAA;IAmBZ;;;;;;;OAOG;IACH,YA1BY,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,WAAA,IAAA,CAAA;IA2BZ;;;OAGG;IACH,OA9BY,KAAA,CAAA;IA+BZ;;;OAGG;IACH,IAlCY,KAAA,CAAA;IAmCZ;;;;OAIG;IACH,UAvCY,CAAA,EAAA,IAAA,CAAA;IAwCZ;;;OAGG;IACH,WA3CY,KAAA,CAAA;AA4CZ,CAAC;AAGD;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,OA3CO,MAAA,gBAAA,CAAM,aAAA,GAAgB,IAAI,cAAA,CAAsB,aAAE,CAAa,CAAC","file":"location_strategy.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core/index';\nimport {LocationChangeListener} from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n * \n * This is used under the hood of the {\\@link Location} service.\n * \n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n * \n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n * \n * See these two classes for more.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class LocationStrategy {\n/**\n * @abstract\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash?: boolean) {}\n/**\n * @abstract\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHref() {}\n}\n\n\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {@link PathLocationStrategy}.\n *\n * If you're using {@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n *\n * ### Example\n *\n * ```typescript\n * import {Component, NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @stable\n */\nexport const /** @type {?} */ APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n"]}