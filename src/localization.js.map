{"version":3,"file":"localization.js","sourceRoot":"","sources":["../../../../modules/@angular/common/src/localization.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH;;GAEG;AACH;IAAA;IAAuF,CAAC;IAAD,qBAAC;AAAD,CAAC,AAAxF,IAAwF;AAAlE,sBAAc,iBAAoD,CAAA;AAExF;;;;;;GAMG;AACH,2BACI,KAAa,EAAE,KAAe,EAAE,cAA8B;IAChE,IAAM,MAAM,GAAG,MAAI,KAAO,CAAC;IAE3B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,GAAG,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;AACvF,CAAC;AALe,yBAAiB,oBAKhC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @experimental\n */\nexport abstract class NgLocalization { abstract getPluralCategory(value: any): string; }\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n *\n * @internal\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization): string {\n  const nbCase = `=${value}`;\n\n  return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}