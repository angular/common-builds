{"version":3,"sources":["../../../../../modules/@angular/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"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","file":"number_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\n\nimport {NumberWrapper} from '../facade/lang';\n\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits: string, currency: string = null, currencyAsSymbol: boolean = false): string {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number;\n  let /** @type {?} */ minFraction: number;\n  let /** @type {?} */ maxFraction: number;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits: string = null): string {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}