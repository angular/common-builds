{"version":3,"sources":["../../../../../modules/@angular/common/src/pipes/case_conversion_pipes.ts"],"names":[],"mappings":"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","file":"case_conversion_pipes.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}