{"version":3,"sources":["../../../../../modules/@angular/common/src/pipes/async_pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,iBAAE,EAA6B,IAAA,EAAqB,YAAA,EAAa,MAAA,eAAA;OAEjE,EAAA,YAAE,EAAa,SAAA,EAAU,MAAA,wBAAA;OACzB,EAAA,wBAAE,EAAwB,MAAA,+BAAA;AAOjC;IAAA;IAmBA,CAAC;IAlBD;;;;OAIG;IACH,+CAJG,GAIH,UAJG,KAAA,EAAA,iBAAA;QAKC,MAAM,CAJC,KAAA,CAAM,SAAC,CAAS,EAAC,IAAC,EAAK,iBAAA,EAAmB,KAAA,EAAO,UAAA,CAAI,IAAU,MAAM,CAAA,CAAE,CAAC,CAAA,EAAE,CAAC,CAAC;IAKrF,CAAC;IACH;;;OAGG;IACH,oCAPG,GAOH,UAPG,YAAA,IAAkC,YAAA,CAAa,WAAC,EAAW,CAAE,CAAC,CAAA;IAQjE;;;OAGG;IACH,sCAVG,GAUH,UAVG,YAAA,IAAoC,YAAA,CAAa,WAAC,EAAW,CAAE,CAAC,CAAA;IAWnE,yBAAC;AAAD,CAnBA,AAmBC,IAAA;AACD;IAAA;IAmBA,CAAC;IAlBD;;;;OAIG;IACH,4CAdG,GAcH,UAdG,KAAA,EAAA,iBAAA;QAeC,MAAM,CAdC,KAAA,CAAM,IAAC,CAAI,iBAAC,EAAkB,UAAA,CAAA,IAAO,MAAM,CAAA,CAAE,CAAC,CAAA,CAAE,CAAC;IAe1D,CAAC;IACH;;;OAGG;IACH,iCAjBG,GAiBH,UAjBG,YAAA,IAAgC,CAAA;IAkBnC;;;OAGG;IACH,mCApBG,GAoBH,UApBG,YAAA,IAAkC,CAAA;IAqBrC,sBAAC;AAAD,CAnBA,AAmBC,IAAA;AAED,IAAM,gBAAgB,CApBhB,gBAAA,GAAmB,IAAI,eAAA,EAAgB,CAAE;AAqB/C,IAAM,gBAAgB,CApBhB,mBAAA,GAAsB,IAAI,kBAAA,EAAmB,CAAE;AAqBrD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH;IAMA;;OAEG;IACH,mBAnBsB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;QAPlB,iBAAA,GAAuB,IAAA,CAAK;QAC5B,yBAAA,GAA+B,IAAA,CAAK;QAEpC,kBAAA,GAAwB,IAAA,CAAK;QAC7B,SAAA,GAAuD,IAAA,CAAK;QAC5D,cAAA,GAAkC,IAAA,CAAK;IAEH,CAAA;IAoB9C;;OAEG;IACH,+BArBG,GAqBH;QACI,EAAE,CAAC,CAAC,IArBC,CAAI,aAAC,CAAa,CAAC,CAAA;YAsBtB,IAAI,CArBC,QAAC,EAAQ,CAAE;QAsBlB,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,6BAxBG,GAwBH,UAxBG,GAAA;QAyBC,EAAE,CAAC,CAAC,CAxBC,IAAC,CAAI,IAAC,CAAI,CAAC,CAAA;YAyBd,EAAE,CAAC,CAAC,GAxBC,CAAG,CAAC,CAAA;gBAyBP,IAAI,CAxBC,UAAC,CAAU,GAAC,CAAG,CAAC;YAyBvB,CAAC;YACD,IAAI,CAxBC,oBAAC,GAAsB,IAAA,CAAK,YAAC,CAAY;YAyB9C,MAAM,CAxBC,IAAA,CAAK,YAAC,CAAY;QAyB3B,CAAC;QAED,EAAE,CAAC,CAAC,GAxBC,KAAO,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;YAyBrB,IAAI,CAxBC,QAAC,EAAQ,CAAE;YAyBhB,MAAM,CAxBC,IAAA,CAAK,SAAC,CAAS,GAAC,CAAG,CAAC;QAyB7B,CAAC;QAED,EAAE,CAAC,CAAC,IAxBC,CAAI,YAAC,KAAgB,IAAA,CAAK,oBAAC,CAAoB,CAAC,CAAA;YAyBnD,MAAM,CAxBC,IAAA,CAAK,oBAAC,CAAoB;QAyBnC,CAAC;QAED,IAAI,CAxBC,oBAAC,GAAsB,IAAA,CAAK,YAAC,CAAY;QAyB9C,MAAM,CAxBC,YAAA,CAAa,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,CAAC;IAyB9C,CAAC;IACH;;;OAGG;IA1BA,8BAAA,GA2BH,UA3BG,GAAA;QA2BH,iBAKG;QAJC,IAAI,CA3BC,IAAC,GAAM,GAAA,CAAI;QA4BhB,IAAI,CA3BC,SAAC,GAAW,IAAA,CAAK,eAAC,CAAe,GAAC,CAAG,CAAC;QA4B3C,IAAI,CA3BC,aAAC,GAAe,IAAA,CAAK,SAAC,CAAS,kBAAC,CA4BjC,GAAG,EA3BE,UAAA,KAAQ,IAAW,OAAA,KAAA,CAAK,kBAAC,CAAkB,GAAC,EAAI,KAAA,CAAM,EAAnC,CAAmC,CAAC,CAAC;IA4BnE,CAAC;IACH;;;OAGG;IA7BA,mCAAA,GA8BH,UA9BG,GAAA;QA+BC,EAAE,CAAC,CAAC,SA9BC,CAAS,GAAC,CAAG,CAAC,CAAC,CAAA;YA+BlB,MAAM,CA9BC,gBAAA,CAAiB;QAwB5B,CAAA;QASE,EAAE,CAAC,CAAC,YA9BC,CAAY,GAAC,CAAG,CAAC,CAAC,CAAA;YA+BrB,MAAM,CA9BC,mBAAA,CAAoB;QA+B7B,CAAC;QAED,MA9BM,wBAAA,CAAyB,SAAC,EAAU,GAAA,CAAI,CAAC;IA+BjD,CAAC;IACH;;OAEG;IA/BA,4BAAA,GAgCH;QACI,IAAI,CAhCC,SAAC,CAAS,OAAC,CAAO,IAAC,CAAI,aAAC,CAAa,CAAC;QAiC3C,IAAI,CAhCC,YAAC,GAAc,IAAA,CAAK;QAiCzB,IAAI,CAhCC,oBAAC,GAAsB,IAAA,CAAK;QAiCjC,IAAI,CAhCC,aAAC,GAAe,IAAA,CAAK;QAiC1B,IAAI,CAhCC,IAAC,GAAM,IAAA,CAAK;IAiCnB,CAAC;IACH;;;;OAIG;IAnCA,sCAAA,GAoCH,UApCG,KAAA,EAAA,KAAA;QAqCC,EAAE,CAAC,CAAC,KApCC,KAAS,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;YAqCvB,IAAI,CApCC,YAAC,GAAc,KAAA,CAAM;YAqC1B,IAAI,CApCC,IAAC,CAAI,YAAC,EAAY,CAAE;QAqC3B,CAAC;IACH,CAAC;IAnCI,oBAAA,GAAoC;QAqC3C,EApCE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,EAAE,IAAC,EAAK,OAAA,EAAS,IAAA,EAAM,KAAA,EAAM,EAAC,EAAG;KAqCpD,CApCC;IAqCF,kBAAkB;IAnCX,wBAAA,GAAiF,cAAM,OAAA;QAqC9F,EAAC,IApCC,EAAK,iBAAA,GAAkB;KAqCxB,EAtC6F,CAsC7F,CApCC;IAqCF,gBAAC;AAAD,CAhGA,AAgGC,IAAA;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC;IACjC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACzC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;IAClC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;IACzB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;AACzB,CAAC","file":"async_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, WrappedValue} from '@angular/core';\nimport {EventEmitter, Observable} from '../facade/async';\nimport {isObservable, isPromise} from '../private_import_core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: any, updateLatestValue: any): any;\n  dispose(subscription: any): void;\n  onDestroy(subscription: any): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: any, updateLatestValue: any): any {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: any): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: any): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): any {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: any): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: any): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: Object = null;\nprivate _latestReturnedValue: Object = null;\nprivate _subscription: Object = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any> = null;\nprivate _strategy: SubscriptionStrategy = null;\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (isPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (isObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\nprivate _dispose(): void {\n    this._strategy.dispose(this._subscription);\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}