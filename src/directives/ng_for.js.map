{"version":3,"file":"ng_for.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_for.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, CollectionChangeRecord, DefaultIterableDiffer, Directive, DoCheck, EmbeddedViewRef, Input, IterableDiffer, IterableDiffers, OnChanges, SimpleChanges, TemplateRef, TrackByFn, ViewContainerRef} from '@angular/core';\n\nimport {BaseException} from '../facade/exceptions';\nimport {getTypeNameForDebugging, isBlank, isPresent} from '../facade/lang';\n\nexport class NgForRow {\n  constructor(public $implicit: any, public index: number, public count: number) {}\n\n  get first(): boolean { return this.index === 0; }\n\n  get last(): boolean { return this.index === this.count - 1; }\n\n  get even(): boolean { return this.index % 2 === 0; }\n\n  get odd(): boolean { return !this.even; }\n}\nexport class NgFor implements DoCheck, OnChanges { ngForOf: any; ngForTrackBy: TrackByFn;\n\n  private _differ: IterableDiffer;\n\n  constructor(\n      private _viewContainer: ViewContainerRef, private _templateRef: TemplateRef<NgForRow>,\n      private _iterableDiffers: IterableDiffers, private _cdr: ChangeDetectorRef) {}\n  set ngForTemplate(value: TemplateRef<NgForRow>) {\n    if (isPresent(value)) {\n      this._templateRef = value;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = changes['ngForOf'].currentValue;\n      if (isBlank(this._differ) && isPresent(value)) {\n        try {\n          this._differ = this._iterableDiffers.find(value).create(this._cdr, this.ngForTrackBy);\n        } catch (e) {\n          throw new BaseException(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (isPresent(this._differ)) {\n      const changes = this._differ.diff(this.ngForOf);\n      if (isPresent(changes)) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: DefaultIterableDiffer) {\n    // TODO(rado): check if change detection can produce a change record that is\n    // easier to consume than current.\n    const recordViewTuples: RecordViewTuple[] = [];\n    changes.forEachRemovedItem(\n        (removedRecord: CollectionChangeRecord) =>\n            recordViewTuples.push(new RecordViewTuple(removedRecord, null)));\n\n    changes.forEachMovedItem(\n        (movedRecord: CollectionChangeRecord) =>\n            recordViewTuples.push(new RecordViewTuple(movedRecord, null)));\n\n    const insertTuples = this._bulkRemove(recordViewTuples);\n\n    changes.forEachAddedItem(\n        (addedRecord: CollectionChangeRecord) =>\n            insertTuples.push(new RecordViewTuple(addedRecord, null)));\n\n    this._bulkInsert(insertTuples);\n\n    for (let i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n      var viewRef = <EmbeddedViewRef<NgForRow>>this._viewContainer.get(i);\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      var viewRef = <EmbeddedViewRef<NgForRow>>this._viewContainer.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n  }\n\n  private _perViewChange(view: EmbeddedViewRef<NgForRow>, record: CollectionChangeRecord) {\n    view.context.$implicit = record.item;\n  }\n\n  private _bulkRemove(tuples: RecordViewTuple[]): RecordViewTuple[] {\n    tuples.sort(\n        (a: RecordViewTuple, b: RecordViewTuple) =>\n            a.record.previousIndex - b.record.previousIndex);\n    const movedTuples: RecordViewTuple[] = [];\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      const tuple = tuples[i];\n      // separate moved views from removed views.\n      if (isPresent(tuple.record.currentIndex)) {\n        tuple.view =\n            <EmbeddedViewRef<NgForRow>>this._viewContainer.detach(tuple.record.previousIndex);\n        movedTuples.push(tuple);\n      } else {\n        this._viewContainer.remove(tuple.record.previousIndex);\n      }\n    }\n    return movedTuples;\n  }\n\n  private _bulkInsert(tuples: RecordViewTuple[]): RecordViewTuple[] {\n    tuples.sort((a, b) => a.record.currentIndex - b.record.currentIndex);\n    for (let i = 0; i < tuples.length; i++) {\n      var tuple = tuples[i];\n      if (isPresent(tuple.view)) {\n        this._viewContainer.insert(tuple.view, tuple.record.currentIndex);\n      } else {\n        tuple.view = this._viewContainer.createEmbeddedView(\n            this._templateRef, new NgForRow(null, null, null), tuple.record.currentIndex);\n      }\n    }\n    return tuples;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nclass RecordViewTuple {\n  constructor(public record: any, public view: EmbeddedViewRef<NgForRow>) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}