{"version":3,"sources":["../../../../../modules/@angular/common/src/directives/ng_if.ts"],"names":[],"mappings":"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","file":"ng_if.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * # Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * # Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * # Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * # Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in folowing example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfLet'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<template [ngIf]=\"condition\"><div>...</div></template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <template #elseBlock>...</template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <template #thenBlock>...</template>\n * <template #elseBlock>...</template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition; else elseBlock; let value\">{{value}}</div>\n * <template #elseBlock>...</template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext> = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext> = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext> = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext> = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngIf': [{ type: Input },],\n'ngIfThen': [{ type: Input },],\n'ngIfElse': [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\nexport class NgIfContext {\npublic $implicit: any = null; }\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}