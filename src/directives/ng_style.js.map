{"version":3,"file":"ng_style.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_style.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChangeRecord, KeyValueDiffer, KeyValueDiffers, Renderer} from '@angular/core';\n\nimport {isBlank, isPresent} from '../facade/lang';\n\n\n\n/**\n * The `NgStyle` directive changes styles based on a result of expression evaluation.\n *\n * An expression assigned to the `ngStyle` property must evaluate to an object and the\n * corresponding element styles are updated based on changes to this object. Style names to update\n * are taken from the object's keys, and values - from the corresponding object's values.\n *\n * ### Syntax\n *\n * - `<div [ngStyle]=\"{'font-style': styleExp}\"></div>`\n * - `<div [ngStyle]=\"{'max-width.px': widthExp}\"></div>`\n * - `<div [ngStyle]=\"styleExp\"></div>` - here the `styleExp` must evaluate to an object\n *\n * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):\n *\n * ```\n * import {Component} from '@angular/core';\n * import {NgStyle} from '@angular/common';\n *\n * @Component({\n *  selector: 'ngStyle-example',\n *  template: `\n *    <h1 [ngStyle]=\"{'font-style': style, 'font-size': size, 'font-weight': weight}\">\n *      Change style of this text!\n *    </h1>\n *\n *    <hr>\n *\n *    <label>Italic: <input type=\"checkbox\" (change)=\"changeStyle($event)\"></label>\n *    <label>Bold: <input type=\"checkbox\" (change)=\"changeWeight($event)\"></label>\n *    <label>Size: <input type=\"text\" [value]=\"size\" (change)=\"size = $event.target.value\"></label>\n *  `,\n *  directives: [NgStyle]\n * })\n * export class NgStyleExample {\n *    style = 'normal';\n *    weight = 'normal';\n *    size = '20px';\n *\n *    changeStyle($event: any) {\n *      this.style = $event.target.checked ? 'italic' : 'normal';\n *    }\n *\n *    changeWeight($event: any) {\n *      this.weight = $event.target.checked ? 'bold' : 'normal';\n *    }\n * }\n * ```\n *\n * In this example the `font-style`, `font-size` and `font-weight` styles will be updated\n * based on the `style` property's value changes.\n *\n * @stable\n */\n\nexport class NgStyle implements DoCheck {\n  /** @internal */\n  _ngStyle: {[key: string]: string};\n  /** @internal */\n  _differ: KeyValueDiffer;\n\n  constructor(\n      private _differs: KeyValueDiffers, private _ngEl: ElementRef, private _renderer: Renderer) {}\n\n  \n  set ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (isBlank(this._differ) && isPresent(v)) {\n      this._differ = this._differs.find(this._ngStyle).create(null);\n    }\n  }\n\n  ngDoCheck() {\n    if (isPresent(this._differ)) {\n      var changes = this._differ.diff(this._ngStyle);\n      if (isPresent(changes)) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _applyChanges(changes: any): void {\n    changes.forEachRemovedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, null); });\n    changes.forEachAddedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, record.currentValue); });\n    changes.forEachChangedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, record.currentValue); });\n  }\n\n  private _setStyle(name: string, val: string): void {\n    const nameParts = name.split('.');\n    const nameToSet = nameParts[0];\n    const valToSet = isPresent(val) && nameParts.length === 2 ? `${val}${nameParts[1]}` : val;\n\n    this._renderer.setElementStyle(this._ngEl.nativeElement, nameToSet, valToSet);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngStyle': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}