{"version":3,"sources":["../../../../../modules/@angular/common/src/directives/ng_for_of.ts"],"names":[],"mappings":"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","file":"ng_for_of.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core/index';\n\nimport {getTypeNameForDebugging} from '../facade/lang';\nexport class NgForOfRow<T> {\n/**\n * @param {?} $implicit\n * @param {?} index\n * @param {?} count\n */\nconstructor(public $implicit: T,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfRow_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfRow.prototype.$implicit;\n/** @type {?} */\nNgForOfRow.prototype.index;\n/** @type {?} */\nNgForOfRow.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * * `index` will be set to the current loop iteration for each template context.\n * * `first` will be set to a boolean value indicating whether the item is the first one in the\n *   iteration.\n * * `last` will be set to a boolean value indicating whether the item is the last one in the\n *   iteration.\n * * `even` will be set to a boolean value indicating whether this item has an even index.\n * * `odd` will be set to a boolean value indicating whether this item has an odd index.\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * \n * With `<template>` element:\n * \n * ```\n * <template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck,\n    OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T> = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfRow<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfRow<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfRow(null, null, null), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = this._viewContainer.get(adjustedPreviousIndex);\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfRow<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfRow<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfRow<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(view: EmbeddedViewRef<NgForOfRow<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFor][ngForOf]',\n  providers: [{provide: forwardRef(() => NgFor), useExisting: forwardRef(() => NgForOf)}]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfRow<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n/**\n * The `NgFor` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgFor` provides several exported values that can be aliased to local variables:\n * \n * * `index` will be set to the current loop iteration for each template context.\n * * `first` will be set to a boolean value indicating whether the item is the first one in the\n *   iteration.\n * * `last` will be set to a boolean value indicating whether the item is the last one in the\n *   iteration.\n * * `even` will be set to a boolean value indicating whether this item has an even index.\n * * `odd` will be set to a boolean value indicating whether this item has an odd index.\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * \n * With `<template>` element:\n * \n * ```\n * <template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * @deprecated v4.0.0 - Use `NgForOf<T>` instead.\n */\nexport class NgFor extends NgForOf<any> {}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}