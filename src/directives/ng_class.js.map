{"version":3,"sources":["../../../../../modules/@angular/common/src/directives/ng_class.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAmB,UAAA,EAAY,KAAA,EAAwC,eAAA,EAAkD,eAAA,EAAiB,QAAA,EAAS,MAAA,eAAA,CAAA;AAE5J,OAAO,EAAA,kBAAE,EAAkB,MAAA,sBAAA,CAAA;AAC3B,OAAO,EAAA,SAAE,EAAS,MAAA,gBAAA,CAAA;AAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH;IAKA;;;;;OAKG;IACH,iBAFc,gBAAkB,EAAyB,gBAAkB,EAC7D,KAAO,EAAoB,SAAW;QADtC,qBAAA,GAAA,gBAAA,CAAkB;QAAyB,qBAAA,GAAA,gBAAA,CAAkB;QAC7D,UAAA,GAAA,KAAA,CAAO;QAAoB,cAAA,GAAA,SAAA,CAAW;QAL1C,oBAAA,GAA4B,EAAA,CAAG;IAKoB,CAAA;IAU7D,sBAPG,0BAAA;QAGH;;;WAGG;aACH,UAPG,CAAA;YAQC,IAAI,CAPC,oBAAC,CAAoB,IAAC,CAAI,CAAC;YAQhC,IAAI,CAPC,eAAC,GAAiB,OAAO,CAAA,KAAM,QAAA,GAAW,CAAA,CAAE,KAAC,CAAK,KAAC,CAAK,GAAG,EAAA,CAAG;YAQnE,IAAI,CAPC,oBAAC,CAAoB,KAAC,CAAK,CAAC;YAQjC,IAAI,CAPC,aAAC,CAAa,IAAC,CAAI,SAAC,EAAU,KAAA,CAAM,CAAC;QAQ5C,CAAC;;;OAAA;IAKH,sBATG,4BAAA;QAKH;;;WAGG;aACH,UATG,CAAA;YAUC,IAAI,CATC,eAAC,CAAe,IAAC,CAAI,SAAC,CAAS,CAAC;YAWrC,IAAI,CATC,eAAC,GAAiB,IAAA,CAAK;YAU5B,IAAI,CATC,eAAC,GAAiB,IAAA,CAAK;YAW5B,IAAI,CATC,SAAC,GAAW,OAAO,CAAA,KAAM,QAAA,GAAW,CAAA,CAAE,KAAC,CAAK,KAAC,CAAK,GAAG,CAAA,CAAE;YAW5D,EAAE,CAAC,CAAC,IATC,CAAI,SAAC,CAAS,CAAC,CAAA;gBAUlB,EAAE,CAAC,CAAC,kBATC,CAAkB,IAAC,CAAI,SAAC,CAAS,CAAC,CAAC,CAAA;oBAUtC,IAAI,CATC,eAAC,GAAiB,IAAA,CAAK,gBAAC,CAAgB,IAAC,CAAI,IAAC,CAAI,SAAC,CAAS,CAAC,MAAC,EAAM,CAAE;gBAU7E,CAAC;gBATC,IAAA,CAAK,CAAA;oBAUL,IAAI,CATC,eAAC,GAAiB,IAAA,CAAK,gBAAC,CAAgB,IAAC,CAAI,IAAC,CAAI,SAAC,CAAS,CAAC,MAAC,EAAM,CAAE;gBAU7E,CAAC;YACH,CAAC;QACH,CAAC;;;OAAA;IACH;;OAEG;IACH,2BAXG,GAWH;QACI,EAAE,CAAC,CAAC,IAXC,CAAI,eAAC,CAAe,CAAC,CAAA;YAYxB,IAAM,gBAAgB,CAXhB,eAAA,GAAkB,IAAA,CAAK,eAAC,CAAe,IAAC,CAAI,gBAAA,CAAA,CAAA,IAAC,CAAI,SAAoB,CAAA,CAAE,CAAC;YAY9E,EAAE,CAAC,CAAC,eAXC,CAAe,CAAC,CAAA;gBAYnB,IAAI,CAXC,qBAAC,CAAqB,eAAC,CAAe,CAAC;YAY9C,CAAC;QACH,CAAC;QAXC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,eAAC,CAAe,CAAC,CAAA;YAY/B,IAAM,gBAAgB,CAXhB,eAAA,GAAkB,IAAA,CAAK,eAAC,CAAe,IAAC,CAAI,gBAAA,CAAA,CAAA,IAAC,CAAI,SAA8B,CAAA,CAAC,CAAC;YAYvF,EAAE,CAAC,CAAC,eAXC,CAAe,CAAC,CAAA;gBAYnB,IAAI,CAXC,qBAAC,CAAqB,eAAC,CAAe,CAAC;YAY9C,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IAbA,iCAAA,GAcH,UAdG,WAAA;QAeC,IAAI,CAdC,aAAC,CAAa,WAAC,EAAY,IAAA,CAAK,CAAC;QAetC,IAAI,CAdC,oBAAC,CAAoB,KAAC,CAAK,CAAC;IAenC,CAAC;IACH;;;OAGG;IAhBA,uCAAA,GAiBH,UAjBG,OAAA;QAiBH,iBAQG;QAPC,OAAO,CAjBC,gBAAC,CAAgB,UAAC,MAAC,IAAU,OAAA,KAAA,CAAK,YAAC,CAAY,MAAC,CAAM,GAAC,EAAI,MAAA,CAAO,YAAC,CAAY,EAAlD,CAAkD,CAAC,CAAC;QAkBzF,OAAO,CAjBC,kBAAC,CAAkB,UAAC,MAAC,IAAU,OAAA,KAAA,CAAK,YAAC,CAAY,MAAC,CAAM,GAAC,EAAI,MAAA,CAAO,YAAC,CAAY,EAAlD,CAAkD,CAAC,CAAC;QAkB3F,OAAO,CAjBC,kBAAC,CAAkB,UAAC,MAAC;YAkB3B,EAAE,CAAC,CAAC,MAjBC,CAAM,aAAC,CAAa,CAAC,CAAA;gBAkBxB,KAAI,CAjBC,YAAC,CAAY,MAAC,CAAM,GAAC,EAAI,KAAA,CAAM,CAAC;YAkBvC,CAAC;QACH,CAAC,CAjBC,CAAC;IAkBL,CAAC;IACH;;;OAGG;IAnBA,uCAAA,GAoBH,UApBG,OAAA;QAoBH,iBAWG;QAVC,OAAO,CApBC,gBAAC,CAAgB,UAAC,MAAC;YAqBzB,EAAE,CAAC,CAAC,OApBO,MAAA,CAAO,IAAC,KAAQ,QAAA,CAAS,CAAC,CAAA;gBAqBnC,KAAI,CApBC,YAAC,CAAY,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,CAAC;YAqBvC,CAAC;YApBC,IAAA,CAAK,CAAA;gBAqBL,MApBM,IAAI,KAAA,CAqBN,mEAAiE,SApBC,CAAS,MAAC,CAAM,IAAC,CAAK,CAAE,CAAC;YAqBjG,CAAC;QACH,CAAC,CApBC,CAAC;QAsBH,OAAO,CApBC,kBAAC,CAAkB,UAAC,MAAC,IAAU,OAAA,KAAA,CAAK,YAAC,CAAY,MAAC,CAAM,IAAC,EAAK,KAAA,CAAM,EAArC,CAAqC,CAAC,CAAC;IAqBhF,CAAC;IACH;;;OAGG;IAtBA,sCAAA,GAuBH,UAvBG,SAAA;QAuBH,iBAEG;QADC,IAAI,CAvBC,eAAC,CAAe,OAAC,CAAO,UAAA,KAAC,IAAQ,OAAA,KAAA,CAAK,YAAC,CAAY,KAAC,EAAM,CAAA,SAAE,CAAS,EAApC,CAAoC,CAAC,CAAC;IAwB9E,CAAC;IACH;;;;OAIG;IA1BA,+BAAA,GA2BH,UACM,WAAwD,EAAE,SAAkB;QADlF,iBAWG;QATC,EAAE,CAAC,CAAC,WA3BC,CAAW,CAAC,CAAA;YA4Bf,EAAE,CAAC,CAAC,KA3BC,CAAK,OAAC,CAAO,WAAC,CAAW,IAAI,WAAA,YAAuB,GAAA,CAAI,CAAC,CAAA;gBA4B5D,CAAkB,CA3BZ,WAAC,CAAA,CAAW,CAAC,OAAC,CAAO,UAAC,KAAO,IAAW,OAAA,KAAA,CAAK,YAAC,CAAY,KAAC,EAAM,CAAA,SAAE,CAAS,EAApC,CAAoC,CAAC,CAAC;YA4BtF,CAAC;YA3BC,IAAA,CAAK,CAAA;gBA4BL,MAAM,CA3BC,IAAC,CAAI,WAAC,CAAW,CAAC,OAAC,CAAO,UAAA,KAAC;oBAcxC,EAAA,CAAA,CAAA,WAba,CAAW,KAAC,CAAK,IAAI,IAAA,CAAK;wBAAC,KAAA,CAAK,YAAC,CAAY,KAAC,EAAM,CAAA,SAAE,CAAS,CAAC;gBA4BvE,CAAC,CA3BC,CAAC;YA4BL,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;OAIG;IA9BA,8BAAA,GA+BH,UA/BG,KAAA,EAAA,OAAA;QA+BH,iBAMG;QALC,KAAK,GA/BG,KAAA,CAAM,IAAC,EAAI,CAAE;QAgCrB,EAAE,CAAC,CAAC,KA/BC,CAAK,CAAC,CAAA;YAgCT,KAAK,CA/BC,KAAC,CAAK,MAAC,CAAM,CAAC,OAAC,CAgCjB,UAAA,KAAK,IA/BM,KAAA,CAAK,SAAC,CAAS,eAAC,CAAe,KAAC,CAAI,KAAC,CAAK,aAAC,EAAc,KAAA,EAAO,CAAA,CAAE,OAAC,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;QAgChG,CAAC;IACH,CAAC;IAeH,cAAC;AAAD,CArJA,AAqJC;;AA7CM,kBAAA,GAAoC;IAgC3C,EA/BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,EAAE,QAAC,EAAS,WAAA,EAAY,EAAC,EAAG;CAgCpD,CA/BC;AAgCF,kBAAkB;AA9BX,sBAAA,GAAiF,cAAM,OAAA;IAgC9F,EAAC,IA/BC,EAAK,eAAA,GAAgB;IAgCvB,EAAC,IA/BC,EAAK,eAAA,GAAgB;IAgCvB,EAAC,IA/BC,EAAK,UAAA,GAAW;IAgClB,EAAC,IA/BC,EAAK,QAAA,GAAS;CAgCf,EApC6F,CAoC7F,CA/BC;AACK,sBAAA,GAAyD;IAgChE,OAAO,EA/BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IAgC7C,SAAS,EA/BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAgC3B,CA/BC;AAkCF;IACA,gBAAgB;IAChB,OAAO,CAAC,UAAU,CAAC;IACnB;;;OAGG;IACH,OAAO,CAAC,cAAc,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,cAAc,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC;IAClC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC;IAClC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC;IAClC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;IAC5B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACnC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACnC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC;IACxB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;AAC5B,CAAC","file":"ng_class.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer} from '@angular/core';\n\nimport {isListLikeIterable} from '../facade/collection';\nimport {stringify} from '../facade/lang';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\nprivate _toggleClass(klass: string, enabled: any): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(\n          klass => { this._renderer.setElementClass(this._ngEl.nativeElement, klass, !!enabled); });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'klass': [{ type: Input, args: ['class', ] },],\n'ngClass': [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}