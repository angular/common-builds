{"version":3,"sources":["../../../../../modules/@angular/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAA2B,KAAA,EAA8C,gBAAA,EAAiB,MAAA,eAAA,CAAA;AACnG;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAIA;;OAEG;IACH,0BAEsB,iBAAmB;QAAnB,sBAAA,GAAA,iBAAA,CAAmB;IAAiB,CAAA;IAI1D,sBAEG,6CAAA;QAPH;;;;WAIG;aACH,UAEG,OAAA,IAAsC,IAAA,CAAK,uBAAC,GAAyB,OAAA,CAAQ,CAAC,CAAA;;;OAAA;IADjF;;;OAGG;IACH,sCADG,GACH,UADG,OAAA;QAEC,EAAE,CAAC,CAAC,IADC,CAAI,QAAC,CAAQ,CAAC,CAAA;YAEjB,IAAI,CADC,iBAAC,CAAiB,MAAC,CAAM,IAAC,CAAI,iBAAC,CAAiB,OAAC,CAAO,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC;QAE/E,CAAC;QAED,EAAE,CAAC,CAAC,IADC,CAAI,gBAAC,CAAgB,CAAC,CAAA;YAEzB,IAAI,CADC,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,kBAAC,CAEpC,IAAI,CADC,gBAAC,EAAiB,IAAA,CAAK,uBAAC,CAAuB,CAAC;QAE3D,CAAC;IACH,CAAC;IAaH,uBAAC;AAAD,CAxCA,AAwCC;;AAbM,2BAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,EAAE,QAAC,EAAS,oBAAA,EAAqB,EAAC,EAAG;CAE7D,CADC;AAEF,kBAAkB;AAAX,+BAAA,GAAiF,cAAM,OAAA;IAE9F,EAAC,IADC,EAAK,gBAAA,GAAiB;CAEvB,EAH6F,CAG7F,CADC;AACK,+BAAA,GAAyD;IAEhE,yBAAyB,EADE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAE5C,kBAAkB,EADE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAErC,iBAAiB,EADE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAEnC,CADC;AAIF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACpC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,uBAAuB,CAAC;IACnD,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC5C,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAC7C,CAAC","file":"ng_template_outlet.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * # Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@experimental\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this._viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n    }\n\n    if (this.ngTemplateOutlet) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(\n          this.ngTemplateOutlet, this.ngTemplateOutletContext);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutletContext': [{ type: Input },],\n'ngTemplateOutlet': [{ type: Input },],\n'ngOutletContext': [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}