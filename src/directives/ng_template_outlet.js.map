{"version":3,"file":"ng_template_outlet.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,SAAS,EAAmB,KAAK,EAAyC,gBAAgB,EAAC,MAAM,eAAe;AACxH;;;;;;;;;;;;;;;;;;GAkBG;AACH;IAIA;;OAEG;IACH,0BAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;IAAG,CAAC;IAM3D,sBAAI,6CAAe;QALnB;;;;WAIG;aACH,UAAoB,OAAe,IAAI,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAChF;;;OAGG;IACH,sCAAW,GAAX,UAAY,OAAsB;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/E,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CACrD,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACI,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,EAAG,EAAE;KAC9D,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,EAF6F,CAE7F,CAAC;IACK,+BAAc,GAA2C;QAChE,yBAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7C,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACtC,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACpC,CAAC;IACF,uBAAC;AAAD,CAAC,AAxCD,IAwCC;AAED;IACC,gBAAgB;IACjB,gBAAgB,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACJ,gBAAgB,CAAC,cAAc,CAAC;IAC/B,gBAAgB;IACjB,gBAAgB,CAAC,cAAc,CAAC;IAC/B,gBAAgB;IACjB,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,gBAAgB;IACjB,gBAAgB,CAAC,SAAS,CAAC,uBAAuB,CAAC;IAClD,gBAAgB;IACjB,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC3C,gBAAgB;IACjB,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAC7C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n *  *\n  * *\n  * ```\n  * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n  * ```\n  * *\n  * *\n  * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n  * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n  * by the local template `let` declarations.\n  * *\n  * Note: using the key `$implicit` in the context object will set it's value as default.\n  * *\n  * # Example\n  * *\n  * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n  * *\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this._viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n    }\n\n    if (this.ngTemplateOutlet) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(\n          this.ngTemplateOutlet, this.ngTemplateOutletContext);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutletContext': [{ type: Input },],\n'ngTemplateOutlet': [{ type: Input },],\n'ngOutletContext': [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n /** @type {?} */\nNgTemplateOutlet.decorators;\n /**\n  * @nocollapse\n  * @type {?}\n  */\nNgTemplateOutlet.ctorParameters;\n /** @type {?} */\nNgTemplateOutlet.propDecorators;\n /** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n /** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n /** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n /** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}