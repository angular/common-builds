{"version":3,"file":"ng_for_of.js","sourceRoot":"","sources":["../../../../../packages/common/src/directives/ng_for_of.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n\n/**\n *\n */\nexport class NgForOfContext<T> {\n  constructor(\n      public $implicit: T, public ngForOf: NgIterable<T>, public index: number,\n      public count: number) {}\n\n  get first(): boolean { return this.index === 0; }\n\n  get last(): boolean { return this.index === this.count - 1; }\n\n  get even(): boolean { return this.index % 2 === 0; }\n\n  get odd(): boolean { return !this.even; }\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n *\n * ### Local Variables\n *\n * `NgForOf` provides several exported values that can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * ### Change Propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n *\n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n *\n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * ### Syntax\n *\n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n *\n * With `<ng-template>` element:\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * ### Example\n *\n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n *\n *\n */\n@Directive({selector: '[ngFor][ngForOf]'})\nexport class NgForOf<T> implements DoCheck, OnChanges {\n  @Input() ngForOf: NgIterable<T>;\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n  private _differ: IterableDiffer<T>|null = null;\n  private _trackByFn: TrackByFunction<T>;\n\n  constructor(\n      private _viewContainer: ViewContainerRef, private _template: TemplateRef<NgForOfContext<T>>,\n      private _differs: IterableDiffers) {}\n\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch (e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this._differ) {\n      const changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>(null !, this.ngForOf, -1, -1), currentIndex);\n            const tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const view = this._viewContainer.get(adjustedPreviousIndex) !;\n            this._viewContainer.move(view, currentIndex);\n            const tuple = new RecordViewTuple(item, <EmbeddedViewRef<NgForOfContext<T>>>view);\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i);\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef =\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n  }\n\n  private _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\n}\n\nclass RecordViewTuple<T> {\n  constructor(public record: any, public view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n"]}