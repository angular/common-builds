{"version":3,"file":"number_pipe.js","sourceRoot":"","sources":["../../../../../packages/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatCurrency, formatNumber, formatPercent} from '../i18n/format_number';\nimport {getCurrencySymbol} from '../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Uses the function {@link formatNumber} to format a number according to locale rules.\n *\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the locale.\n *\n * ### Example\n *\n * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n *\n *\n */\n@Pipe({name: 'number'})\nexport class DecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   * @param value a number to be formatted.\n   * @param digitsInfo a `string` which has a following format: <br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n   *   - `minFractionDigits` is the minimum number of digits after the decimal point. Defaults to\n   * `0`.\n   *   - `maxFractionDigits` is the maximum number of digits after the decimal point. Defaults to\n   * `3`.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatNumber(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(DecimalPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Uses the function {@link formatPercent} to format a number as a percentage according\n * to locale rules.\n *\n * ### Example\n *\n * {@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}\n *\n *\n */\n@Pipe({name: 'percent'})\nexport class PercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value a number to be formatted as a percentage.\n   * @param digitsInfo see {@link DecimalPipe} for more details.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n * default).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatPercent(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(PercentPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Uses the functions {@link getCurrencySymbol} and {@link formatCurrency} to format a\n * number as currency using locale rules.\n *\n * ### Example\n *\n * {@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}\n *\n *\n */\n@Pipe({name: 'currency'})\nexport class CurrencyPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value a number to be formatted as currency.\n   * @param currencyCodeis the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n   * such as `USD` for the US dollar and `EUR` for the euro.\n   * @param display indicates whether to show the currency symbol, the code or a custom value:\n   *   - `code`: use code (e.g. `USD`).\n   *   - `symbol`(default): use symbol (e.g. `$`).\n   *   - `symbol-narrow`: some countries have two symbols for their currency, one regular and one\n   *     narrow (e.g. the canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`).\n   *   - `string`: use this value instead of a code or a symbol.\n   *   - boolean (deprecated from v5): `true` for symbol and false for `code`.\n   *   If there is no narrow symbol for the chosen currency, the regular symbol will be used.\n   * @param digitsInfo see {@link DecimalPipe} for more details.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(\n      value: any, currencyCode?: string,\n      display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol', digitsInfo?: string,\n      locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let currency: string = currencyCode || 'USD';\n    if (display !== 'code') {\n      if (display === 'symbol' || display === 'symbol-narrow') {\n        currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n      } else {\n        currency = display;\n      }\n    }\n\n    try {\n      const num = strToNumber(value);\n      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error.message);\n    }\n  }\n}\n\nfunction isEmpty(value: any): boolean {\n  return value == null || value === '' || value !== value;\n}\n\n/**\n * Transforms a string into a number (if needed)\n */\nfunction strToNumber(value: number | string): number {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new Error(`${value} is not a number`);\n  }\n  return value;\n}\n"]}