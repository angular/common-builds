{"version":3,"file":"locale_data_api.js","sourceRoot":"","sources":["../../../../../packages/common/src/i18n/locale_data_api.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport localeEn from './locale_en';\nimport {LOCALE_DATA, LocaleDataIndex, ExtraLocaleDataIndex, CurrencyIndex} from './locale_data';\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n/**\n * The different format styles that can be used to represent numbers.\n * Used by the function {@link getLocaleNumberFormat}.\n *\n * @experimental i18n support is experimental.\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific\n}\n\n/** @experimental */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Some languages use two different forms of strings (standalone and format) depending on the\n * context.\n * Typically the standalone version is the nominative form of the word, and the format version is in\n * the genitive.\n * See [the CLDR website](http://cldr.unicode.org/translation/date-time) for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport enum FormStyle {\n  Format,\n  Standalone\n}\n\n/**\n * Multiple widths are available for translations: narrow (1 character), abbreviated (3 characters),\n * wide (full length), and short (2 characters, only for days).\n *\n * For example the day `Sunday` will be:\n * - Narrow: `S`\n * - Short: `Su`\n * - Abbreviated: `Sun`\n * - Wide: `Sunday`\n *\n * @experimental i18n support is experimental.\n */\nexport enum TranslationWidth {\n  Narrow,\n  Abbreviated,\n  Wide,\n  Short\n}\n\n/**\n * Multiple widths are available for formats: short (minimal amount of data), medium (small amount\n * of data), long (complete amount of data), full (complete amount of data and extra information).\n *\n * For example the date-time formats for the english locale will be:\n *  - `'short'`: `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)\n *  - `'medium'`: `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)\n *  - `'long'`: `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)\n *  - `'full'`: `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`)\n *\n * @experimental i18n support is experimental.\n */\nexport enum FormatWidth {\n  Short,\n  Medium,\n  Long,\n  Full\n}\n\n/**\n * Number symbol that can be used to replace placeholders in number patterns.\n * The placeholders are based on english values:\n *\n * | Name                   | Example for en-US | Meaning                                     |\n * |------------------------|-------------------|---------------------------------------------|\n * | decimal                | 2,345`.`67        | decimal separator                           |\n * | group                  | 2`,`345.67        | grouping separator, typically for thousands |\n * | plusSign               | `+`23             | the plus sign used with numbers             |\n * | minusSign              | `-`23             | the minus sign used with numbers            |\n * | percentSign            | 23.4`%`           | the percent sign (out of 100)               |\n * | perMille               | 234`‰`            | the permille sign (out of 1000)             |\n * | exponential            | 1.2`E`3           | used in computers for 1.2×10³.              |\n * | superscriptingExponent | 1.2`×`103         | human-readable format of exponential        |\n * | infinity               | `∞`               | used in +∞ and -∞.                          |\n * | nan                    | `NaN`             | \"not a number\".                             |\n * | timeSeparator          | 10`:`52           | symbol used between time units              |\n * | currencyDecimal        | $2,345`.`67       | decimal separator, fallback to \"decimal\"    |\n * | currencyGroup          | $2`,`345.67       | grouping separator, fallback to \"group\"     |\n *\n * @experimental i18n support is experimental.\n */\nexport enum NumberSymbol {\n  Decimal,\n  Group,\n  List,\n  PercentSign,\n  PlusSign,\n  MinusSign,\n  Exponential,\n  SuperscriptingExponent,\n  PerMille,\n  Infinity,\n  NaN,\n  TimeSeparator,\n  CurrencyDecimal,\n  CurrencyGroup\n}\n\n/**\n * The value for each day of the week, based on the en-US locale\n *\n * @experimental\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleId(locale: string): string {\n  return findLocaleData(locale)[LocaleDataIndex.LocaleId];\n}\n\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string] {\n  const data = findLocaleData(locale);\n  const amPmData = <[\n    string, string\n  ][][]>[data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  const daysData =\n      <string[][][]>[data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  const monthsData =\n      <string[][][]>[data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string] {\n  const data = findLocaleData(locale);\n  const erasData = <[string, string][]>data[LocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.WeekendRange];\n}\n\n/**\n * Date format that depends on the locale.\n *\n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n *\n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n *\n * - `long` should contain year, long-month, day.\n *\n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n *\n * - `medium` should contain year, abbreviated-month (MMM), day.\n *\n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n *\n * - `short` should contain year, numeric-month (MM/M), and day.\n *\n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Time format that depends on the locale.\n *\n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n *\n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Date-time format that depends on the locale.\n *\n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n *\n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n *\n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[LocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {@link NumberSymbol} for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = findLocaleData(locale);\n  const res = data[LocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Number format that depends on the locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * The name of the currency for the main country using this locale (e.g. USD for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Returns the currency values for the locale\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.Currencies];\n}\n\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {@link NgPlural} for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocalePluralCase(locale: string): (value: number) => Plural {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\nfunction checkFullData(data: any) {\n  if (!data[LocaleDataIndex.ExtraData]) {\n    throw new Error(\n        `Missing extra locale data for the locale \"${data[LocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n *\n * Note: this is only available if you load the full locale data.\n * See the {@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const data = findLocaleData(locale);\n  checkFullData(data);\n  const rules = data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n *\n * Note: this is only available if you load the full locale data.\n * See the {@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n *\n * @experimental i18n support is experimental.\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Returns the first value that is defined in an array, going backwards.\n *\n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\n * add the first one to the locale data arrays, the other ones are only defined when different.\n * We use this function to retrieve the first defined value.\n *\n * @experimental i18n support is experimental.\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * A representation of the time with hours and minutes\n *\n * @experimental i18n support is experimental.\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n\n/**\n * Extract the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n/**\n * Finds the locale data for a locale id\n *\n * @experimental i18n support is experimental.\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n\n  let match = LOCALE_DATA[normalizedLocale];\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = LOCALE_DATA[parentLocale];\n\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * Returns the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: format narrow = $, format wide = US$, code = USD)\n * If no locale is provided, it uses the locale \"en\" by default\n *\n * @experimental i18n support is experimental.\n */\nexport function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[CurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[CurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Returns the number of decimal digits for the given currency.\n * Its value depends upon the presence of cents in that particular currency.\n *\n * @experimental i18n support is experimental.\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[CurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n"]}