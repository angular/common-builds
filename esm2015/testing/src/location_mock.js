import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A spy for {@link Location} that allows tests to fire simulated location events.
 *
 * @publicApi
 */
let SpyLocation = /** @class */ (() => {
    class SpyLocation {
        constructor() {
            this.urlChanges = [];
            this._history = [new LocationState('', '', null)];
            this._historyIndex = 0;
            /** @internal */
            this._subject = new EventEmitter();
            /** @internal */
            this._baseHref = '';
            /** @internal */
            this._platformStrategy = null;
            /** @internal */
            this._platformLocation = null;
            /** @internal */
            this._urlChangeListeners = [];
        }
        setInitialPath(url) {
            this._history[this._historyIndex].path = url;
        }
        setBaseHref(url) {
            this._baseHref = url;
        }
        path() {
            return this._history[this._historyIndex].path;
        }
        getState() {
            return this._history[this._historyIndex].state;
        }
        isCurrentPathEqualTo(path, query = '') {
            const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;
            const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();
            return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');
        }
        simulateUrlPop(pathname) {
            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });
        }
        simulateHashChange(pathname) {
            // Because we don't prevent the native event, the browser will independently update the path
            this.setInitialPath(pathname);
            this.urlChanges.push('hash: ' + pathname);
            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });
        }
        prepareExternalUrl(url) {
            if (url.length > 0 && !url.startsWith('/')) {
                url = '/' + url;
            }
            return this._baseHref + url;
        }
        go(path, query = '', state = null) {
            path = this.prepareExternalUrl(path);
            if (this._historyIndex > 0) {
                this._history.splice(this._historyIndex + 1);
            }
            this._history.push(new LocationState(path, query, state));
            this._historyIndex = this._history.length - 1;
            const locationState = this._history[this._historyIndex - 1];
            if (locationState.path == path && locationState.query == query) {
                return;
            }
            const url = path + (query.length > 0 ? ('?' + query) : '');
            this.urlChanges.push(url);
            this._subject.emit({ 'url': url, 'pop': false });
        }
        replaceState(path, query = '', state = null) {
            path = this.prepareExternalUrl(path);
            const history = this._history[this._historyIndex];
            if (history.path == path && history.query == query) {
                return;
            }
            history.path = path;
            history.query = query;
            history.state = state;
            const url = path + (query.length > 0 ? ('?' + query) : '');
            this.urlChanges.push('replace: ' + url);
        }
        forward() {
            if (this._historyIndex < (this._history.length - 1)) {
                this._historyIndex++;
                this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });
            }
        }
        back() {
            if (this._historyIndex > 0) {
                this._historyIndex--;
                this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });
            }
        }
        onUrlChange(fn) {
            this._urlChangeListeners.push(fn);
            this.subscribe(v => {
                this._notifyUrlChangeListeners(v.url, v.state);
            });
        }
        /** @internal */
        _notifyUrlChangeListeners(url = '', state) {
            this._urlChangeListeners.forEach(fn => fn(url, state));
        }
        subscribe(onNext, onThrow, onReturn) {
            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        }
        normalize(url) {
            return null;
        }
    }
    SpyLocation.ɵfac = function SpyLocation_Factory(t) { return new (t || SpyLocation)(); };
    SpyLocation.ɵprov = i0.ɵɵdefineInjectable({ token: SpyLocation, factory: SpyLocation.ɵfac });
    return SpyLocation;
})();
export { SpyLocation };
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SpyLocation, [{
        type: Injectable
    }], null, null); })();
class LocationState {
    constructor(path, query, state) {
        this.path = path;
        this.query = query;
        this.state = state;
    }
}
//# sourceMappingURL=data:application/json;base64,