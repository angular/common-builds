{"version":3,"file":"ng_template_outlet.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAe,gBAAgB,EAAU,MAAM,eAAe;OAE/E,EAAC,SAAS,EAAC,MAAM,gBAAgB;AACxC;IAGE,YAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;IAAG,CAAC;IAC3D,IAAI,gBAAgB,CAAC,WAAgC;QACnD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACvF,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;AAaH,CAAC;AAZD,kBAAkB;AACX,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,EAAG,EAAE;CAC9D,CAAC;AACF,kBAAkB;AACX,+BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,gBAAgB,GAAG;CACzB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAA2C;IAChE,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CACrC,CACA","sourcesContent":["import {Directive, Input, TemplateRef, ViewContainerRef, ViewRef} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nexport class NgTemplateOutlet {\n  private _insertedViewRef: ViewRef;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n  set ngTemplateOutlet(templateRef: TemplateRef<Object>) {\n    if (isPresent(this._insertedViewRef)) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._insertedViewRef));\n    }\n\n    if (isPresent(templateRef)) {\n      this._insertedViewRef = this._viewContainerRef.createEmbeddedView(templateRef);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutlet': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}