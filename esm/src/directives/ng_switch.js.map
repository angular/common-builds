{"version":3,"file":"ng_switch.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/directives/ng_switch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {ListWrapper} from '../facade/collection';\nimport {isBlank, isPresent, normalizeBlank} from '../facade/lang';\n\nconst _CASE_DEFAULT = new Object();\n\n// TODO: remove when fully deprecated\nlet _warned: boolean = false;\n\nexport class SwitchView {\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void { this._viewContainerRef.createEmbeddedView(this._templateRef); }\n\n  destroy(): void { this._viewContainerRef.clear(); }\n}\nexport class NgSwitch {\n  private _switchValue: any;\n  private _useDefault: boolean = false;\n  private _valueViews = new Map<any, SwitchView[]>();\n  private _activeViews: SwitchView[] = [];\n  set ngSwitch(value: any) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViews();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      this._useDefault = true;\n      views = normalizeBlank(this._valueViews.get(_CASE_DEFAULT));\n    }\n    this._activateViews(views);\n\n    this._switchValue = value;\n  }\n\n  /** @internal */\n  _onCaseValueChanged(oldCase: any, newCase: any, view: SwitchView): void {\n    this._deregisterView(oldCase, view);\n    this._registerView(newCase, view);\n\n    if (oldCase === this._switchValue) {\n      view.destroy();\n      ListWrapper.remove(this._activeViews, view);\n    } else if (newCase === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViews();\n      }\n      view.create();\n      this._activeViews.push(view);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViews.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViews(this._valueViews.get(_CASE_DEFAULT));\n    }\n  }\n\n  /** @internal */\n  _emptyAllActiveViews(): void {\n    var activeContainers = this._activeViews;\n    for (var i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].destroy();\n    }\n    this._activeViews = [];\n  }\n\n  /** @internal */\n  _activateViews(views: SwitchView[]): void {\n    // TODO(vicb): assert(this._activeViews.length === 0);\n    if (isPresent(views)) {\n      for (var i = 0; i < views.length; i++) {\n        views[i].create();\n      }\n      this._activeViews = views;\n    }\n  }\n\n  /** @internal */\n  _registerView(value: any, view: SwitchView): void {\n    var views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      views = [];\n      this._valueViews.set(value, views);\n    }\n    views.push(view);\n  }\n\n  /** @internal */\n  _deregisterView(value: any, view: SwitchView): void {\n    // `_CASE_DEFAULT` is used a marker for non-registered cases\n    if (value === _CASE_DEFAULT) return;\n    var views = this._valueViews.get(value);\n    if (views.length == 1) {\n      this._valueViews.delete(value);\n    } else {\n      ListWrapper.remove(views, view);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitch': [{ type: Input },],\n};\n}\nexport class NgSwitchCase {\n  // `_CASE_DEFAULT` is used as a marker for a not yet initialized value\n  /** @internal */\n  _value: any = _CASE_DEFAULT;\n  /** @internal */\n  _view: SwitchView;\n  private _switch: NgSwitch;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch) {\n    this._switch = ngSwitch;\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n  set ngSwitchCase(value: any) {\n    this._switch._onCaseValueChanged(this._value, value, this._view);\n    this._value = value;\n  }\n  set ngSwitchWhen(value: any) {\n    if (!_warned) {\n      _warned = true;\n      console.warn('*ngSwitchWhen is deprecated and will be removed. Use *ngSwitchCase instead');\n    }\n    this._switch._onCaseValueChanged(this._value, value, this._view);\n    this._value = value;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase],[ngSwitchWhen]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitchCase': [{ type: Input },],\n'ngSwitchWhen': [{ type: Input },],\n};\n}\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, sswitch: NgSwitch) {\n    sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}