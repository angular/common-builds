{"version":3,"file":"number_pipe.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {NumberFormatStyle, NumberFormatter} from '../facade/intl';\nimport {NumberWrapper, Type, isBlank, isNumber, isPresent, isString} from '../facade/lang';\n\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\n\nvar defaultLocale: string = 'en-US';\nconst _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/;\n\nfunction formatNumber(\n    pipe: Type, value: number | string, style: NumberFormatStyle, digits: string,\n    currency: string = null, currencyAsSymbol: boolean = false): string {\n  if (isBlank(value)) return null;\n  // Convert strings to numbers\n  value = isString(value) && NumberWrapper.isNumeric(value) ? +value : value;\n  if (!isNumber(value)) {\n    throw new InvalidPipeArgumentException(pipe, value);\n  }\n  let minInt: number;\n  let minFraction: number;\n  let maxFraction: number;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (isPresent(digits)) {\n    var parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (isPresent(parts[1])) {  // min integer digits\n      minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n    }\n    if (isPresent(parts[3])) {  // min fraction digits\n      minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n    }\n    if (isPresent(parts[5])) {  // max fraction digits\n      maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n    }\n  }\n  return NumberFormatter.format(value as number, defaultLocale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol\n  });\n}\nexport class DecimalPipe implements PipeTransform {\n  transform(value: any, digits: string = null): string {\n    return formatNumber(DecimalPipe, value, NumberFormatStyle.Decimal, digits);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n}\nexport class PercentPipe implements PipeTransform {\n  transform(value: any, digits: string = null): string {\n    return formatNumber(PercentPipe, value, NumberFormatStyle.Percent, digits);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n}\nexport class CurrencyPipe implements PipeTransform {\n  transform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits: string = null): string {\n    return formatNumber(\n        CurrencyPipe, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}