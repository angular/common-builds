/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken, ÉµRuntimeError as RuntimeError } from '@angular/core';
import { PRECONNECT_CHECK_BLOCKLIST } from '../preconnect_link_checker';
import { isAbsoluteURL, isValidPath, normalizePath } from '../util';
/**
 * Noop image loader that does no transformation to the original src and just returns it as is.
 * This loader is used as a default one if more specific logic is not provided in an app config.
 */
const noopImageLoader = (config) => config.src;
/**
 * Special token that allows to configure a function that will be used to produce an image URL based
 * on the specified input.
 */
export const IMAGE_LOADER = new InjectionToken('ImageLoader', {
    providedIn: 'root',
    factory: () => noopImageLoader,
});
export function createImageLoader(urlFn, exampleUrls) {
    return function provideImageLoader(path, options = { ensurePreconnect: true }) {
        if (ngDevMode && !isValidPath(path)) {
            throwInvalidPathError(path, exampleUrls || []);
        }
        path = normalizePath(path);
        const loaderFn = (config) => {
            if (ngDevMode && isAbsoluteURL(config.src)) {
                throwUnexpectedAbsoluteUrlError(path, config.src);
            }
            const loader = urlFn(path);
            return loader(config);
        };
        const providers = [{ provide: IMAGE_LOADER, useValue: loaderFn }];
        if (ngDevMode && options.ensurePreconnect === false) {
            providers.push({ provide: PRECONNECT_CHECK_BLOCKLIST, useValue: [path], multi: true });
        }
        return providers;
    };
}
function throwInvalidPathError(path, exampleUrls) {
    const exampleUrlsMsg = exampleUrls.join(' or ');
    throw new RuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, `Image loader has detected an invalid path. ` +
        `Expecting a path matching one of the following formats: ${exampleUrlsMsg}` +
        ` - but got: \`${path}\``);
}
function throwUnexpectedAbsoluteUrlError(path, url) {
    throw new RuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, `Image loader has detected an absolute URL used for one of the \`rawSrc\` ` +
        `attributes on an \`<img>\` tag: ${url}. The absolute URLs are not ` +
        `supported by this image loader. Please update the \`rawSrc\` attribute ` +
        `of that \`<img>\` tag to use a path relative to the base URL configured ` +
        `for this loader (\`${path}\`).`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VfbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9kaXJlY3RpdmVzL25nX29wdGltaXplZF9pbWFnZS9pbWFnZV9sb2FkZXJzL2ltYWdlX2xvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsY0FBYyxFQUFZLGFBQWEsSUFBSSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHdEYsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBaUJsRTs7O0dBR0c7QUFDSCxNQUFNLGVBQWUsR0FBRyxDQUFDLE1BQXlCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFFbEU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFjLGFBQWEsRUFBRTtJQUN6RSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZTtDQUMvQixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsS0FBb0MsRUFBRSxXQUFzQjtJQUM1RixPQUFPLFNBQVMsa0JBQWtCLENBQzlCLElBQVksRUFBRSxVQUF3QyxFQUFDLGdCQUFnQixFQUFFLElBQUksRUFBQztRQUNoRixJQUFJLFNBQVMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzQixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQXlCLEVBQUUsRUFBRTtZQUM3QyxJQUFJLFNBQVMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQywrQkFBK0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFlLENBQUMsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDO1FBRTVFLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLEVBQUU7WUFDbkQsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUN0RjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUFDLElBQWEsRUFBRSxXQUFxQjtJQUNqRSxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELE1BQU0sSUFBSSxZQUFZLHVEQUVsQiw2Q0FBNkM7UUFDekMsMkRBQTJELGNBQWMsRUFBRTtRQUMzRSxpQkFBaUIsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsU0FBUywrQkFBK0IsQ0FBQyxJQUFZLEVBQUUsR0FBVztJQUNoRSxNQUFNLElBQUksWUFBWSx1REFFbEIsMkVBQTJFO1FBQ3ZFLG1DQUFtQyxHQUFHLDhCQUE4QjtRQUNwRSx5RUFBeUU7UUFDekUsMEVBQTBFO1FBQzFFLHNCQUFzQixJQUFJLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIsIMm1UnVudGltZUVycm9yIGFzIFJ1bnRpbWVFcnJvcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7UnVudGltZUVycm9yQ29kZX0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7UFJFQ09OTkVDVF9DSEVDS19CTE9DS0xJU1R9IGZyb20gJy4uL3ByZWNvbm5lY3RfbGlua19jaGVja2VyJztcbmltcG9ydCB7aXNBYnNvbHV0ZVVSTCwgaXNWYWxpZFBhdGgsIG5vcm1hbGl6ZVBhdGh9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIENvbmZpZyBvcHRpb25zIHJlY29nbml6ZWQgYnkgdGhlIGltYWdlIGxvYWRlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZUxvYWRlckNvbmZpZyB7XG4gIC8vIE5hbWUgb2YgdGhlIGltYWdlIHRvIGJlIGFkZGVkIHRvIHRoZSBpbWFnZSByZXF1ZXN0IFVSTFxuICBzcmM6IHN0cmluZztcbiAgLy8gV2lkdGggb2YgdGhlIHJlcXVlc3RlZCBpbWFnZSAodG8gYmUgdXNlZCB3aGVuIGdlbmVyYXRpbmcgc3Jjc2V0KVxuICB3aWR0aD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGltYWdlIGxvYWRlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgSW1hZ2VMb2FkZXIgPSAoY29uZmlnOiBJbWFnZUxvYWRlckNvbmZpZykgPT4gc3RyaW5nO1xuXG4vKipcbiAqIE5vb3AgaW1hZ2UgbG9hZGVyIHRoYXQgZG9lcyBubyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgb3JpZ2luYWwgc3JjIGFuZCBqdXN0IHJldHVybnMgaXQgYXMgaXMuXG4gKiBUaGlzIGxvYWRlciBpcyB1c2VkIGFzIGEgZGVmYXVsdCBvbmUgaWYgbW9yZSBzcGVjaWZpYyBsb2dpYyBpcyBub3QgcHJvdmlkZWQgaW4gYW4gYXBwIGNvbmZpZy5cbiAqL1xuY29uc3Qgbm9vcEltYWdlTG9hZGVyID0gKGNvbmZpZzogSW1hZ2VMb2FkZXJDb25maWcpID0+IGNvbmZpZy5zcmM7XG5cbi8qKlxuICogU3BlY2lhbCB0b2tlbiB0aGF0IGFsbG93cyB0byBjb25maWd1cmUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBwcm9kdWNlIGFuIGltYWdlIFVSTCBiYXNlZFxuICogb24gdGhlIHNwZWNpZmllZCBpbnB1dC5cbiAqL1xuZXhwb3J0IGNvbnN0IElNQUdFX0xPQURFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJbWFnZUxvYWRlcj4oJ0ltYWdlTG9hZGVyJywge1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIGZhY3Rvcnk6ICgpID0+IG5vb3BJbWFnZUxvYWRlcixcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW1hZ2VMb2FkZXIodXJsRm46IChwYXRoOiBzdHJpbmcpID0+IEltYWdlTG9hZGVyLCBleGFtcGxlVXJscz86IHN0cmluZ1tdKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcm92aWRlSW1hZ2VMb2FkZXIoXG4gICAgICBwYXRoOiBzdHJpbmcsIG9wdGlvbnM6IHtlbnN1cmVQcmVjb25uZWN0PzogYm9vbGVhbn0gPSB7ZW5zdXJlUHJlY29ubmVjdDogdHJ1ZX0pIHtcbiAgICBpZiAobmdEZXZNb2RlICYmICFpc1ZhbGlkUGF0aChwYXRoKSkge1xuICAgICAgdGhyb3dJbnZhbGlkUGF0aEVycm9yKHBhdGgsIGV4YW1wbGVVcmxzIHx8IFtdKTtcbiAgICB9XG4gICAgcGF0aCA9IG5vcm1hbGl6ZVBhdGgocGF0aCk7XG5cbiAgICBjb25zdCBsb2FkZXJGbiA9IChjb25maWc6IEltYWdlTG9hZGVyQ29uZmlnKSA9PiB7XG4gICAgICBpZiAobmdEZXZNb2RlICYmIGlzQWJzb2x1dGVVUkwoY29uZmlnLnNyYykpIHtcbiAgICAgICAgdGhyb3dVbmV4cGVjdGVkQWJzb2x1dGVVcmxFcnJvcihwYXRoLCBjb25maWcuc3JjKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvYWRlciA9IHVybEZuKHBhdGgpO1xuICAgICAgcmV0dXJuIGxvYWRlcihjb25maWcpO1xuICAgIH07XG4gICAgY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW3twcm92aWRlOiBJTUFHRV9MT0FERVIsIHVzZVZhbHVlOiBsb2FkZXJGbn1dO1xuXG4gICAgaWYgKG5nRGV2TW9kZSAmJiBvcHRpb25zLmVuc3VyZVByZWNvbm5lY3QgPT09IGZhbHNlKSB7XG4gICAgICBwcm92aWRlcnMucHVzaCh7cHJvdmlkZTogUFJFQ09OTkVDVF9DSEVDS19CTE9DS0xJU1QsIHVzZVZhbHVlOiBbcGF0aF0sIG11bHRpOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3ZpZGVycztcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGhyb3dJbnZhbGlkUGF0aEVycm9yKHBhdGg6IHVua25vd24sIGV4YW1wbGVVcmxzOiBzdHJpbmdbXSk6IG5ldmVyIHtcbiAgY29uc3QgZXhhbXBsZVVybHNNc2cgPSBleGFtcGxlVXJscy5qb2luKCcgb3IgJyk7XG4gIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICBSdW50aW1lRXJyb3JDb2RlLklOVkFMSURfTE9BREVSX0FSR1VNRU5UUyxcbiAgICAgIGBJbWFnZSBsb2FkZXIgaGFzIGRldGVjdGVkIGFuIGludmFsaWQgcGF0aC4gYCArXG4gICAgICAgICAgYEV4cGVjdGluZyBhIHBhdGggbWF0Y2hpbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybWF0czogJHtleGFtcGxlVXJsc01zZ31gICtcbiAgICAgICAgICBgIC0gYnV0IGdvdDogXFxgJHtwYXRofVxcYGApO1xufVxuXG5mdW5jdGlvbiB0aHJvd1VuZXhwZWN0ZWRBYnNvbHV0ZVVybEVycm9yKHBhdGg6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBuZXZlciB7XG4gIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICBSdW50aW1lRXJyb3JDb2RlLklOVkFMSURfTE9BREVSX0FSR1VNRU5UUyxcbiAgICAgIGBJbWFnZSBsb2FkZXIgaGFzIGRldGVjdGVkIGFuIGFic29sdXRlIFVSTCB1c2VkIGZvciBvbmUgb2YgdGhlIFxcYHJhd1NyY1xcYCBgICtcbiAgICAgICAgICBgYXR0cmlidXRlcyBvbiBhbiBcXGA8aW1nPlxcYCB0YWc6ICR7dXJsfS4gVGhlIGFic29sdXRlIFVSTHMgYXJlIG5vdCBgICtcbiAgICAgICAgICBgc3VwcG9ydGVkIGJ5IHRoaXMgaW1hZ2UgbG9hZGVyLiBQbGVhc2UgdXBkYXRlIHRoZSBcXGByYXdTcmNcXGAgYXR0cmlidXRlIGAgK1xuICAgICAgICAgIGBvZiB0aGF0IFxcYDxpbWc+XFxgIHRhZyB0byB1c2UgYSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBiYXNlIFVSTCBjb25maWd1cmVkIGAgK1xuICAgICAgICAgIGBmb3IgdGhpcyBsb2FkZXIgKFxcYCR7cGF0aH1cXGApLmApO1xufVxuIl19