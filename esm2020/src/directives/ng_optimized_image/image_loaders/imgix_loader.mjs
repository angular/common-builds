/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ÉµRuntimeError as RuntimeError } from '@angular/core';
import { PRECONNECT_CHECK_BLOCKLIST } from '../preconnect_link_checker';
import { IMAGE_LOADER } from './image_loader';
/**
 * Function that generates a built-in ImageLoader for Imgix and turns it
 * into an Angular provider.
 *
 * @param path path to the desired Imgix origin,
 * e.g. https://somepath.imgix.net or https://images.mysite.com
 * @returns Provider that provides an ImageLoader function
 */
export function provideImgixLoader(path, options = {
    ensurePreconnect: true
}) {
    ngDevMode && assertValidPath(path);
    path = normalizePath(path);
    const providers = [{
            provide: IMAGE_LOADER,
            useValue: (config) => {
                const url = new URL(`${path}/${normalizeSrc(config.src)}`);
                // This setting ensures the smallest allowable format is set.
                url.searchParams.set('auto', 'format');
                config.width && url.searchParams.set('w', config.width.toString());
                return url.href;
            }
        }];
    if (ngDevMode && Boolean(options.ensurePreconnect) === true) {
        providers.push({ provide: PRECONNECT_CHECK_BLOCKLIST, useValue: [path], multi: true });
    }
    return providers;
}
function assertValidPath(path) {
    const isString = typeof path === 'string';
    if (!isString || path.trim() === '') {
        throwInvalidPathError(path);
    }
    try {
        const url = new URL(path);
    }
    catch {
        throwInvalidPathError(path);
    }
}
function throwInvalidPathError(path) {
    throw new RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `ImgixLoader has detected an invalid path: ` +
        `expecting a path like https://somepath.imgix.net/` +
        `but got: \`${path}\``);
}
function normalizePath(path) {
    return path[path.length - 1] === '/' ? path.slice(0, -1) : path;
}
function normalizeSrc(src) {
    return src[0] === '/' ? src.slice(1) : src;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1naXhfbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9kaXJlY3RpdmVzL25nX29wdGltaXplZF9pbWFnZS9pbWFnZV9sb2FkZXJzL2ltZ2l4X2xvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQVcsYUFBYSxJQUFJLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd0RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUV0RSxPQUFPLEVBQUMsWUFBWSxFQUFvQixNQUFNLGdCQUFnQixDQUFDO0FBRS9EOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsSUFBWSxFQUFFLFVBQXdDO0lBQ3ZGLGdCQUFnQixFQUFFLElBQUk7Q0FDdkI7SUFDQyxTQUFTLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0IsTUFBTSxTQUFTLEdBQWUsQ0FBQztZQUM3QixPQUFPLEVBQUUsWUFBWTtZQUNyQixRQUFRLEVBQUUsQ0FBQyxNQUF5QixFQUFFLEVBQUU7Z0JBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMzRCw2REFBNkQ7Z0JBQzdELEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDdkMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDbEIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUVILElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDM0QsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztLQUN0RjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUFhO0lBQ3BDLE1BQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQztJQUUxQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDbkMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDN0I7SUFFRCxJQUFJO1FBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDM0I7SUFBQyxNQUFNO1FBQ04scUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDN0I7QUFDSCxDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxJQUFhO0lBQzFDLE1BQU0sSUFBSSxZQUFZLDRDQUVsQiw0Q0FBNEM7UUFDeEMsbURBQW1EO1FBQ25ELGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsSUFBWTtJQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2xFLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxHQUFXO0lBQy9CLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtQcm92aWRlciwgybVSdW50aW1lRXJyb3IgYXMgUnVudGltZUVycm9yfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSdW50aW1lRXJyb3JDb2RlfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtQUkVDT05ORUNUX0NIRUNLX0JMT0NLTElTVH0gZnJvbSAnLi4vcHJlY29ubmVjdF9saW5rX2NoZWNrZXInO1xuXG5pbXBvcnQge0lNQUdFX0xPQURFUiwgSW1hZ2VMb2FkZXJDb25maWd9IGZyb20gJy4vaW1hZ2VfbG9hZGVyJztcblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyBhIGJ1aWx0LWluIEltYWdlTG9hZGVyIGZvciBJbWdpeCBhbmQgdHVybnMgaXRcbiAqIGludG8gYW4gQW5ndWxhciBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0gcGF0aCBwYXRoIHRvIHRoZSBkZXNpcmVkIEltZ2l4IG9yaWdpbixcbiAqIGUuZy4gaHR0cHM6Ly9zb21lcGF0aC5pbWdpeC5uZXQgb3IgaHR0cHM6Ly9pbWFnZXMubXlzaXRlLmNvbVxuICogQHJldHVybnMgUHJvdmlkZXIgdGhhdCBwcm92aWRlcyBhbiBJbWFnZUxvYWRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUltZ2l4TG9hZGVyKHBhdGg6IHN0cmluZywgb3B0aW9uczoge2Vuc3VyZVByZWNvbm5lY3Q/OiBib29sZWFufSA9IHtcbiAgZW5zdXJlUHJlY29ubmVjdDogdHJ1ZVxufSkge1xuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VmFsaWRQYXRoKHBhdGgpO1xuICBwYXRoID0gbm9ybWFsaXplUGF0aChwYXRoKTtcblxuICBjb25zdCBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbe1xuICAgIHByb3ZpZGU6IElNQUdFX0xPQURFUixcbiAgICB1c2VWYWx1ZTogKGNvbmZpZzogSW1hZ2VMb2FkZXJDb25maWcpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7cGF0aH0vJHtub3JtYWxpemVTcmMoY29uZmlnLnNyYyl9YCk7XG4gICAgICAvLyBUaGlzIHNldHRpbmcgZW5zdXJlcyB0aGUgc21hbGxlc3QgYWxsb3dhYmxlIGZvcm1hdCBpcyBzZXQuXG4gICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnYXV0bycsICdmb3JtYXQnKTtcbiAgICAgIGNvbmZpZy53aWR0aCAmJiB1cmwuc2VhcmNoUGFyYW1zLnNldCgndycsIGNvbmZpZy53aWR0aC50b1N0cmluZygpKTtcbiAgICAgIHJldHVybiB1cmwuaHJlZjtcbiAgICB9XG4gIH1dO1xuXG4gIGlmIChuZ0Rldk1vZGUgJiYgQm9vbGVhbihvcHRpb25zLmVuc3VyZVByZWNvbm5lY3QpID09PSB0cnVlKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goe3Byb3ZpZGU6IFBSRUNPTk5FQ1RfQ0hFQ0tfQkxPQ0tMSVNULCB1c2VWYWx1ZTogW3BhdGhdLCBtdWx0aTogdHJ1ZX0pO1xuICB9XG5cbiAgcmV0dXJuIHByb3ZpZGVycztcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VmFsaWRQYXRoKHBhdGg6IHVua25vd24pIHtcbiAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZyc7XG5cbiAgaWYgKCFpc1N0cmluZyB8fCBwYXRoLnRyaW0oKSA9PT0gJycpIHtcbiAgICB0aHJvd0ludmFsaWRQYXRoRXJyb3IocGF0aCk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocGF0aCk7XG4gIH0gY2F0Y2gge1xuICAgIHRocm93SW52YWxpZFBhdGhFcnJvcihwYXRoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aHJvd0ludmFsaWRQYXRoRXJyb3IocGF0aDogdW5rbm93bik6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihcbiAgICAgIFJ1bnRpbWVFcnJvckNvZGUuSU5WQUxJRF9JTlBVVCxcbiAgICAgIGBJbWdpeExvYWRlciBoYXMgZGV0ZWN0ZWQgYW4gaW52YWxpZCBwYXRoOiBgICtcbiAgICAgICAgICBgZXhwZWN0aW5nIGEgcGF0aCBsaWtlIGh0dHBzOi8vc29tZXBhdGguaW1naXgubmV0L2AgK1xuICAgICAgICAgIGBidXQgZ290OiBcXGAke3BhdGh9XFxgYCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aDogc3RyaW5nKSB7XG4gIHJldHVybiBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU3JjKHNyYzogc3RyaW5nKSB7XG4gIHJldHVybiBzcmNbMF0gPT09ICcvJyA/IHNyYy5zbGljZSgxKSA6IHNyYztcbn1cbiJdfQ==