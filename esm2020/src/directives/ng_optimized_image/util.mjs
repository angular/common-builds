/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Converts a string that represents a URL into a URL class instance.
export function getUrl(src, win) {
    // Don't use a base URL is the URL is absolute.
    return isAbsoluteURL(src) ? new URL(src) : new URL(src, win.location.href);
}
// Checks whether a URL is absolute (i.e. starts with `http://` or `https://`).
export function isAbsoluteURL(src) {
    return /^https?:\/\//.test(src);
}
// Assembles directive details string, useful for error messages.
export function imgDirectiveDetails(rawSrc) {
    return `The NgOptimizedImage directive (activated on an <img> element ` +
        `with the \`rawSrc="${rawSrc}"\`)`;
}
// Invokes a callback for each element in the array. Also invokes a callback
// recursively for each nested array.
export function deepForEach(input, fn) {
    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}
// Given a URL, extract the hostname part.
// If a URL is a relative one - the URL is returned as is.
export function extractHostname(url) {
    if (isAbsoluteURL(url)) {
        const instance = new URL(url);
        return instance.hostname;
    }
    return url;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbW1vbi9zcmMvZGlyZWN0aXZlcy9uZ19vcHRpbWl6ZWRfaW1hZ2UvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxxRUFBcUU7QUFDckUsTUFBTSxVQUFVLE1BQU0sQ0FBQyxHQUFXLEVBQUUsR0FBVztJQUM3QywrQ0FBK0M7SUFDL0MsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsK0VBQStFO0FBQy9FLE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBVztJQUN2QyxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUVELGlFQUFpRTtBQUNqRSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsTUFBYztJQUNoRCxPQUFPLGdFQUFnRTtRQUNuRSxzQkFBc0IsTUFBTSxNQUFNLENBQUM7QUFDekMsQ0FBQztBQUVELDRFQUE0RTtBQUM1RSxxQ0FBcUM7QUFDckMsTUFBTSxVQUFVLFdBQVcsQ0FBSSxLQUFrQixFQUFFLEVBQXNCO0lBQ3ZFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQsMENBQTBDO0FBQzFDLDBEQUEwRDtBQUMxRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDekMsSUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDO0tBQzFCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIENvbnZlcnRzIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhIFVSTCBpbnRvIGEgVVJMIGNsYXNzIGluc3RhbmNlLlxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybChzcmM6IHN0cmluZywgd2luOiBXaW5kb3cpOiBVUkwge1xuICAvLyBEb24ndCB1c2UgYSBiYXNlIFVSTCBpcyB0aGUgVVJMIGlzIGFic29sdXRlLlxuICByZXR1cm4gaXNBYnNvbHV0ZVVSTChzcmMpID8gbmV3IFVSTChzcmMpIDogbmV3IFVSTChzcmMsIHdpbi5sb2NhdGlvbi5ocmVmKTtcbn1cblxuLy8gQ2hlY2tzIHdoZXRoZXIgYSBVUkwgaXMgYWJzb2x1dGUgKGkuZS4gc3RhcnRzIHdpdGggYGh0dHA6Ly9gIG9yIGBodHRwczovL2ApLlxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwoc3JjOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcLy8udGVzdChzcmMpO1xufVxuXG4vLyBBc3NlbWJsZXMgZGlyZWN0aXZlIGRldGFpbHMgc3RyaW5nLCB1c2VmdWwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuZXhwb3J0IGZ1bmN0aW9uIGltZ0RpcmVjdGl2ZURldGFpbHMocmF3U3JjOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBUaGUgTmdPcHRpbWl6ZWRJbWFnZSBkaXJlY3RpdmUgKGFjdGl2YXRlZCBvbiBhbiA8aW1nPiBlbGVtZW50IGAgK1xuICAgICAgYHdpdGggdGhlIFxcYHJhd1NyYz1cIiR7cmF3U3JjfVwiXFxgKWA7XG59XG5cbi8vIEludm9rZXMgYSBjYWxsYmFjayBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheS4gQWxzbyBpbnZva2VzIGEgY2FsbGJhY2tcbi8vIHJlY3Vyc2l2ZWx5IGZvciBlYWNoIG5lc3RlZCBhcnJheS5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRm9yRWFjaDxUPihpbnB1dDogKFR8YW55W10pW10sIGZuOiAodmFsdWU6IFQpID0+IHZvaWQpOiB2b2lkIHtcbiAgaW5wdXQuZm9yRWFjaCh2YWx1ZSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IGRlZXBGb3JFYWNoKHZhbHVlLCBmbikgOiBmbih2YWx1ZSkpO1xufVxuXG4vLyBHaXZlbiBhIFVSTCwgZXh0cmFjdCB0aGUgaG9zdG5hbWUgcGFydC5cbi8vIElmIGEgVVJMIGlzIGEgcmVsYXRpdmUgb25lIC0gdGhlIFVSTCBpcyByZXR1cm5lZCBhcyBpcy5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0SG9zdG5hbWUodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoaXNBYnNvbHV0ZVVSTCh1cmwpKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhvc3RuYW1lO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG4iXX0=