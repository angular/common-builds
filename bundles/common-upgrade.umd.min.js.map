{"version":3,"sources":["packages/common/common-upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","common","upgrade","core","static","this","i0","_static","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","PATH_MATCH","DOUBLE_SLASH_REGEX","IGNORE_URI_REGEXP","DEFAULT_PORTS","http:","https:","ftp:","$locationShim","$injector","location","platformLocation","urlCodec","locationStrategy","_this","initalizing","updateBrowser","$$absUrl","$$url","$$host","$$replace","$$path","$$search","$$hash","cachedState","lastBrowserUrl","lastCachedState","initialUrl","browserUrl","parsedUrl","parse","$$protocol","protocol","hostname","$$port","parseInt","port","$$parseLinkUrl","cacheState","$$state","browserState","isPromise","obj","then","$i","initialize","$rootScope","get","$rootElement","on","event","ctrlKey","metaKey","shiftKey","which","button","elm","target","nodeName","toLowerCase","parentNode","isAnchor","el","undefined","href","absHref","relHref","getAttribute","test","isDefaultPrevented","preventDefault","absUrl","$apply","onUrlChange","newUrl","newState","oldUrl","oldState","$$parse","defaultPrevented","$broadcast","state","setBrowserUrlWithFallback","resetBrowserUpdate","$$phase","$digest","$watch","oldUrl_1","oldState_1","currentReplace_1","urlOrStateChanged_1","areEqual","$evalAsync","url","replace","sameState","lastHistoryState","stripBaseUrl","getServerBase","replaceState","pushState","getState","deepEqual","a","b","Array","isArray","JSON","stringify","e","base","startsWith","substr","_a","getBaseHref","endsWith","parseAppUrl","Error","prefixed","charAt","match","path","pathname","substring","decodePath","decodeSearch","search","decodeHash","hash","pathUrl","composeUrls","slice","rewrittenUrl","appUrl","normalize","exec","host","toString","paramValue","key","currentSearch","$locationShimProvider","ngUpgrade","$get","hashPrefix","prefix","html5Mode","mode","UrlCodec","AngularJSUrlCodec","encodePath","segments","split","encodeUriSegment","_stripIndexHtml","join","encodeSearch","parseKeyValue","toKeyValue","parts","_loop_1","value","forEach","arrayValue","push","encodeUriQuery","encodeHash","decodeURIComponent","pathOrHref","baseUrl","parsed","serverUrl","encPath","encSearch","encHash","joinedPath","URL","tryDecodeURIComponent","keyValue","splitPoint","val","indexOf","pctEncodeSpaces","encodeURIComponent","LOCATION_UPGRADE_CONFIGURATION","InjectionToken","APP_BASE_HREF_RESOLVED","LocationUpgradeModule","config","ngModule","providers","Location","provide","useFactory","provide$location","deps","UpgradeModule","PlatformLocation","LocationStrategy","useValue","provideUrlCodec","provideAppBaseHref","Inject","APP_BASE_HREF","Optional","provideLocationStrategy","ngModuleDef","ɵɵdefineNgModule","type","ngInjectorDef","ɵɵdefineInjector","LocationUpgradeModule_Factory","imports","CommonModule","appBaseHref","baseHref","options","useHash","HashLocationStrategy","PathLocationStrategy","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.0.0-rc.0+58.sha-f015dbe.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/upgrade/static')) :\n    typeof define === 'function' && define.amd ? define('@angular/common/upgrade', ['exports', '@angular/common', '@angular/core', '@angular/upgrade/static'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.upgrade = {}), global.ng.common, global.ng.core, global.ng.upgrade.static));\n}(this, function (exports, common, i0, _static) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function deepEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        else if (!a || !b) {\n            return false;\n        }\n        else {\n            try {\n                if ((a.prototype !== b.prototype) || (Array.isArray(a) && Array.isArray(b))) {\n                    return false;\n                }\n                return JSON.stringify(a) === JSON.stringify(b);\n            }\n            catch (e) {\n                return false;\n            }\n        }\n    }\n    function isAnchor(el) {\n        return el.href !== undefined;\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var PATH_MATCH = /^([^?#]*)(\\?([^#]*))?(#(.*))?$/;\n    var DOUBLE_SLASH_REGEX = /^\\s*[\\\\/]{2,}/;\n    var IGNORE_URI_REGEXP = /^\\s*(javascript|mailto):/i;\n    var DEFAULT_PORTS = {\n        'http:': 80,\n        'https:': 443,\n        'ftp:': 21\n    };\n    /**\n     * Docs TBD.\n     *\n     * @publicApi\n     */\n    var $locationShim = /** @class */ (function () {\n        function $locationShim($injector, location, platformLocation, urlCodec, locationStrategy) {\n            var _this = this;\n            this.location = location;\n            this.platformLocation = platformLocation;\n            this.urlCodec = urlCodec;\n            this.locationStrategy = locationStrategy;\n            this.initalizing = true;\n            this.updateBrowser = false;\n            this.$$absUrl = '';\n            this.$$url = '';\n            this.$$host = '';\n            this.$$replace = false;\n            this.$$path = '';\n            this.$$search = '';\n            this.$$hash = '';\n            this.cachedState = null;\n            this.lastBrowserUrl = '';\n            // This variable should be used *only* inside the cacheState function.\n            this.lastCachedState = null;\n            var initialUrl = this.browserUrl();\n            var parsedUrl = this.urlCodec.parse(initialUrl);\n            if (typeof parsedUrl === 'string') {\n                throw 'Invalid URL';\n            }\n            this.$$protocol = parsedUrl.protocol;\n            this.$$host = parsedUrl.hostname;\n            this.$$port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;\n            this.$$parseLinkUrl(initialUrl, initialUrl);\n            this.cacheState();\n            this.$$state = this.browserState();\n            if (isPromise($injector)) {\n                $injector.then(function ($i) { return _this.initialize($i); });\n            }\n            else {\n                this.initialize($injector);\n            }\n        }\n        $locationShim.prototype.initialize = function ($injector) {\n            var _this = this;\n            var $rootScope = $injector.get('$rootScope');\n            var $rootElement = $injector.get('$rootElement');\n            $rootElement.on('click', function (event) {\n                if (event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 ||\n                    event.button === 2) {\n                    return;\n                }\n                var elm = event.target;\n                // traverse the DOM up to find first A tag\n                while (elm && elm.nodeName.toLowerCase() !== 'a') {\n                    // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n                    if (elm === $rootElement[0] || !(elm = elm.parentNode)) {\n                        return;\n                    }\n                }\n                if (!isAnchor(elm)) {\n                    return;\n                }\n                var absHref = elm.href;\n                var relHref = elm.getAttribute('href');\n                // Ignore when url is started with javascript: or mailto:\n                if (IGNORE_URI_REGEXP.test(absHref)) {\n                    return;\n                }\n                if (absHref && !elm.getAttribute('target') && !event.isDefaultPrevented()) {\n                    if (_this.$$parseLinkUrl(absHref, relHref)) {\n                        // We do a preventDefault for all urls that are part of the AngularJS application,\n                        // in html5mode and also without, so that we are able to abort navigation without\n                        // getting double entries in the location history.\n                        event.preventDefault();\n                        // update location manually\n                        if (_this.absUrl() !== _this.browserUrl()) {\n                            $rootScope.$apply();\n                        }\n                    }\n                }\n            });\n            this.location.onUrlChange(function (newUrl, newState) {\n                var oldUrl = _this.absUrl();\n                var oldState = _this.$$state;\n                _this.$$parse(newUrl);\n                newUrl = _this.absUrl();\n                _this.$$state = newState;\n                var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, newState, oldState)\n                    .defaultPrevented;\n                // if the location was changed by a `$locationChangeStart` handler then stop\n                // processing this location change\n                if (_this.absUrl() !== newUrl)\n                    return;\n                // If default was prevented, set back to old state. This is the state that was locally\n                // cached in the $location service.\n                if (defaultPrevented) {\n                    _this.$$parse(oldUrl);\n                    _this.state(oldState);\n                    _this.setBrowserUrlWithFallback(oldUrl, false, oldState);\n                }\n                else {\n                    _this.initalizing = false;\n                    $rootScope.$broadcast('$locationChangeSuccess', newUrl, oldUrl, newState, oldState);\n                    _this.resetBrowserUpdate();\n                }\n                if (!$rootScope.$$phase) {\n                    $rootScope.$digest();\n                }\n            });\n            // update browser\n            $rootScope.$watch(function () {\n                if (_this.initalizing || _this.updateBrowser) {\n                    _this.updateBrowser = false;\n                    var oldUrl_1 = _this.browserUrl();\n                    var newUrl = _this.absUrl();\n                    var oldState_1 = _this.browserState();\n                    var currentReplace_1 = _this.$$replace;\n                    var urlOrStateChanged_1 = !_this.urlCodec.areEqual(oldUrl_1, newUrl) || oldState_1 !== _this.$$state;\n                    // Fire location changes one time to on initialization. This must be done on the\n                    // next tick (thus inside $evalAsync()) in order for listeners to be registered\n                    // before the event fires. Mimicing behavior from $locationWatch:\n                    // https://github.com/angular/angular.js/blob/master/src/ng/location.js#L983\n                    if (_this.initalizing || urlOrStateChanged_1) {\n                        _this.initalizing = false;\n                        $rootScope.$evalAsync(function () {\n                            // Get the new URL again since it could have changed due to async update\n                            var newUrl = _this.absUrl();\n                            var defaultPrevented = $rootScope\n                                .$broadcast('$locationChangeStart', newUrl, oldUrl_1, _this.$$state, oldState_1)\n                                .defaultPrevented;\n                            // if the location was changed by a `$locationChangeStart` handler then stop\n                            // processing this location change\n                            if (_this.absUrl() !== newUrl)\n                                return;\n                            if (defaultPrevented) {\n                                _this.$$parse(oldUrl_1);\n                                _this.$$state = oldState_1;\n                            }\n                            else {\n                                // This block doesn't run when initalizing because it's going to perform the update to\n                                // the URL which shouldn't be needed when initalizing.\n                                if (urlOrStateChanged_1) {\n                                    _this.setBrowserUrlWithFallback(newUrl, currentReplace_1, oldState_1 === _this.$$state ? null : _this.$$state);\n                                    _this.$$replace = false;\n                                }\n                                $rootScope.$broadcast('$locationChangeSuccess', newUrl, oldUrl_1, _this.$$state, oldState_1);\n                            }\n                        });\n                    }\n                }\n                _this.$$replace = false;\n            });\n        };\n        $locationShim.prototype.resetBrowserUpdate = function () {\n            this.$$replace = false;\n            this.$$state = this.browserState();\n            this.updateBrowser = false;\n            this.lastBrowserUrl = this.browserUrl();\n        };\n        $locationShim.prototype.browserUrl = function (url, replace, state) {\n            // In modern browsers `history.state` is `null` by default; treating it separately\n            // from `undefined` would cause `$browser.url('/foo')` to change `history.state`\n            // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.\n            if (typeof state === 'undefined') {\n                state = null;\n            }\n            // setter\n            if (url) {\n                var sameState = this.lastHistoryState === state;\n                // Normalize the inputted URL\n                url = this.urlCodec.parse(url).href;\n                // Don't change anything if previous and current URLs and states match.\n                if (this.lastBrowserUrl === url && sameState) {\n                    return this;\n                }\n                this.lastBrowserUrl = url;\n                this.lastHistoryState = state;\n                // Remove server base from URL as the Angular APIs for updating URL require\n                // it to be the path+.\n                url = this.stripBaseUrl(this.getServerBase(), url) || url;\n                // Set the URL\n                if (replace) {\n                    this.locationStrategy.replaceState(state, '', url, '');\n                }\n                else {\n                    this.locationStrategy.pushState(state, '', url, '');\n                }\n                this.cacheState();\n                return this;\n                // getter\n            }\n            else {\n                return this.platformLocation.href;\n            }\n        };\n        $locationShim.prototype.cacheState = function () {\n            // This should be the only place in $browser where `history.state` is read.\n            this.cachedState = this.platformLocation.getState();\n            if (typeof this.cachedState === 'undefined') {\n                this.cachedState = null;\n            }\n            // Prevent callbacks fo fire twice if both hashchange & popstate were fired.\n            if (deepEqual(this.cachedState, this.lastCachedState)) {\n                this.cachedState = this.lastCachedState;\n            }\n            this.lastCachedState = this.cachedState;\n            this.lastHistoryState = this.cachedState;\n        };\n        /**\n         * This function emulates the $browser.state() function from AngularJS. It will cause\n         * history.state to be cached unless changed with deep equality check.\n         */\n        $locationShim.prototype.browserState = function () { return this.cachedState; };\n        $locationShim.prototype.stripBaseUrl = function (base, url) {\n            if (url.startsWith(base)) {\n                return url.substr(base.length);\n            }\n            return undefined;\n        };\n        $locationShim.prototype.getServerBase = function () {\n            var _a = this.platformLocation, protocol = _a.protocol, hostname = _a.hostname, port = _a.port;\n            var baseHref = this.locationStrategy.getBaseHref();\n            var url = protocol + \"//\" + hostname + (port ? ':' + port : '') + (baseHref || '/');\n            return url.endsWith('/') ? url : url + '/';\n        };\n        $locationShim.prototype.parseAppUrl = function (url) {\n            if (DOUBLE_SLASH_REGEX.test(url)) {\n                throw new Error(\"Bad Path - URL cannot start with double slashes: \" + url);\n            }\n            var prefixed = (url.charAt(0) !== '/');\n            if (prefixed) {\n                url = '/' + url;\n            }\n            var match = this.urlCodec.parse(url, this.getServerBase());\n            if (typeof match === 'string') {\n                throw new Error(\"Bad URL - Cannot parse URL: \" + url);\n            }\n            var path = prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname;\n            this.$$path = this.urlCodec.decodePath(path);\n            this.$$search = this.urlCodec.decodeSearch(match.search);\n            this.$$hash = this.urlCodec.decodeHash(match.hash);\n            // make sure path starts with '/';\n            if (this.$$path && this.$$path.charAt(0) !== '/') {\n                this.$$path = '/' + this.$$path;\n            }\n        };\n        $locationShim.prototype.$$parse = function (url) {\n            var pathUrl;\n            if (url.startsWith('/')) {\n                pathUrl = url;\n            }\n            else {\n                // Remove protocol & hostname if URL starts with it\n                pathUrl = this.stripBaseUrl(this.getServerBase(), url);\n            }\n            if (typeof pathUrl === 'undefined') {\n                throw new Error(\"Invalid url \\\"\" + url + \"\\\", missing path prefix \\\"\" + this.getServerBase() + \"\\\".\");\n            }\n            this.parseAppUrl(pathUrl);\n            if (!this.$$path) {\n                this.$$path = '/';\n            }\n            this.composeUrls();\n        };\n        $locationShim.prototype.$$parseLinkUrl = function (url, relHref) {\n            // When relHref is passed, it should be a hash and is handled separately\n            if (relHref && relHref[0] === '#') {\n                this.hash(relHref.slice(1));\n                return true;\n            }\n            var rewrittenUrl;\n            var appUrl = this.stripBaseUrl(this.getServerBase(), url);\n            if (typeof appUrl !== 'undefined') {\n                rewrittenUrl = this.getServerBase() + appUrl;\n            }\n            else if (this.getServerBase() === url + '/') {\n                rewrittenUrl = this.getServerBase();\n            }\n            // Set the URL\n            if (rewrittenUrl) {\n                this.$$parse(rewrittenUrl);\n            }\n            return !!rewrittenUrl;\n        };\n        $locationShim.prototype.setBrowserUrlWithFallback = function (url, replace, state) {\n            var oldUrl = this.url();\n            var oldState = this.$$state;\n            try {\n                this.browserUrl(url, replace, state);\n                // Make sure $location.state() returns referentially identical (not just deeply equal)\n                // state object; this makes possible quick checking if the state changed in the digest\n                // loop. Checking deep equality would be too expensive.\n                this.$$state = this.browserState();\n            }\n            catch (e) {\n                // Restore old values if pushState fails\n                this.url(oldUrl);\n                this.$$state = oldState;\n                throw e;\n            }\n        };\n        $locationShim.prototype.composeUrls = function () {\n            this.$$url = this.urlCodec.normalize(this.$$path, this.$$search, this.$$hash);\n            this.$$absUrl = this.getServerBase() + this.$$url.substr(1); // remove '/' from front of URL\n            this.updateBrowser = true;\n        };\n        /**\n         * This method is getter only.\n         *\n         * Return full URL representation with all segments encoded according to rules specified in\n         * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n         *\n         *\n         * ```js\n         * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n         * let absUrl = $location.absUrl();\n         * // => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n         * ```\n         */\n        $locationShim.prototype.absUrl = function () { return this.$$absUrl; };\n        $locationShim.prototype.url = function (url) {\n            if (typeof url === 'string') {\n                if (!url.length) {\n                    url = '/';\n                }\n                var match = PATH_MATCH.exec(url);\n                if (!match)\n                    return this;\n                if (match[1] || url === '')\n                    this.path(this.urlCodec.decodePath(match[1]));\n                if (match[2] || match[1] || url === '')\n                    this.search(match[3] || '');\n                this.hash(match[5] || '');\n                // Chainable method\n                return this;\n            }\n            return this.$$url;\n        };\n        /**\n         * This method is getter only.\n         *\n         * Return protocol of current URL.\n         *\n         *\n         * ```js\n         * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n         * let protocol = $location.protocol();\n         * // => \"http\"\n         * ```\n         */\n        $locationShim.prototype.protocol = function () { return this.$$protocol; };\n        /**\n         * This method is getter only.\n         *\n         * Return host of current URL.\n         *\n         * Note: compared to the non-AngularJS version `location.host` which returns `hostname:port`, this\n         * returns the `hostname` portion only.\n         *\n         *\n         * ```js\n         * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n         * let host = $location.host();\n         * // => \"example.com\"\n         *\n         * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\n         * host = $location.host();\n         * // => \"example.com\"\n         * host = location.host;\n         * // => \"example.com:8080\"\n         * ```\n         */\n        $locationShim.prototype.host = function () { return this.$$host; };\n        /**\n         * This method is getter only.\n         *\n         * Return port of current URL.\n         *\n         *\n         * ```js\n         * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n         * let port = $location.port();\n         * // => 80\n         * ```\n         */\n        $locationShim.prototype.port = function () { return this.$$port; };\n        $locationShim.prototype.path = function (path) {\n            if (typeof path === 'undefined') {\n                return this.$$path;\n            }\n            // null path converts to empty string. Prepend with \"/\" if needed.\n            path = path !== null ? path.toString() : '';\n            path = path.charAt(0) === '/' ? path : '/' + path;\n            this.$$path = path;\n            this.composeUrls();\n            return this;\n        };\n        $locationShim.prototype.search = function (search, paramValue) {\n            switch (arguments.length) {\n                case 0:\n                    return this.$$search;\n                case 1:\n                    if (typeof search === 'string' || typeof search === 'number') {\n                        this.$$search = this.urlCodec.decodeSearch(search.toString());\n                    }\n                    else if (typeof search === 'object' && search !== null) {\n                        // Copy the object so it's never mutated\n                        search = __assign({}, search);\n                        // remove object undefined or null properties\n                        for (var key in search) {\n                            if (search[key] == null)\n                                delete search[key];\n                        }\n                        this.$$search = search;\n                    }\n                    else {\n                        throw new Error('LocationProvider.search(): First argument must be a string or an object.');\n                    }\n                    break;\n                default:\n                    if (typeof search === 'string') {\n                        var currentSearch = this.search();\n                        if (typeof paramValue === 'undefined' || paramValue === null) {\n                            delete currentSearch[search];\n                            return this.search(currentSearch);\n                        }\n                        else {\n                            currentSearch[search] = paramValue;\n                            return this.search(currentSearch);\n                        }\n                    }\n            }\n            this.composeUrls();\n            return this;\n        };\n        $locationShim.prototype.hash = function (hash) {\n            if (typeof hash === 'undefined') {\n                return this.$$hash;\n            }\n            this.$$hash = hash !== null ? hash.toString() : '';\n            this.composeUrls();\n            return this;\n        };\n        /**\n         * If called, all changes to $location during the current `$digest` will replace the current\n         * history record, instead of adding a new one.\n         */\n        $locationShim.prototype.replace = function () {\n            this.$$replace = true;\n            return this;\n        };\n        $locationShim.prototype.state = function (state) {\n            if (typeof state === 'undefined') {\n                return this.$$state;\n            }\n            this.$$state = state;\n            return this;\n        };\n        return $locationShim;\n    }());\n    /**\n     * Docs TBD.\n     *\n     * @publicApi\n     */\n    var $locationShimProvider = /** @class */ (function () {\n        function $locationShimProvider(ngUpgrade, location, platformLocation, urlCodec, locationStrategy) {\n            this.ngUpgrade = ngUpgrade;\n            this.location = location;\n            this.platformLocation = platformLocation;\n            this.urlCodec = urlCodec;\n            this.locationStrategy = locationStrategy;\n        }\n        $locationShimProvider.prototype.$get = function () {\n            return new $locationShim(this.ngUpgrade.$injector, this.location, this.platformLocation, this.urlCodec, this.locationStrategy);\n        };\n        /**\n         * Stub method used to keep API compatible with AngularJS. This setting is configured through\n         * the LocationUpgradeModule's `config` method in your Angular app.\n         */\n        $locationShimProvider.prototype.hashPrefix = function (prefix) {\n            throw new Error('Configure LocationUpgrade through LocationUpgradeModule.config method.');\n        };\n        /**\n         * Stub method used to keep API compatible with AngularJS. This setting is configured through\n         * the LocationUpgradeModule's `config` method in your Angular app.\n         */\n        $locationShimProvider.prototype.html5Mode = function (mode) {\n            throw new Error('Configure LocationUpgrade through LocationUpgradeModule.config method.');\n        };\n        return $locationShimProvider;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A codec for encoding and decoding URL parts.\n     *\n     * @publicApi\n     **/\n    var UrlCodec = /** @class */ (function () {\n        function UrlCodec() {\n        }\n        return UrlCodec;\n    }());\n    /**\n     * A `AngularJSUrlCodec` that uses logic from AngularJS to serialize and parse URLs\n     * and URL parameters\n     *\n     * @publicApi\n     */\n    var AngularJSUrlCodec = /** @class */ (function () {\n        function AngularJSUrlCodec() {\n        }\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L15\n        AngularJSUrlCodec.prototype.encodePath = function (path) {\n            var segments = path.split('/');\n            var i = segments.length;\n            while (i--) {\n                // decode forward slashes to prevent them from being double encoded\n                segments[i] = encodeUriSegment(segments[i].replace(/%2F/g, '/'));\n            }\n            path = segments.join('/');\n            return _stripIndexHtml((path && path[0] !== '/' && '/' || '') + path);\n        };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L42\n        AngularJSUrlCodec.prototype.encodeSearch = function (search) {\n            if (typeof search === 'string') {\n                search = parseKeyValue(search);\n            }\n            search = toKeyValue(search);\n            return search ? '?' + search : '';\n        };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L44\n        AngularJSUrlCodec.prototype.encodeHash = function (hash) {\n            hash = encodeUriSegment(hash);\n            return hash ? '#' + hash : '';\n        };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L27\n        AngularJSUrlCodec.prototype.decodePath = function (path, html5Mode) {\n            if (html5Mode === void 0) { html5Mode = true; }\n            var segments = path.split('/');\n            var i = segments.length;\n            while (i--) {\n                segments[i] = decodeURIComponent(segments[i]);\n                if (html5Mode) {\n                    // encode forward slashes to prevent them from being mistaken for path separators\n                    segments[i] = segments[i].replace(/\\//g, '%2F');\n                }\n            }\n            return segments.join('/');\n        };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L72\n        AngularJSUrlCodec.prototype.decodeSearch = function (search) { return parseKeyValue(search); };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/location.js#L73\n        AngularJSUrlCodec.prototype.decodeHash = function (hash) {\n            hash = decodeURIComponent(hash);\n            return hash[0] === '#' ? hash.substring(1) : hash;\n        };\n        AngularJSUrlCodec.prototype.normalize = function (pathOrHref, search, hash, baseUrl) {\n            if (arguments.length === 1) {\n                var parsed = this.parse(pathOrHref, baseUrl);\n                if (typeof parsed === 'string') {\n                    return parsed;\n                }\n                var serverUrl = parsed.protocol + \"://\" + parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n                return this.normalize(this.decodePath(parsed.pathname), this.decodeSearch(parsed.search), this.decodeHash(parsed.hash), serverUrl);\n            }\n            else {\n                var encPath = this.encodePath(pathOrHref);\n                var encSearch = search && this.encodeSearch(search) || '';\n                var encHash = hash && this.encodeHash(hash) || '';\n                var joinedPath = (baseUrl || '') + encPath;\n                if (!joinedPath.length || joinedPath[0] !== '/') {\n                    joinedPath = '/' + joinedPath;\n                }\n                return joinedPath + encSearch + encHash;\n            }\n        };\n        AngularJSUrlCodec.prototype.areEqual = function (a, b) { return this.normalize(a) === this.normalize(b); };\n        // https://github.com/angular/angular.js/blob/864c7f0/src/ng/urlUtils.js#L60\n        AngularJSUrlCodec.prototype.parse = function (url, base) {\n            try {\n                var parsed = new URL(url, base);\n                return {\n                    href: parsed.href,\n                    protocol: parsed.protocol ? parsed.protocol.replace(/:$/, '') : '',\n                    host: parsed.host,\n                    search: parsed.search ? parsed.search.replace(/^\\?/, '') : '',\n                    hash: parsed.hash ? parsed.hash.replace(/^#/, '') : '',\n                    hostname: parsed.hostname,\n                    port: parsed.port,\n                    pathname: (parsed.pathname.charAt(0) === '/') ? parsed.pathname : '/' + parsed.pathname\n                };\n            }\n            catch (e) {\n                throw new Error(\"Invalid URL (\" + url + \") with base (\" + base + \")\");\n            }\n        };\n        return AngularJSUrlCodec;\n    }());\n    function _stripIndexHtml(url) {\n        return url.replace(/\\/index.html$/, '');\n    }\n    /**\n     * Tries to decode the URI component without throwing an exception.\n     *\n     * @private\n     * @param str value potential URI component to check.\n     * @returns {boolean} True if `value` can be decoded\n     * with the decodeURIComponent function.\n     */\n    function tryDecodeURIComponent(value) {\n        try {\n            return decodeURIComponent(value);\n        }\n        catch (e) {\n            // Ignore any invalid uri component.\n            return undefined;\n        }\n    }\n    /**\n     * Parses an escaped url query string into key-value pairs. Logic taken from\n     * https://github.com/angular/angular.js/blob/864c7f0/src/Angular.js#L1382\n     * @returns {Object.<string,boolean|Array>}\n     */\n    function parseKeyValue(keyValue) {\n        var obj = {};\n        (keyValue || '').split('&').forEach(function (keyValue) {\n            var splitPoint, key, val;\n            if (keyValue) {\n                key = keyValue = keyValue.replace(/\\+/g, '%20');\n                splitPoint = keyValue.indexOf('=');\n                if (splitPoint !== -1) {\n                    key = keyValue.substring(0, splitPoint);\n                    val = keyValue.substring(splitPoint + 1);\n                }\n                key = tryDecodeURIComponent(key);\n                if (typeof key !== 'undefined') {\n                    val = typeof val !== 'undefined' ? tryDecodeURIComponent(val) : true;\n                    if (!obj.hasOwnProperty(key)) {\n                        obj[key] = val;\n                    }\n                    else if (Array.isArray(obj[key])) {\n                        obj[key].push(val);\n                    }\n                    else {\n                        obj[key] = [obj[key], val];\n                    }\n                }\n            }\n        });\n        return obj;\n    }\n    /**\n     * Serializes into key-value pairs. Logic taken from\n     * https://github.com/angular/angular.js/blob/864c7f0/src/Angular.js#L1409\n     */\n    function toKeyValue(obj) {\n        var parts = [];\n        var _loop_1 = function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (arrayValue) {\n                    parts.push(encodeUriQuery(key, true) +\n                        (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));\n                });\n            }\n            else {\n                parts.push(encodeUriQuery(key, true) +\n                    (value === true ? '' : '=' + encodeUriQuery(value, true)));\n            }\n        };\n        for (var key in obj) {\n            _loop_1(key);\n        }\n        return parts.length ? parts.join('&') : '';\n    }\n    /**\n     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n     * segments:\n     *    segment       = *pchar\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     *\n     * Logic from https://github.com/angular/angular.js/blob/864c7f0/src/Angular.js#L1437\n     */\n    function encodeUriSegment(val) {\n        return encodeUriQuery(val, true)\n            .replace(/%26/gi, '&')\n            .replace(/%3D/gi, '=')\n            .replace(/%2B/gi, '+');\n    }\n    /**\n     * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n     * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n     * encoded per http://tools.ietf.org/html/rfc3986:\n     *    query         = *( pchar / \"/\" / \"?\" )\n     *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     *    pct-encoded   = \"%\" HEXDIG HEXDIG\n     *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n     *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     *\n     * Logic from https://github.com/angular/angular.js/blob/864c7f0/src/Angular.js#L1456\n     */\n    function encodeUriQuery(val, pctEncodeSpaces) {\n        if (pctEncodeSpaces === void 0) { pctEncodeSpaces = false; }\n        return encodeURIComponent(val)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/g, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Is used in DI to configure the location upgrade package.\n     *\n     * @publicApi\n     */\n    var LOCATION_UPGRADE_CONFIGURATION = new i0.InjectionToken('LOCATION_UPGRADE_CONFIGURATION');\n    var APP_BASE_HREF_RESOLVED = new i0.InjectionToken('APP_BASE_HREF_RESOLVED');\n    /**\n     * Module used for configuring Angular's LocationUpgradeService.\n     *\n     * @publicApi\n     */\n    var LocationUpgradeModule = /** @class */ (function () {\n        function LocationUpgradeModule() {\n        }\n        LocationUpgradeModule.config = function (config) {\n            return {\n                ngModule: LocationUpgradeModule,\n                providers: [\n                    common.Location,\n                    {\n                        provide: $locationShim,\n                        useFactory: provide$location,\n                        deps: [_static.UpgradeModule, common.Location, common.PlatformLocation, UrlCodec, common.LocationStrategy]\n                    },\n                    { provide: LOCATION_UPGRADE_CONFIGURATION, useValue: config ? config : {} },\n                    { provide: UrlCodec, useFactory: provideUrlCodec, deps: [LOCATION_UPGRADE_CONFIGURATION] },\n                    {\n                        provide: APP_BASE_HREF_RESOLVED,\n                        useFactory: provideAppBaseHref,\n                        deps: [LOCATION_UPGRADE_CONFIGURATION, [new i0.Inject(common.APP_BASE_HREF), new i0.Optional()]]\n                    },\n                    {\n                        provide: common.LocationStrategy,\n                        useFactory: provideLocationStrategy,\n                        deps: [\n                            common.PlatformLocation,\n                            APP_BASE_HREF_RESOLVED,\n                            LOCATION_UPGRADE_CONFIGURATION,\n                        ]\n                    },\n                ],\n            };\n        };\n        LocationUpgradeModule.ngModuleDef = i0.ɵɵdefineNgModule({ type: LocationUpgradeModule });\n        LocationUpgradeModule.ngInjectorDef = i0.ɵɵdefineInjector({ factory: function LocationUpgradeModule_Factory(t) { return new (t || LocationUpgradeModule)(); }, imports: [[common.CommonModule]] });\n        return LocationUpgradeModule;\n    }());\n    /*@__PURE__*/ i0.ɵɵsetNgModuleScope(LocationUpgradeModule, { imports: [common.CommonModule] });\n    /*@__PURE__*/ i0.ɵsetClassMetadata(LocationUpgradeModule, [{\n            type: i0.NgModule,\n            args: [{ imports: [common.CommonModule] }]\n        }], null, null);\n    function provideAppBaseHref(config, appBaseHref) {\n        if (config && config.appBaseHref != null) {\n            return config.appBaseHref;\n        }\n        else if (appBaseHref != null) {\n            return appBaseHref;\n        }\n        return '';\n    }\n    function provideUrlCodec(config) {\n        var codec = config && config.urlCodec || AngularJSUrlCodec;\n        return new codec();\n    }\n    function provideLocationStrategy(platformLocation, baseHref, options) {\n        if (options === void 0) { options = {}; }\n        return options.useHash ? new common.HashLocationStrategy(platformLocation, baseHref) :\n            new common.PathLocationStrategy(platformLocation, baseHref);\n    }\n    function provide$location(ngUpgrade, location, platformLocation, urlCodec, locationStrategy) {\n        var $locationProvider = new $locationShimProvider(ngUpgrade, location, platformLocation, urlCodec, locationStrategy);\n        return $locationProvider.$get();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.$locationShim = $locationShim;\n    exports.$locationShimProvider = $locationShimProvider;\n    exports.LOCATION_UPGRADE_CONFIGURATION = LOCATION_UPGRADE_CONFIGURATION;\n    exports.LocationUpgradeModule = LocationUpgradeModule;\n    exports.AngularJSUrlCodec = AngularJSUrlCodec;\n    exports.UrlCodec = UrlCodec;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=common-upgrade.umd.js.map\n"]}