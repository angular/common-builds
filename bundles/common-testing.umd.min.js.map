{"version":3,"file":"common-testing.umd.min.js","sources":["../../../../packages/common/testing/src/location_mock.ts","../../../../packages/common/testing/src/mock_location_strategy.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @experimental\n */\n\nexport class SpyLocation implements Location {\n  urlChanges: string[] = [];\n  private _history: LocationState[] = [new LocationState('', '')];\n  private _historyIndex: number = 0;\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string = '';\n  /** @internal */\n  _platformStrategy: LocationStrategy = null;\n\n  setInitialPath(url: string) { this._history[this._historyIndex].path = url; }\n\n  setBaseHref(url: string) { this._baseHref = url; }\n\n  path(): string { return this._history[this._historyIndex].path; }\n\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath =\n        this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n\n    return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n  }\n\n  simulateUrlPop(pathname: string) { this._subject.emit({'url': pathname, 'pop': true}); }\n\n  simulateHashChange(pathname: string) {\n    // Because we don't prevent the native event, the browser will independently update the path\n    this.setInitialPath(pathname);\n    this.urlChanges.push('hash: ' + pathname);\n    this._subject.emit({'url': pathname, 'pop': true, 'type': 'hashchange'});\n  }\n\n  prepareExternalUrl(url: string): string {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._baseHref + url;\n  }\n\n  go(path: string, query: string = '') {\n    path = this.prepareExternalUrl(path);\n\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query));\n    this._historyIndex = this._history.length - 1;\n\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push(url);\n    this._subject.emit({'url': url, 'pop': false});\n  }\n\n  replaceState(path: string, query: string = '') {\n    path = this.prepareExternalUrl(path);\n\n    const history = this._history[this._historyIndex];\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push('replace: ' + url);\n  }\n\n  forward() {\n    if (this._historyIndex < (this._history.length - 1)) {\n      this._historyIndex++;\n      this._subject.emit({'url': this.path(), 'pop': true});\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.emit({'url': this.path(), 'pop': true});\n    }\n  }\n\n  subscribe(\n      onNext: (value: any) => void, onThrow: (error: any) => void = null,\n      onReturn: () => void = null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  normalize(url: string): string { return null; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nclass LocationState {\n  path: string;\n  query: string;\n  constructor(path: string, query: string) {\n    this.path = path;\n    this.query = query;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @stable\n */\n\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  constructor() { super(); }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n\n  path(includeHash: boolean = false): string { return this.internalPath; }\n\n  prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn: (value: any) => void): void { this._subject.subscribe({next: fn}); }\n\n  getBaseHref(): string { return this.internalBaseHref; }\n\n  back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward(): void { throw 'not implemented'; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["__extends","this","d","b","SpyLocation","urlChanges","_history","LocationState","_historyIndex","_subject","_angular_core","EventEmitter","_baseHref","_platformStrategy","prototype","setInitialPath","url","path","isCurrentPathEqualTo","query","givenPath","endsWith","substring","length","currPath","simulateUrlPop","pathname","emit","pop","simulateHashChange","push","type","prepareExternalUrl","startsWith","go","splice","locationState","replaceState","history","forward","onThrow","onReturn","subscribe","next","onNext","error","complete","normalize","decorators","MockLocationStrategy","_super","_this","call","internalBaseHref","internalTitle","simulatePopState","internalPath","_MockPopStateEvent","includeHash","internal","pushState","ctx","title","externalUrl","getBaseHref","back","nextUrl","_angular_common","LocationStrategy","Injectable","newUrl"],"mappings":"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"}