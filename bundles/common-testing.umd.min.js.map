{"version":3,"file":"common-testing.umd.min.js","sources":["../../../../packages/common/testing/src/location_mock.ts","../../../../packages/common/testing/src/mock_location_strategy.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @experimental\n */\n\nexport class SpyLocation implements Location {\n  urlChanges: string[] = [];\n  private _history: LocationState[] = [new LocationState('', '')];\n  private _historyIndex: number = 0;\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string = '';\n  /** @internal */\n  _platformStrategy: LocationStrategy = null;\n\n  setInitialPath(url: string) { this._history[this._historyIndex].path = url; }\n\n  setBaseHref(url: string) { this._baseHref = url; }\n\n  path(): string { return this._history[this._historyIndex].path; }\n\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath =\n        this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n\n    return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n  }\n\n  simulateUrlPop(pathname: string) { this._subject.emit({'url': pathname, 'pop': true}); }\n\n  simulateHashChange(pathname: string) {\n    // Because we don't prevent the native event, the browser will independently update the path\n    this.setInitialPath(pathname);\n    this.urlChanges.push('hash: ' + pathname);\n    this._subject.emit({'url': pathname, 'pop': true, 'type': 'hashchange'});\n  }\n\n  prepareExternalUrl(url: string): string {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._baseHref + url;\n  }\n\n  go(path: string, query: string = '') {\n    path = this.prepareExternalUrl(path);\n\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query));\n    this._historyIndex = this._history.length - 1;\n\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push(url);\n    this._subject.emit({'url': url, 'pop': false});\n  }\n\n  replaceState(path: string, query: string = '') {\n    path = this.prepareExternalUrl(path);\n\n    const history = this._history[this._historyIndex];\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push('replace: ' + url);\n  }\n\n  forward() {\n    if (this._historyIndex < (this._history.length - 1)) {\n      this._historyIndex++;\n      this._subject.emit({'url': this.path(), 'pop': true});\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.emit({'url': this.path(), 'pop': true});\n    }\n  }\n\n  subscribe(\n      onNext: (value: any) => void, onThrow: (error: any) => void = null,\n      onReturn: () => void = null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  normalize(url: string): string { return null; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nclass LocationState {\n  path: string;\n  query: string;\n  constructor(path: string, query: string) {\n    this.path = path;\n    this.query = query;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @stable\n */\n\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  constructor() { super(); }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n\n  path(includeHash: boolean = false): string { return this.internalPath; }\n\n  prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn: (value: any) => void): void { this._subject.subscribe({next: fn}); }\n\n  getBaseHref(): string { return this.internalBaseHref; }\n\n  back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward(): void { throw 'not implemented'; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["SpyLocation","this","_history","LocationState","_subject","_angular_core","EventEmitter","_baseHref","_platformStrategy","prototype","setInitialPath","url","_historyIndex","path","isCurrentPathEqualTo","query","givenPath","endsWith","substring","length","currPath","simulateUrlPop","pathname","emit","pop","simulateHashChange","urlChanges","push","type","prepareExternalUrl","startsWith","go","splice","locationState","replaceState","history","forward","onThrow","onReturn","subscribe","next","onNext","error","complete","normalize","decorators","MockLocationStrategy","_super","_this","internalBaseHref","internalTitle","__extends","simulatePopState","internalPath","_MockPopStateEvent","includeHash","internal","pushState","ctx","title","externalUrl","getBaseHref","back","nextUrl","_angular_common","LocationStrategy","Injectable","newUrl"],"mappings":"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"}