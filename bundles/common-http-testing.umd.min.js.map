{"version":3,"sources":["/home/travis/build/angular/angular/dist/packages-dist/common/bundles/common-http-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","common","http","testing","core","Rx","this","_angular_common_http","_angular_core","rxjs_Observable","RequestMatch","_toArrayBufferBody","body","ArrayBuffer","Error","_toBlob","Blob","_toJsonBody","format","Array","isArray","_toTextBody","JSON","stringify","_maybeConvertBody","responseType","HttpTestingController","TestRequest","request","observer","_cancelled","Object","defineProperty","prototype","get","enumerable","configurable","flush","opts","cancelled","url","urlWithParams","headers","HttpHeaders","statusText","status","undefined","next","HttpResponse","complete","error","HttpErrorResponse","event","HttpClientTestingBackend","open","handle","req","_this","Observable","testReq","push","type","HttpEventType","Sent","_match","match","filter","method","toUpperCase","results","forEach","result","index","indexOf","splice","expectOne","description","descriptionFromMatcher","matches","length","expectNone","verify","ignoreCancelled","requests","map","split","join","matcher","name","decorators","Injectable","ctorParameters","HttpClientTestingModule","NgModule","args","imports","HttpClientModule","providers","provide","HttpBackend","useExisting","Éµa","value"],"mappings":";;;;;CAKC,SAAUA,OAAQC,SACC,gBAAZC,UAA0C,mBAAXC,QAAyBF,QAAQC,QAASE,QAAQ,wBAAyBA,QAAQ,iBAAkBA,QAAQ,oBACjI,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,UAAW,uBAAwB,gBAAiB,mBAAoBJ,SAC5HA,SAASD,OAAOO,GAAKP,OAAOO,OAAUP,OAAOO,GAAGC,OAASR,OAAOO,GAAGC,WAAcR,OAAOO,GAAGC,OAAOC,KAAOT,OAAOO,GAAGC,OAAOC,SAAYT,OAAOO,GAAGC,OAAOC,KAAKC,YAAcV,OAAOO,GAAGC,OAAOC,KAAKT,OAAOO,GAAGI,KAAKX,OAAOY,KACtNC,KAAM,SAAWX,QAAQY,qBAAqBC,cAAcC,iBAAmB;;;;;AAiBjF,QAASC,iBAwIT,QAASC,oBAAmBC,MACxB,GAA2B,mBAAhBC,aACP,KAAM,IAAIC,OAAM,4DAEpB,IAAIF,eAAgBC,aAChB,MAAOD,KAEX,MAAM,IAAIE,OAAM,2EAOpB,QAASC,SAAQH,MACb,GAAoB,mBAATI,MACP,KAAM,IAAIF,OAAM,qDAEpB,IAAIF,eAAgBI,MAChB,MAAOJ,KAEX,IAAIC,aAAeD,eAAgBC,aAC/B,MAAO,IAAIG,OAAMJ,MAErB,MAAM,IAAIE,OAAM,oEAQpB,QAASG,aAAYL,KAAMM,QAEvB,GADe,SAAXA,SAAqBA,OAAS,QACP,mBAAhBL,cAA+BD,eAAgBC,aACtD,KAAM,IAAIC,OAAM,2BAA6BI,OAAS,sCAE1D,IAAoB,mBAATF,OAAwBJ,eAAgBI,MAC/C,KAAM,IAAIF,OAAM,2BAA6BI,OAAS,+BAE1D,IAAoB,gBAATN,OAAqC,gBAATA,OAAqC,gBAATA,OAC/DO,MAAMC,QAAQR,MACd,MAAOA,KAEX,MAAM,IAAIE,OAAM,2BAA6BI,OAAS,wCAO1D,QAASG,aAAYT,MACjB,GAAoB,gBAATA,MACP,MAAOA,KAEX,IAA2B,mBAAhBC,cAA+BD,eAAgBC,aACtD,KAAM,IAAIC,OAAM,kEAEpB,IAAoB,mBAATE,OAAwBJ,eAAgBI,MAC/C,KAAM,IAAIF,OAAM,2DAEpB,OAAOQ,MAAKC,UAAUN,YAAYL,KAAM,SAQ5C,QAASY,mBAAkBC,aAAcb,MACrC,OAAQa,cACJ,IAAK,cACD,MAAa,QAATb,KACO,KAEJD,mBAAmBC,KAC9B,KAAK,OACD,MAAa,QAATA,KACO,KAEJG,QAAQH,KACnB,KAAK,OACD,MAAa,QAATA,KACO,OAEJK,YAAYL,KACvB,KAAK,OACD,MAAa,QAATA,KACO,KAEJS,YAAYT,KACvB,SACI,KAAM,IAAIE,OAAM,6BAA+BW,eA5N3D,GAAIC,uBAAyB,WACzB,QAASA,0BAET,MAAOA,0BAsBPC,YAAe,WAKf,QAASA,aAAYC,QAASC,UAC1BvB,KAAKsB,QAAUA,QACftB,KAAKuB,SAAWA,SAIhBvB,KAAKwB,YAAa,EAqFtB,MAnFAC,QAAOC,eAAeL,YAAYM,UAAW,aAKzCC,IAAK,WAAc,MAAO5B,MAAKwB,YAC/BK,YAAY,EACZC,cAAc,IAWlBT,YAAYM,UAAUI,MAAQ,SAAUzB,KAAM0B,MAE1C,GADa,SAATA,OAAmBA,SACnBhC,KAAKiC,UACL,KAAM,IAAIzB,OAAM,oCAEpB,IAAqB0B,KAAMlC,KAAKsB,QAAQa,cACnBC,QAAWJ,KAAKI,kBAAmBnC,sBAAqBoC,YAAeL,KAAKI,QAAU,GAAInC,sBAAqBoC,YAAYL,KAAKI,QACrJ9B,MAAOY,kBAAkBlB,KAAKsB,QAAQH,aAAcb,KACpD,IAAqBgC,YAAaN,KAAKM,WAClBC,OAAyBC,SAAhBR,KAAKO,OAAuBP,KAAKO,OAAS,GAUxE,IAToBC,SAAhBR,KAAKO,SACQ,OAATjC,MACAiC,OAAS,IACTD,WAAaA,YAAc,cAG3BA,WAAaA,YAAc,MAGhBE,SAAfF,WACA,KAAM,IAAI9B,OAAM,uDAEhB+B,SAAU,KAAOA,OAAS,KAC1BvC,KAAKuB,SAASkB,KAAK,GAAIxC,sBAAqByC,cAAepC,KAAMA,KAAM8B,QAASA,QAASG,OAAQA,OAAQD,WAAYA,WAAYJ,IAAKA,OACtIlC,KAAKuB,SAASoB,YAGd3C,KAAKuB,SAASqB,MAAM,GAAI3C,sBAAqB4C,mBAAoBD,MAAOtC,KAAM8B,QAASA,QAASG,OAAQA,OAAQD,WAAYA,WAAYJ,IAAKA,QASrJb,YAAYM,UAAUiB,MAAQ,SAAUA,MAAOZ,MAE3C,GADa,SAATA,OAAmBA,SACnBhC,KAAKiC,UACL,KAAM,IAAIzB,OAAM,kDAEpB,IAAIwB,KAAKO,QAAUP,KAAKO,QAAU,KAAOP,KAAKO,OAAS,IACnD,KAAM,IAAI/B,OAAM,2CAEpB,IAAqB4B,SAAWJ,KAAKI,kBAAmBnC,sBAAqBoC,YAAeL,KAAKI,QAAU,GAAInC,sBAAqBoC,YAAYL,KAAKI,QACrJpC,MAAKuB,SAASqB,MAAM,GAAI3C,sBAAqB4C,mBACzCD,MAAOA,MACPR,QAASA,QACTG,OAAQP,KAAKO,QAAU,EACvBD,WAAYN,KAAKM,YAAc,GAC/BJ,IAAKlC,KAAKsB,QAAQa,kBAS1Bd,YAAYM,UAAUmB,MAAQ,SAAUA,OACpC,GAAI9C,KAAKiC,UACL,KAAM,IAAIzB,OAAM,6CAEpBR,MAAKuB,SAASkB,KAAKK,QAEhBzB,eA6HP0B,yBAA4B,WAC5B,QAASA,4BAIL/C,KAAKgD,QA8HT,MAvHAD,0BAAyBpB,UAAUsB,OAAS,SAAUC,KAClD,GAAIC,OAAQnD,IACZ,OAAO,IAAIG,iBAAgBiD,WAAW,SAAU7B,UAC5C,GAAqB8B,SAAU,GAAIhC,aAAY6B,IAAK3B,SAGpD,OAFA4B,OAAMH,KAAKM,KAAKD,SAChB9B,SAASkB,MAAyBc,KAAMtD,qBAAqBuD,cAAcC,OACpE,WAAcJ,QAAQ7B,YAAa,MAQlDuB,yBAAyBpB,UAAU+B,OAAS,SAAUC,OAClD,MAAqB,gBAAVA,OACA3D,KAAKgD,KAAKY,OAAO,SAAUP,SAAW,MAAOA,SAAQ/B,QAAQa,gBAAkBwB,QAEhE,kBAAVA,OACL3D,KAAKgD,KAAKY,OAAO,SAAUP,SAAW,MAAOM,OAAMN,QAAQ/B,WAG3DtB,KAAKgD,KAAKY,OAAO,SAAUP,SAAW,QAASM,MAAME,QAAUR,QAAQ/B,QAAQuC,SAAWF,MAAME,OAAOC,eACxGH,MAAMzB,KAAOmB,QAAQ/B,QAAQa,gBAAkBwB,MAAMzB,QASnEa,yBAAyBpB,UAAUgC,MAAQ,SAAUA,OACjD,GAAIR,OAAQnD,KACS+D,QAAU/D,KAAK0D,OAAOC,MAO3C,OANAI,SAAQC,QAAQ,SAAUC,QACtB,GAAqBC,OAAQf,MAAMH,KAAKmB,QAAQF,OAC5CC,UAAU,GACVf,MAAMH,KAAKoB,OAAOF,MAAO,KAG1BH,SAYXhB,yBAAyBpB,UAAU0C,UAAY,SAAUV,MAAOW,aAC5DA,YAAcA,aAAetE,KAAKuE,uBAAuBZ,MACzD,IAAqBa,SAAUxE,KAAK2D,MAAMA,MAC1C,IAAIa,QAAQC,OAAS,EACjB,KAAM,IAAIjE,OAAM,+CAAkD8D,YAAc,YAAeE,QAAQC,OAAS,aAEpH,IAAuB,IAAnBD,QAAQC,OACR,KAAM,IAAIjE,OAAM,+CAAkD8D,YAAc,iBAEpF,OAAOE,SAAQ,IASnBzB,yBAAyBpB,UAAU+C,WAAa,SAAUf,MAAOW,aAC7DA,YAAcA,aAAetE,KAAKuE,uBAAuBZ,MACzD,IAAqBa,SAAUxE,KAAK2D,MAAMA,MAC1C,IAAIa,QAAQC,OAAS,EACjB,KAAM,IAAIjE,OAAM,iDAAoD8D,YAAc,YAAeE,QAAQC,OAAS,MAQ1H1B,yBAAyBpB,UAAUgD,OAAS,SAAU3C,MACrC,SAATA,OAAmBA,QACvB,IAAqBgB,MAAOhD,KAAKgD,IAMjC,IAHIhB,KAAK4C,kBACL5B,KAAOA,KAAKY,OAAO,SAAUP,SAAW,OAAQA,QAAQpB,aAExDe,KAAKyB,OAAS,EAAG,CAEjB,GAAqBI,UAAW7B,KAAK8B,IAAI,SAAUzB,SAC/C,GAAqBnB,KAAMmB,QAAQ/B,QAAQa,cAAc4C,MAAM,KAAK,GAC/ClB,OAASR,QAAQ/B,QAAQuC,MAC9C,OAAOA,QAAS,IAAM3B,MAErB8C,KAAK,KACV,MAAM,IAAIxE,OAAM,oCAAsCwC,KAAKyB,OAAS,KAAOI,YAOnF9B,yBAAyBpB,UAAU4C,uBAAyB,SAAUU,SAClE,GAAuB,gBAAZA,SACP,MAAO,cAAgBA,OAEtB,IAAuB,gBAAZA,SAAsB,CAClC,GAAqBpB,QAASoB,QAAQpB,QAAU,QAC3B3B,IAAM+C,QAAQ/C,KAAO,OAC1C,OAAO,iBAAmB2B,OAAS,UAAY3B,IAG/C,MAAO,sBAAwB+C,QAAQC,MAGxCnC,2BAEXA,0BAAyBoC,aACnB5B,KAAMrD,cAAckF,aAG1BrC,yBAAyBsC,eAAiB,WAAc;;;;;;;AAoBxD,GAAIC,yBAA2B,WAC3B,QAASA,4BAET,MAAOA,2BAEXA,yBAAwBH,aAClB5B,KAAMrD,cAAcqF,SAAUC,OACpBC,SACIxF,qBAAqByF,kBAEzBC,WACI5C,0BACE6C,QAAS3F,qBAAqB4F,YAAaC,YAAa/C,2BACxD6C,QAASxE,sBAAuB0E,YAAa/C,+BAKnEuC,wBAAwBD,eAAiB,WAAc,UAEvDhG,QAAQ+B,sBAAwBA,sBAChC/B,QAAQe,aAAeA,aACvBf,QAAQiG,wBAA0BA,wBAClCjG,QAAQgC,YAAcA,YACtBhC,QAAQ0G,GAAKhD,yBAEbtB,OAAOC,eAAerC,QAAS,cAAgB2G,OAAO","file":"/home/travis/build/angular/angular/dist/packages-dist/common/bundles/common-http-testing.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.6-a69172f\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs/Observable')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/common/http', '@angular/core', 'rxjs/Observable'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = global.ng.common.http || {}, global.ng.common.http.testing = {}),global.ng.common.http,global.ng.core,global.Rx));\n}(this, (function (exports,_angular_common_http,_angular_core,rxjs_Observable) { 'use strict';\n\n/**\n * @license Angular v5.0.0-beta.6-a69172f\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * \\@stable\n * @record\n */\nfunction RequestMatch() { }\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * \\@stable\n * @abstract\n */\nvar HttpTestingController = (function () {\n    function HttpTestingController() {\n    }\n    return HttpTestingController;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * \\@stable\n */\nvar TestRequest = (function () {\n    /**\n     * @param {?} request\n     * @param {?} observer\n     */\n    function TestRequest(request, observer) {\n        this.request = request;\n        this.observer = observer;\n        /**\n         * \\@internal set by `HttpClientTestingBackend`\n         */\n        this._cancelled = false;\n    }\n    Object.defineProperty(TestRequest.prototype, \"cancelled\", {\n        /**\n         * Whether the request was cancelled after it was sent.\n         * @return {?}\n         */\n        get: function () { return this._cancelled; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     * @param {?} body\n     * @param {?=} opts\n     * @return {?}\n     */\n    TestRequest.prototype.flush = function (body, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (this.cancelled) {\n            throw new Error(\"Cannot flush a cancelled request.\");\n        }\n        var /** @type {?} */ url = this.request.urlWithParams;\n        var /** @type {?} */ headers = (opts.headers instanceof _angular_common_http.HttpHeaders) ? opts.headers : new _angular_common_http.HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        var /** @type {?} */ statusText = opts.statusText;\n        var /** @type {?} */ status = opts.status !== undefined ? opts.status : 200;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = 204;\n                statusText = statusText || 'No Content';\n            }\n            else {\n                statusText = statusText || 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new _angular_common_http.HttpResponse({ body: body, headers: headers, status: status, statusText: statusText, url: url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new _angular_common_http.HttpErrorResponse({ error: body, headers: headers, status: status, statusText: statusText, url: url }));\n        }\n    };\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     * @param {?} error\n     * @param {?=} opts\n     * @return {?}\n     */\n    TestRequest.prototype.error = function (error, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (this.cancelled) {\n            throw new Error(\"Cannot return an error for a cancelled request.\");\n        }\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\n            throw new Error(\"error() called with a successful status.\");\n        }\n        var /** @type {?} */ headers = (opts.headers instanceof _angular_common_http.HttpHeaders) ? opts.headers : new _angular_common_http.HttpHeaders(opts.headers);\n        this.observer.error(new _angular_common_http.HttpErrorResponse({\n            error: error,\n            headers: headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    };\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     * @param {?} event\n     * @return {?}\n     */\n    TestRequest.prototype.event = function (event) {\n        if (this.cancelled) {\n            throw new Error(\"Cannot send events to a cancelled request.\");\n        }\n        this.observer.next(event);\n    };\n    return TestRequest;\n}());\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(body, format) {\n    if (format === void 0) { format = 'JSON'; }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for ArrayBuffers.\");\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for Blobs.\");\n    }\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n        Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(\"Automatic conversion to \" + format + \" is not supported for response type.\");\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(responseType, body) {\n    switch (responseType) {\n        case 'arraybuffer':\n            if (body === null) {\n                return null;\n            }\n            return _toArrayBufferBody(body);\n        case 'blob':\n            if (body === null) {\n                return null;\n            }\n            return _toBlob(body);\n        case 'json':\n            if (body === null) {\n                return 'null';\n            }\n            return _toJsonBody(body);\n        case 'text':\n            if (body === null) {\n                return null;\n            }\n            return _toTextBody(body);\n        default:\n            throw new Error(\"Unsupported responseType: \" + responseType);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n * \\@stable\n */\nvar HttpClientTestingBackend = (function () {\n    function HttpClientTestingBackend() {\n        /**\n         * List of pending requests which have not yet been expected.\n         */\n        this.open = [];\n    }\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.handle = function (req) {\n        var _this = this;\n        return new rxjs_Observable.Observable(function (observer) {\n            var /** @type {?} */ testReq = new TestRequest(req, observer);\n            _this.open.push(testReq);\n            observer.next(/** @type {?} */ ({ type: _angular_common_http.HttpEventType.Sent }));\n            return function () { testReq._cancelled = true; };\n        });\n    };\n    /**\n     * Helper function to search for requests in the list of open requests.\n     * @param {?} match\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype._match = function (match) {\n        if (typeof match === 'string') {\n            return this.open.filter(function (testReq) { return testReq.request.urlWithParams === match; });\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter(function (testReq) { return match(testReq.request); });\n        }\n        else {\n            return this.open.filter(function (testReq) { return (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url); });\n        }\n    };\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     * @param {?} match\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.match = function (match) {\n        var _this = this;\n        var /** @type {?} */ results = this._match(match);\n        results.forEach(function (result) {\n            var /** @type {?} */ index = _this.open.indexOf(result);\n            if (index !== -1) {\n                _this.open.splice(index, 1);\n            }\n        });\n        return results;\n    };\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.expectOne = function (match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        var /** @type {?} */ matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found \" + matches.length + \" requests.\");\n        }\n        if (matches.length === 0) {\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found none.\");\n        }\n        return matches[0];\n    };\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.expectNone = function (match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        var /** @type {?} */ matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(\"Expected zero matching requests for criteria \\\"\" + description + \"\\\", found \" + matches.length + \".\");\n        }\n    };\n    /**\n     * Validate that there are no outstanding requests.\n     * @param {?=} opts\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.verify = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        var /** @type {?} */ open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter(function (testReq) { return !testReq.cancelled; });\n        }\n        if (open.length > 0) {\n            // Show the methods and URLs of open requests in the error, for convenience.\n            var /** @type {?} */ requests = open.map(function (testReq) {\n                var /** @type {?} */ url = testReq.request.urlWithParams.split('?')[0];\n                var /** @type {?} */ method = testReq.request.method;\n                return method + \" \" + url;\n            })\n                .join(', ');\n            throw new Error(\"Expected no open requests, found \" + open.length + \": \" + requests);\n        }\n    };\n    /**\n     * @param {?} matcher\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.descriptionFromMatcher = function (matcher) {\n        if (typeof matcher === 'string') {\n            return \"Match URL: \" + matcher;\n        }\n        else if (typeof matcher === 'object') {\n            var /** @type {?} */ method = matcher.method || '(any)';\n            var /** @type {?} */ url = matcher.url || '(any)';\n            return \"Match method: \" + method + \", URL: \" + url;\n        }\n        else {\n            return \"Match by function: \" + matcher.name;\n        }\n    };\n    return HttpClientTestingBackend;\n}());\nHttpClientTestingBackend.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttpClientTestingBackend.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * \\@stable\n */\nvar HttpClientTestingModule = (function () {\n    function HttpClientTestingModule() {\n    }\n    return HttpClientTestingModule;\n}());\nHttpClientTestingModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                imports: [\n                    _angular_common_http.HttpClientModule,\n                ],\n                providers: [\n                    HttpClientTestingBackend,\n                    { provide: _angular_common_http.HttpBackend, useExisting: HttpClientTestingBackend },\n                    { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n                ],\n            },] },\n];\n/** @nocollapse */\nHttpClientTestingModule.ctorParameters = function () { return []; };\n\nexports.HttpTestingController = HttpTestingController;\nexports.RequestMatch = RequestMatch;\nexports.HttpClientTestingModule = HttpClientTestingModule;\nexports.TestRequest = TestRequest;\nexports.Éµa = HttpClientTestingBackend;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http-testing.umd.js.map\n"]}