{"version":3,"file":"common.umd.js","sources":["../../../../packages/common/src/dom_tokens.ts","../../../../packages/common/src/common_module.ts","../../../../packages/common/src/pipes/index.ts","../../../../packages/common/src/pipes/slice_pipe.ts","../../../../packages/common/src/pipes/number_pipe.ts","../../../../packages/common/src/pipes/json_pipe.ts","../../../../packages/common/src/pipes/i18n_select_pipe.ts","../../../../packages/common/src/pipes/i18n_plural_pipe.ts","../../../../packages/common/src/pipes/case_conversion_pipes.ts","../../../../packages/common/src/pipes/async_pipe.ts","../../../../packages/common/src/pipes/deprecated/number_pipe.ts","../../../../packages/common/src/i18n/format_number.ts","../../../../packages/common/src/pipes/deprecated/date_pipe.ts","../../../../packages/common/src/pipes/deprecated/intl.ts","../../../../packages/common/src/pipes/date_pipe.ts","../../../../packages/common/src/pipes/invalid_pipe_argument_error.ts","../../../../packages/common/src/i18n/format_date.ts","../../../../packages/common/src/directives/index.ts","../../../../packages/common/src/directives/ng_template_outlet.ts","../../../../packages/common/src/directives/ng_style.ts","../../../../packages/common/src/directives/ng_plural.ts","../../../../packages/common/src/directives/ng_switch.ts","../../../../packages/common/src/directives/ng_if.ts","../../../../packages/common/src/directives/ng_for_of.ts","../../../../packages/common/src/directives/ng_component_outlet.ts","../../../../packages/common/src/directives/ng_class.ts","../../../../packages/common/src/cookie.ts","../../../../packages/common/src/i18n/localization.ts","../../../../packages/common/src/i18n/locale_data_api.ts","../../../../packages/common/src/i18n/locale_data.ts","../../../../packages/common/src/i18n/locale_en.ts","../../../../packages/common/src/i18n/currencies.ts","../../../../packages/common/src/location/index.ts","../../../../packages/common/src/location/path_location_strategy.ts","../../../../packages/common/src/location/hash_location_strategy.ts","../../../../packages/common/src/location/location.ts","../../../../packages/common/src/location/platform_location.ts","../../../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n * \n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n * \n * \\@stable\n */\nexport const /** @type {?} */ DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './i18n/localization';\nimport {COMMON_DEPRECATED_I18N_PIPES} from './pipes/deprecated/index';\nimport {COMMON_PIPES} from './pipes/index';\n/**\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n * \n * \\@stable\n */\nexport class CommonModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction CommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommonModule.ctorParameters;\n}\n\n/**\n * A module that contains the deprecated i18n pipes.\n * \n * @deprecated from v5\n */\nexport class DeprecatedI18NPipesModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{declarations: [COMMON_DEPRECATED_I18N_PIPES], exports: [COMMON_DEPRECATED_I18N_PIPES]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction DeprecatedI18NPipesModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedI18NPipesModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedI18NPipesModule.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe\n};\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const /** @type {?} */ COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatNumber} from '../i18n/format_number';\nimport {NumberFormatStyle, findCurrencySymbol, getLocaleCurrencyName, getLocaleCurrencySymbol} from '../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo[:locale]]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, digits?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Decimal, digits);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo[:locale]]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, digits?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Percent, digits);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:display[:digitInfo[:locale]]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `display` indicates whether to show the currency symbol or the code.\n *   - `code`(default): use code (e.g. `USD`).\n *   - `symbol`: use symbol (e.g. `$`).\n *   - `symbol-narrow`: some countries have two symbols for their currency, one regular and one\n *   - boolean (deprecated from v5): `true` for symbol and false for `code`\n *   narrow (e.g. the canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`).\n *   If there is no narrow symbol for the chosen currency, the regular symbol will be used.\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} display\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(\n      value: any, currencyCode?: string,\n      display: 'code'|'symbol'|'symbol-narrow'|boolean = 'symbol', digits?: string,\n      locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let /** @type {?} */ currency = currencyCode || 'USD';\n    if (display !== 'code') {\n      currency = findCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow');\n    }\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Currency, digits, currency);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmpty(value: any): boolean {\n  return value == null || value === '' || value !== value;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Converts value into JSON string.\n * \\@howToUse `expression | json`\n * \\@description \n * \n * Converts value into string using `JSON.stringify`. Useful for debugging.\n * \n * ### Example\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n * \n * \\@stable\n */\nexport class JsonPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: any): string { return JSON.stringify(value, null, 2); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'json', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction JsonPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonPipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\n * \\@howToUse `expression | i18nSelect:mapping`\n * \\@description \n * \n *  Where `mapping` is an object that indicates the text that should be displayed\n *  for different values of the provided `expression`.\n *  If none of the keys of the mapping match the value of the `expression`, then the content\n *  of the `other` key is returned when present, otherwise an empty string is returned.\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n * \n *  \\@experimental\n */\nexport class I18nSelectPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} mapping\n * @return {?}\n */\ntransform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'i18nSelect', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction I18nSelectPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nSelectPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nSelectPipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping[:locale]`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}, locale?: string): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * @record\n */\nfunction SubscriptionStrategy() {}\n\n\nfunction SubscriptionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nSubscriptionStrategy.prototype.createSubscription;\n/** @type {?} */\nSubscriptionStrategy.prototype.dispose;\n/** @type {?} */\nSubscriptionStrategy.prototype.onDestroy;\n}\n\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\n\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\n\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NUMBER_FORMAT_REGEXP, parseIntAutoRadix} from '../../i18n/format_number';\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {NumberFormatter} from './intl';\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined;\n  let /** @type {?} */ minFraction: number|undefined;\n  let /** @type {?} */ maxFraction: number|undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedDecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedDecimalPipe.ctorParameters;\n/** @type {?} */\nDeprecatedDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedPercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedPercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedPercentPipe.ctorParameters;\n/** @type {?} */\nDeprecatedPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedCurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits,\n        currencyCode, symbolDisplay);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedCurrencyPipe.ctorParameters;\n/** @type {?} */\nDeprecatedCurrencyPipe.prototype._locale;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NumberFormatStyle, NumberSymbol, getLocaleNumberFormat, getLocaleNumberSymbol} from './locale_data_api';\n\nexport const /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst /** @type {?} */ MAX_DIGITS = 22;\nconst /** @type {?} */ DECIMAL_SEP = '.';\nconst /** @type {?} */ ZERO_CHAR = '0';\nconst /** @type {?} */ PATTERN_SEP = ';';\nconst /** @type {?} */ GROUP_SEP = ',';\nconst /** @type {?} */ DIGIT_CHAR = '#';\nconst /** @type {?} */ CURRENCY_CHAR = '¤';\nconst /** @type {?} */ PERCENT_CHAR = '%';\n\n/** @internal */\nexport type FormatNumberRes = {\n  str: string | null,\n  error?: string\n};\n/**\n * Transform a number to a locale string based on a style and a format\n * \n * \\@internal\n * @param {?} value\n * @param {?} locale\n * @param {?} style\n * @param {?=} digitsInfo\n * @param {?=} currency\n * @return {?}\n */\nexport function formatNumber(\n    value: number | string, locale: string, style: NumberFormatStyle, digitsInfo?: string | null,\n    currency: string | null = null): FormatNumberRes {\n  const /** @type {?} */ res: FormatNumberRes = {str: null};\n  const /** @type {?} */ format = getLocaleNumberFormat(locale, style);\n  let /** @type {?} */ num;\n\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(+value - parseFloat(value))) {\n    num = +value;\n  } else if (typeof value !== 'number') {\n    res.error = `${value} is not a number`;\n    return res;\n  } else {\n    num = value;\n  }\n\n  if (style === NumberFormatStyle.Percent) {\n    num = num * 100;\n  }\n\n  const /** @type {?} */ numStr = Math.abs(num) + '';\n  const /** @type {?} */ pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  let /** @type {?} */ formattedText = '';\n  let /** @type {?} */ isZero = false;\n\n  if (!isFinite(num)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    const /** @type {?} */ parsedNumber = parseNumber(numStr);\n\n    let /** @type {?} */ minInt = pattern.minInt;\n    let /** @type {?} */ minFraction = pattern.minFrac;\n    let /** @type {?} */ maxFraction = pattern.maxFrac;\n\n    if (digitsInfo) {\n      const /** @type {?} */ parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        res.error = `${digitsInfo} is not a valid digit info`;\n        return res;\n      }\n      const /** @type {?} */ minIntPart = parts[1];\n      const /** @type {?} */ minFractionPart = parts[3];\n      const /** @type {?} */ maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n\n    roundNumber(parsedNumber, minFraction, maxFraction);\n\n    let /** @type {?} */ digits = parsedNumber.digits;\n    let /** @type {?} */ integerLen = parsedNumber.integerLen;\n    const /** @type {?} */ exponent = parsedNumber.exponent;\n    let /** @type {?} */ decimals = [];\n    isZero = digits.every(d => !d);\n\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    const /** @type {?} */ groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n\n    const /** @type {?} */ groupSymbol = currency ? NumberSymbol.CurrencyGroup : NumberSymbol.Group;\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n\n    // append the decimal digits\n    if (decimals.length) {\n      const /** @type {?} */ decimalSymbol = currency ? NumberSymbol.CurrencyDecimal : NumberSymbol.Decimal;\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n\n  if (num < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n\n  if (style === NumberFormatStyle.Currency && currency !== null) {\n    res.str = formattedText\n                  .replace(CURRENCY_CHAR, currency)\n                  // if we have 2 time the currency character, the second one is ignored\n                  .replace(CURRENCY_CHAR, '');\n    return res;\n  }\n\n  if (style === NumberFormatStyle.Percent) {\n    res.str = formattedText.replace(\n        new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n    return res;\n  }\n\n  res.str = formattedText;\n  return res;\n}\n/**\n * @record\n */\nfunction ParsedNumberFormat() {}\n\n\nfunction ParsedNumberFormat_tsickle_Closure_declarations() {\n/** @type {?} */\nParsedNumberFormat.prototype.minInt;\n/** @type {?} */\nParsedNumberFormat.prototype.minFrac;\n/** @type {?} */\nParsedNumberFormat.prototype.maxFrac;\n/** @type {?} */\nParsedNumberFormat.prototype.posPre;\n/** @type {?} */\nParsedNumberFormat.prototype.posSuf;\n/** @type {?} */\nParsedNumberFormat.prototype.negPre;\n/** @type {?} */\nParsedNumberFormat.prototype.negSuf;\n/** @type {?} */\nParsedNumberFormat.prototype.gSize;\n/** @type {?} */\nParsedNumberFormat.prototype.lgSize;\n}\n\n\ninterface ParsedNumberFormat {\n  minInt: number;\n  // the minimum number of digits required in the fraction part of the number\n  minFrac: number;\n  // the maximum number of digits required in the fraction part of the number\n  maxFrac: number;\n  // the prefix for a positive number\n  posPre: string;\n  // the suffix for a positive number\n  posSuf: string;\n  // the prefix for a negative number (e.g. `-` or `(`))\n  negPre: string;\n  // the suffix for a negative number (e.g. `)`)\n  negSuf: string;\n  // number of digits in each group of separated digits\n  gSize: number;\n  // number of digits in the last group of digits before the decimal separator\n  lgSize: number;\n}\n/**\n * @param {?} format\n * @param {?=} minusSign\n * @return {?}\n */\nfunction parseNumberFormat(format: string, minusSign = '-'): ParsedNumberFormat {\n  const /** @type {?} */ p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0\n  };\n\n  const /** @type {?} */ patternParts = format.split(PATTERN_SEP);\n  const /** @type {?} */ positive = patternParts[0];\n  const /** @type {?} */ negative = patternParts[1];\n\n  const /** @type {?} */ positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n      positive.split(DECIMAL_SEP) :\n      [\n        positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n        positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n      ], /** @type {?} */\n        integer = positiveParts[0], /** @type {?} */ fraction = positiveParts[1] || '';\n\n  p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n\n  for (let /** @type {?} */ i = 0; i < fraction.length; i++) {\n    const /** @type {?} */ ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n\n  const /** @type {?} */ groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n\n  if (negative) {\n    const /** @type {?} */ trunkLen = positive.length - p.posPre.length - p.posSuf.length, /** @type {?} */\n          pos = negative.indexOf(DIGIT_CHAR);\n\n    p.negPre = negative.substr(0, pos).replace(/'/g, '');\n    p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n\n  return p;\n}\n/**\n * @record\n */\nfunction ParsedNumber() {}\n\n\nfunction ParsedNumber_tsickle_Closure_declarations() {\n/** @type {?} */\nParsedNumber.prototype.digits;\n/** @type {?} */\nParsedNumber.prototype.exponent;\n/** @type {?} */\nParsedNumber.prototype.integerLen;\n}\n\n\ninterface ParsedNumber {\n  // an array of digits containing leading zeros as necessary\n  digits: number[];\n  // the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n  exponent: number;\n  // the number of the digits in `d` that are to the left of the decimal point\n  integerLen: number;\n}\n/**\n * Parse a number (as a string)\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n * @param {?} numStr\n * @return {?}\n */\nfunction parseNumber(numStr: string): ParsedNumber {\n  let /** @type {?} */ exponent = 0, /** @type {?} */ digits, /** @type {?} */ integerLen;\n  let /** @type {?} */ i, /** @type {?} */ j, /** @type {?} */ zeros;\n\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n  }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = +numStr.charAt(i);\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n\n  return {digits, exponent, integerLen};\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n * @param {?} parsedNumber\n * @param {?} minFrac\n * @param {?} maxFrac\n * @return {?}\n */\nfunction roundNumber(parsedNumber: ParsedNumber, minFrac: number, maxFrac: number) {\n  if (minFrac > maxFrac) {\n    throw new Error(\n        `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n  }\n\n  let /** @type {?} */ digits = parsedNumber.digits;\n  let /** @type {?} */ fractionLen = digits.length - parsedNumber.integerLen;\n  const /** @type {?} */ fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n\n  // The index of the digit to where rounding is to occur\n  let /** @type {?} */ roundAt = fractionSize + parsedNumber.integerLen;\n  let /** @type {?} */ digit = digits[roundAt];\n\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let /** @type {?} */ j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, roundAt = fractionSize + 1);\n    digits[0] = 0;\n    for (let /** @type {?} */ i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let /** @type {?} */ k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const /** @type {?} */ carry = digits.reduceRight(function(carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d % 10;\n    return Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\n/**\n * \\@internal\n * @param {?} text\n * @return {?}\n */\nexport function parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n  */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {ISO8601_DATE_REGEX, isoStringToDate} from '../date_pipe';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {DateFormatter} from './intl';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n * in the _local_ time and locale is 'en-US':\n * \n * ```\n *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n * \n * \\@stable\n */\nexport class DeprecatedDatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    let /** @type {?} */ date: Date;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (!isNaN(value - parseFloat(value))) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n * timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(\n        date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedDatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDeprecatedDatePipe._ALIASES;\n/** @type {?} */\nDeprecatedDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedDatePipe.ctorParameters;\n/** @type {?} */\nDeprecatedDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} opts\n * @return {?}\n */\nstatic format(num: number, locale: string, style: NumberFormatStyle, opts: {\n    minimumIntegerDigits?: number,\n    minimumFractionDigits?: number,\n    maximumFractionDigits?: number,\n    currency?: string|null,\n    currencyAsSymbol?: boolean\n  } = {}): string {\n    const {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n           currencyAsSymbol = false} = opts;\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return options.reduce((merged, opt) => ({...merged, ...opt}), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatDate} from '../i18n/format_date';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nexport const /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\nexport class DatePipe implements PipeTransform {\n/**\n * @param {?} locale\n */\nconstructor(\nprivate locale: string) {}\n/**\n * @param {?} value\n * @param {?=} format\n * @param {?=} timezone\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, format = 'mediumDate', timezone?: string, locale?: string): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    let /** @type {?} */ date: Date;\n    if (isDate(value)) {\n      date = value;\n    } else if (!isNaN(value - parseFloat(value))) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => +val);\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return formatDate(date, format, locale || this.locale, timezone);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype.locale;\n}\n\n/**\n * \\@internal\n * @param {?} match\n * @return {?}\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = +(match[9] + match[10]);\n    tzMin = +(match[9] + match[11]);\n  }\n  dateSetter.call(date, +(match[1]), +(match[2]) - 1, +(match[3]));\n  const /** @type {?} */ h = +(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = +(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = +(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, ɵstringify as stringify} from '@angular/core';\n/**\n * @param {?} type\n * @param {?} value\n * @return {?}\n */\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormStyle, FormatWidth, NumberSymbol, Time, TranslationWidth, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat} from './locale_data_api';\n\nconst /** @type {?} */ NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\ntype ZoneWidth = number;\nlet ZoneWidth: any = {};\nZoneWidth.Short = 0;\nZoneWidth.ShortGMT = 1;\nZoneWidth.Long = 2;\nZoneWidth.Extended = 3;\nZoneWidth[ZoneWidth.Short] = \"Short\";\nZoneWidth[ZoneWidth.ShortGMT] = \"ShortGMT\";\nZoneWidth[ZoneWidth.Long] = \"Long\";\nZoneWidth[ZoneWidth.Extended] = \"Extended\";\n\ntype DateType = number;\nlet DateType: any = {};\nDateType.FullYear = 0;\nDateType.Month = 1;\nDateType.Date = 2;\nDateType.Hours = 3;\nDateType.Minutes = 4;\nDateType.Seconds = 5;\nDateType.Milliseconds = 6;\nDateType.Day = 7;\nDateType[DateType.FullYear] = \"FullYear\";\nDateType[DateType.Month] = \"Month\";\nDateType[DateType.Date] = \"Date\";\nDateType[DateType.Hours] = \"Hours\";\nDateType[DateType.Minutes] = \"Minutes\";\nDateType[DateType.Seconds] = \"Seconds\";\nDateType[DateType.Milliseconds] = \"Milliseconds\";\nDateType[DateType.Day] = \"Day\";\n\ntype TranslationType = number;\nlet TranslationType: any = {};\nTranslationType.DayPeriods = 0;\nTranslationType.Days = 1;\nTranslationType.Months = 2;\nTranslationType.Eras = 3;\nTranslationType[TranslationType.DayPeriods] = \"DayPeriods\";\nTranslationType[TranslationType.Days] = \"Days\";\nTranslationType[TranslationType.Months] = \"Months\";\nTranslationType[TranslationType.Eras] = \"Eras\";\n\n/**\n * Transforms a date to a locale string based on a pattern and a timezone\n * \n * \\@internal\n * @param {?} date\n * @param {?} format\n * @param {?} locale\n * @param {?=} timezone\n * @return {?}\n */\nexport function formatDate(date: Date, format: string, locale: string, timezone?: string): string {\n  const /** @type {?} */ namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let /** @type {?} */ parts: string[] = [];\n  let /** @type {?} */ match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const /** @type {?} */ part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let /** @type {?} */ text = '';\n  parts.forEach(value => {\n    const /** @type {?} */ dateFormatter = getDateFormatter(value);\n    text += dateFormatter ?\n        dateFormatter(date, locale, dateTimezoneOffset) :\n        value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n/**\n * @param {?} locale\n * @param {?} format\n * @return {?}\n */\nfunction getNamedFormat(locale: string, format: string): string {\n  const /** @type {?} */ localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let /** @type {?} */ formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const /** @type {?} */ shortTime = getNamedFormat(locale, 'shortTime');\n      const /** @type {?} */ shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const /** @type {?} */ mediumTime = getNamedFormat(locale, 'mediumTime');\n      const /** @type {?} */ mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const /** @type {?} */ longTime = getNamedFormat(locale, 'longTime');\n      const /** @type {?} */ longDate = getNamedFormat(locale, 'longDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const /** @type {?} */ fullTime = getNamedFormat(locale, 'fullTime');\n      const /** @type {?} */ fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n/**\n * @param {?} str\n * @param {?} opt_values\n * @return {?}\n */\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n/**\n * @param {?} num\n * @param {?} digits\n * @param {?=} minusSign\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction padNumber(\n    num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\n  let /** @type {?} */ neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let /** @type {?} */ strNum = '' + num;\n  while (strNum.length < digits) strNum = '0' + strNum;\n  if (trim) {\n    strNum = strNum.substr(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n * @param {?} name\n * @param {?} size\n * @param {?=} offset\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction dateGetter(\n    name: DateType, size: number, offset: number = 0, trim = false,\n    negWrap = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    let /** @type {?} */ part = getDatePart(name, date, size);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n    if (name === DateType.Hours && part === 0 && offset === -12) {\n      part = 12;\n    }\n    return padNumber(\n        part, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim, negWrap);\n  };\n}\n/**\n * @param {?} name\n * @param {?} date\n * @param {?} size\n * @return {?}\n */\nfunction getDatePart(name: DateType, date: Date, size: number): number {\n  switch (name) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.Milliseconds:\n      const /** @type {?} */ div = size === 1 ? 100 : (size === 2 ? 10 : 1);\n      return Math.round(date.getMilliseconds() / div);\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${name}\".`);\n  }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n * @param {?} name\n * @param {?} width\n * @param {?=} form\n * @param {?=} extended\n * @return {?}\n */\nfunction dateStrGetter(\n    name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\n    extended = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n * @param {?} date\n * @param {?} locale\n * @param {?} name\n * @param {?} width\n * @param {?} form\n * @param {?} extended\n * @return {?}\n */\nfunction getDateTranslation(\n    date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\n    extended: boolean) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const /** @type {?} */ currentHours = date.getHours();\n      const /** @type {?} */ currentMinutes = date.getMinutes();\n      if (extended) {\n        const /** @type {?} */ rules = getLocaleExtraDayPeriodRules(locale);\n        const /** @type {?} */ dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        let /** @type {?} */ result;\n        rules.forEach((rule: Time | [Time, Time], index: number) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const {hours: hoursFrom, minutes: minutesFrom} = rule[0];\n            const {hours: hoursTo, minutes: minutesTo} = rule[1];\n            if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                (currentHours < hoursTo ||\n                 (currentHours === hoursTo && currentMinutes < minutesTo))) {\n              result = dayPeriods[index];\n            }\n          } else {  // noon or midnight\n            const {hours, minutes} = rule;\n            if (hours === currentHours && minutes === currentMinutes) {\n              result = dayPeriods[index];\n            }\n          }\n        });\n        if (result) {\n          return result;\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, /** @type {?} */(( <TranslationWidth>width)))[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, /** @type {?} */(( <TranslationWidth>width)))[date.getFullYear() <= 0 ? 0 : 1];\n  }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n * @param {?} width\n * @return {?}\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function(date: Date, locale: string, offset: number) {\n    const /** @type {?} */ zone = -1 * offset;\n    const /** @type {?} */ minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const /** @type {?} */ hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n              padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst /** @type {?} */ JANUARY = 0;\nconst /** @type {?} */ THURSDAY = 4;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getFirstThursdayOfYear(year: number) {\n  const /** @type {?} */ firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n  return new Date(\n      year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n * @param {?} datetime\n * @return {?}\n */\nfunction getThursdayThisWeek(datetime: Date) {\n  return new Date(\n      datetime.getFullYear(), datetime.getMonth(),\n      datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n/**\n * @param {?} size\n * @param {?=} monthBased\n * @return {?}\n */\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    let /** @type {?} */ result;\n    if (monthBased) {\n      const /** @type {?} */ nbDaysBefore1stDayOfMonth =\n          new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const /** @type {?} */ today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const /** @type {?} */ firstThurs = getFirstThursdayOfYear(date.getFullYear());\n      const /** @type {?} */ thisThurs = getThursdayThisWeek(date);\n      const /** @type {?} */ diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset?: number) => string;\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatter} = {};\n/**\n * @param {?} format\n * @return {?}\n */\nfunction getDateFormatter(format: string): DateFormatter|null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let /** @type {?} */ formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter =\n          dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second padded (0-9)\n    case 'S':\n      formatter = dateGetter(DateType.Milliseconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.Milliseconds, 2);\n      break;\n    // = millisecond\n    case 'SSS':\n      formatter = dateGetter(DateType.Milliseconds, 3);\n      break;\n\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n/**\n * @param {?} timezone\n * @param {?} fallback\n * @return {?}\n */\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const /** @type {?} */ requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} timezone\n * @param {?} reverse\n * @return {?}\n */\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const /** @type {?} */ reverseValue = reverse ? -1 : 1;\n  const /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\n  const /** @type {?} */ timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const /** @type {?} */ COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@stable\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n/**\n * We need to re-create existing embedded view if:\n * - templateRef has changed\n * - context has changes\n * \n * We mark context object as changed when the corresponding object\n * shape changes (new properties are added or existing properties are removed).\n * In other words we consider context with the same properties as \"the same\" even\n * if object reference changes (see https://github.com/angular/angular/issues/13407).\n * @param {?} changes\n * @return {?}\n */\n\nprivate _shouldRecreateView(changes: SimpleChanges): boolean {\n    const /** @type {?} */ ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n/**\n * @param {?} ctxChange\n * @return {?}\n */\n\nprivate _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let /** @type {?} */ propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n/**\n * @param {?} ctx\n * @return {?}\n */\n\nprivate _updateExistingContext(ctx: Object): void {\n    for (let /** @type {?} */ propName of Object.keys(ctx)) {\n      ( /** @type {?} */((<any>this._viewRef.context)))[propName] = ( /** @type {?} */((<any>this.ngTemplateOutletContext)))[propName];\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngTemplateOutletContext\": [{ type: Input },],\n\"ngTemplateOutlet\": [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Update an HTML element styles.\n * \n * \\@howToUse \n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n * \n * \\@stable\n */\nexport class NgStyle implements DoCheck {\nprivate _ngStyle: {[key: string]: string};\nprivate _differ: KeyValueDiffer<string, string|number>;\n/**\n * @param {?} _differs\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _differs: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer2) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n/**\n * @param {?} nameAndUnit\n * @param {?} value\n * @return {?}\n */\n\nprivate _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    this._renderer.setStyle(this._ngEl.nativeElement, name, /** @type {?} */(( value as string)));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngStyle\": [{ type: Input },],\n};\n}\n\nfunction NgStyle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgStyle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgStyle.ctorParameters;\n/** @type {?} */\nNgStyle.propDecorators;\n/** @type {?} */\nNgStyle.prototype._ngStyle;\n/** @type {?} */\nNgStyle.prototype._differ;\n/** @type {?} */\nNgStyle.prototype._differs;\n/** @type {?} */\nNgStyle.prototype._ngEl;\n/** @type {?} */\nNgStyle.prototype._renderer;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\n\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\n\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\n\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngPlural\": [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const /** @type {?} */ isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\n\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitch\": [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitchCase\": [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\n\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngIf\": [{ type: Input },],\n\"ngIfThen\": [{ type: Input },],\n\"ngIfElse\": [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\n\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngForOf\": [{ type: Input },],\n\"ngForTrackBy\": [{ type: Input },],\n\"ngForTemplate\": [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges, StaticProvider, Type, ViewContainerRef} from '@angular/core';\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n * \n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n * \n * ### Fine tune control\n * \n * You can control the component creation process by using the following optional attributes:\n * \n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n * \n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n * \n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n * \n * ### Syntax\n * \n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n * \n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n * \n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n * ## Example\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n * \n * A more complete example with additional options:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n * \n * \\@experimental\n */\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n   ngComponentOutlet: Type<any>;\n   ngComponentOutletInjector: Injector;\n   ngComponentOutletContent: any[][];\n   ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\nprivate _componentRef: ComponentRef<any>|null = null;\nprivate _moduleRef: NgModuleRef<any>|null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const /** @type {?} */ componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngComponentOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngComponentOutlet\": [{ type: Input },],\n\"ngComponentOutletInjector\": [{ type: Input },],\n\"ngComponentOutletContent\": [{ type: Input },],\n\"ngComponentOutletNgModuleFactory\": [{ type: Input },],\n};\n}\n\nfunction NgComponentOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentOutlet.ctorParameters;\n/** @type {?} */\nNgComponentOutlet.propDecorators;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutlet;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletInjector;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletContent;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n/** @type {?} */\nNgComponentOutlet.prototype._componentRef;\n/** @type {?} */\nNgComponentOutlet.prototype._moduleRef;\n/** @type {?} */\nNgComponentOutlet.prototype._viewContainerRef;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>|null;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>|null;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer2) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\n\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\n\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\n\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\n\nprivate _toggleClass(klass: string, enabled: boolean): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"klass\": [{ type: Input, args: ['class', ] },],\n\"ngClass\": [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const /** @type {?} */ cookie of cookieStr.split(';')) {\n    const /** @type {?} */ eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\nimport {Plural, getLocalePluralCase} from './locale_data_api';\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\nfunction NgLocalization_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} value\n * @param {?=} locale\n * @return {?}\n */\nNgLocalization.prototype.getPluralCategory = function(value, locale) {};\n}\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * \n * \\@internal\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @param {?=} locale\n * @return {?}\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let /** @type {?} */ key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n */\nexport class NgLocaleLocalization extends NgLocalization {\n/**\n * @param {?} locale\n */\nconstructor( protected locale: string) { super(); }\n/**\n * @param {?} value\n * @param {?=} locale\n * @return {?}\n */\ngetPluralCategory(value: any, locale?: string): string {\n    const /** @type {?} */ plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NgLocaleLocalization_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLocaleLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLocaleLocalization.ctorParameters;\n/** @type {?} */\nNgLocaleLocalization.prototype.locale;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CURRENCIES} from './currencies';\nimport localeEn from './locale_en';\nimport {LOCALE_DATA, LocaleDataIndex, ExtraLocaleDataIndex} from './locale_data';\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle.Scientific = 3;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\nNumberFormatStyle[NumberFormatStyle.Scientific] = \"Scientific\";\n\nexport type Plural = number;\nexport let Plural: any = {};\nPlural.Zero = 0;\nPlural.One = 1;\nPlural.Two = 2;\nPlural.Few = 3;\nPlural.Many = 4;\nPlural.Other = 5;\nPlural[Plural.Zero] = \"Zero\";\nPlural[Plural.One] = \"One\";\nPlural[Plural.Two] = \"Two\";\nPlural[Plural.Few] = \"Few\";\nPlural[Plural.Many] = \"Many\";\nPlural[Plural.Other] = \"Other\";\n\nexport type FormStyle = number;\nexport let FormStyle: any = {};\nFormStyle.Format = 0;\nFormStyle.Standalone = 1;\nFormStyle[FormStyle.Format] = \"Format\";\nFormStyle[FormStyle.Standalone] = \"Standalone\";\n\nexport type TranslationWidth = number;\nexport let TranslationWidth: any = {};\nTranslationWidth.Narrow = 0;\nTranslationWidth.Abbreviated = 1;\nTranslationWidth.Wide = 2;\nTranslationWidth.Short = 3;\nTranslationWidth[TranslationWidth.Narrow] = \"Narrow\";\nTranslationWidth[TranslationWidth.Abbreviated] = \"Abbreviated\";\nTranslationWidth[TranslationWidth.Wide] = \"Wide\";\nTranslationWidth[TranslationWidth.Short] = \"Short\";\n\nexport type FormatWidth = number;\nexport let FormatWidth: any = {};\nFormatWidth.Short = 0;\nFormatWidth.Medium = 1;\nFormatWidth.Long = 2;\nFormatWidth.Full = 3;\nFormatWidth[FormatWidth.Short] = \"Short\";\nFormatWidth[FormatWidth.Medium] = \"Medium\";\nFormatWidth[FormatWidth.Long] = \"Long\";\nFormatWidth[FormatWidth.Full] = \"Full\";\n\nexport type NumberSymbol = number;\nexport let NumberSymbol: any = {};\nNumberSymbol.Decimal = 0;\nNumberSymbol.Group = 1;\nNumberSymbol.List = 2;\nNumberSymbol.PercentSign = 3;\nNumberSymbol.PlusSign = 4;\nNumberSymbol.MinusSign = 5;\nNumberSymbol.Exponential = 6;\nNumberSymbol.SuperscriptingExponent = 7;\nNumberSymbol.PerMille = 8;\nNumberSymbol.Infinity = 9;\nNumberSymbol.NaN = 10;\nNumberSymbol.TimeSeparator = 11;\nNumberSymbol.CurrencyDecimal = 12;\nNumberSymbol.CurrencyGroup = 13;\nNumberSymbol[NumberSymbol.Decimal] = \"Decimal\";\nNumberSymbol[NumberSymbol.Group] = \"Group\";\nNumberSymbol[NumberSymbol.List] = \"List\";\nNumberSymbol[NumberSymbol.PercentSign] = \"PercentSign\";\nNumberSymbol[NumberSymbol.PlusSign] = \"PlusSign\";\nNumberSymbol[NumberSymbol.MinusSign] = \"MinusSign\";\nNumberSymbol[NumberSymbol.Exponential] = \"Exponential\";\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = \"SuperscriptingExponent\";\nNumberSymbol[NumberSymbol.PerMille] = \"PerMille\";\nNumberSymbol[NumberSymbol.Infinity] = \"Infinity\";\nNumberSymbol[NumberSymbol.NaN] = \"NaN\";\nNumberSymbol[NumberSymbol.TimeSeparator] = \"TimeSeparator\";\nNumberSymbol[NumberSymbol.CurrencyDecimal] = \"CurrencyDecimal\";\nNumberSymbol[NumberSymbol.CurrencyGroup] = \"CurrencyGroup\";\n\nexport type WeekDay = number;\nexport let WeekDay: any = {};\nWeekDay.Sunday = 0;\nWeekDay.Monday = 1;\nWeekDay.Tuesday = 2;\nWeekDay.Wednesday = 3;\nWeekDay.Thursday = 4;\nWeekDay.Friday = 5;\nWeekDay.Saturday = 6;\nWeekDay[WeekDay.Sunday] = \"Sunday\";\nWeekDay[WeekDay.Monday] = \"Monday\";\nWeekDay[WeekDay.Tuesday] = \"Tuesday\";\nWeekDay[WeekDay.Wednesday] = \"Wednesday\";\nWeekDay[WeekDay.Thursday] = \"Thursday\";\nWeekDay[WeekDay.Friday] = \"Friday\";\nWeekDay[WeekDay.Saturday] = \"Saturday\";\n\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleId(locale: string): string {\n  return findLocaleData(locale)[LocaleDataIndex.LocaleId];\n}\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ amPmData = /** @type {?} */(( <[\n    string, string\n  ][][]>[data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]]));\n  const /** @type {?} */ amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ daysData = /** @type {?} */((\n      <string[][][]>[data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]]));\n  const /** @type {?} */ days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ monthsData = /** @type {?} */((\n      <string[][][]>[data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]]));\n  const /** @type {?} */ months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ erasData = /** @type {?} */(( <[string, string][]>data[LocaleDataIndex.Eras]));\n  return getLastDefinedValue(erasData, width);\n}\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.FirstDayOfWeek];\n}\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.WeekendRange];\n}\n/**\n * Date format that depends on the locale.\n * \n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n * \n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n * \n * - `long` should contain year, long-month, day.\n * \n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n * \n * - `medium` should contain year, abbreviated-month (MMM), day.\n * \n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n * \n * - `short` should contain year, numeric-month (MM/M), and day.\n * \n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.DateFormat][width];\n}\n/**\n * Time format that depends on the locale.\n * \n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n * \n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.TimeFormat][width];\n}\n/**\n * Date-time format that depends on the locale.\n * \n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n * \n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n * \n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ dateTimeFormatData = /** @type {?} */(( <string[]>data[LocaleDataIndex.DateTimeFormat]));\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {\\@link NumberSymbol} for more information.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} symbol\n * @return {?}\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ res = data[LocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    }\n  }\n  return res;\n}\n/**\n * Number format that depends on the locale.\n * \n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n * \n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n * \n * Here are the special characters used in number patterns:\n * \n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n * \n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} type\n * @return {?}\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.NumberFormats][type];\n}\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencySymbol] || null;\n}\n/**\n * The name of the currency for the main country using this locale (e.g. USD for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyName] || null;\n}\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {\\@link NgPlural} for more information.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocalePluralCase(locale: string): (value: number) => Plural {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction checkFullData(data: any) {\n  if (!data[LocaleDataIndex.ExtraData]) {\n    throw new Error(\n        `Missing extra locale data for the locale \"${data[LocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n * \n * Note: this is only available if you load the full locale data.\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  checkFullData(data);\n  const /** @type {?} */ rules = data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {\\@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n * \n * Note: this is only available if you load the full locale data.\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  checkFullData(data);\n  const /** @type {?} */ dayPeriodsData = /** @type {?} */(( <string[][][]>[\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ]));\n  const /** @type {?} */ dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Returns the first value that is defined in an array, going backwards.\n * \n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\n * add the first one to the locale data arrays, the other ones are only defined when different.\n * We use this function to retrieve the first defined value.\n * \n * \\@experimental i18n support is experimental.\n * @template T\n * @param {?} data\n * @param {?} index\n * @return {?}\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let /** @type {?} */ i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * A representation of the time with hours and minutes\n *\n * @experimental i18n support is experimental.\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n/**\n * Extract the hours and minutes from a string like \"15:45\"\n * @param {?} time\n * @return {?}\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n/**\n * Finds the locale data for a locale id\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function findLocaleData(locale: string): any {\n  const /** @type {?} */ normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n\n  let /** @type {?} */ match = LOCALE_DATA[normalizedLocale];\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const /** @type {?} */ parentLocale = normalizedLocale.split('-')[0];\n  match = LOCALE_DATA[parentLocale];\n\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Return the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: $, US$, or USD)\n * \n * \\@internal\n * @param {?} code\n * @param {?} format\n * @return {?}\n */\nexport function findCurrencySymbol(code: string, format: 'wide' | 'narrow') {\n  const /** @type {?} */ currency = CURRENCIES[code] || {};\n  const /** @type {?} */ symbol = currency[0] || code;\n  return format === 'wide' ? symbol : currency[1] || symbol;\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * \\@experimental i18n support is experimental.\n */\nexport const /** @type {?} */ LOCALE_DATA: {[localeId: string]: any} = {};\n/**\n * Register global data to be used internally by Angular. See the\n * {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} data\n * @param {?=} extraData\n * @return {?}\n */\nexport function registerLocaleData(data: any, extraData?: any) {\n  const /** @type {?} */ localeId = data[LocaleDataIndex.LocaleId].toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport const enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencySymbol,\n  CurrencyName,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n\nexport default [\n  'en',\n  [\n    ['a', 'p'],\n    ['AM', 'PM'],\n  ],\n  [\n    ['AM', 'PM'],\n    ,\n  ],\n  [\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  ],\n  ,\n  [\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n      'October', 'November', 'December'\n    ]\n  ],\n  , [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n  ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n  ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\n  [\n    '{1}, {0}',\n    ,\n    '{1} \\'at\\' {0}',\n  ],\n  ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n  ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar',\n  function(n: number):\n      number {\n        let /** @type {?} */ i = Math.floor(Math.abs(n)), /** @type {?} */ v = n.toString().replace(/^[^.]*\\.?/, '').length;\n        if (i === 1 && v === 0) return 1;\n        return 5;\n      }\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * \\@experimental\n */\nexport const /** @type {?} */ CURRENCIES: {[code: string]: (string | undefined)[]} = {\n  'AOA': [, 'Kz'],\n  'ARS': [, '$'],\n  'AUD': ['A$', '$'],\n  'BAM': [, 'KM'],\n  'BBD': [, '$'],\n  'BDT': [, '৳'],\n  'BMD': [, '$'],\n  'BND': [, '$'],\n  'BOB': [, 'Bs'],\n  'BRL': ['R$'],\n  'BSD': [, '$'],\n  'BWP': [, 'P'],\n  'BYN': [, 'р.'],\n  'BZD': [, '$'],\n  'CAD': ['CA$', '$'],\n  'CLP': [, '$'],\n  'CNY': ['CN¥', '¥'],\n  'COP': [, '$'],\n  'CRC': [, '₡'],\n  'CUC': [, '$'],\n  'CUP': [, '$'],\n  'CZK': [, 'Kč'],\n  'DKK': [, 'kr'],\n  'DOP': [, '$'],\n  'EGP': [, 'E£'],\n  'ESP': [, '₧'],\n  'EUR': ['€'],\n  'FJD': [, '$'],\n  'FKP': [, '£'],\n  'GBP': ['£'],\n  'GEL': [, '₾'],\n  'GIP': [, '£'],\n  'GNF': [, 'FG'],\n  'GTQ': [, 'Q'],\n  'GYD': [, '$'],\n  'HKD': ['HK$', '$'],\n  'HNL': [, 'L'],\n  'HRK': [, 'kn'],\n  'HUF': [, 'Ft'],\n  'IDR': [, 'Rp'],\n  'ILS': ['₪'],\n  'INR': ['₹'],\n  'ISK': [, 'kr'],\n  'JMD': [, '$'],\n  'JPY': ['¥'],\n  'KHR': [, '៛'],\n  'KMF': [, 'CF'],\n  'KPW': [, '₩'],\n  'KRW': ['₩'],\n  'KYD': [, '$'],\n  'KZT': [, '₸'],\n  'LAK': [, '₭'],\n  'LBP': [, 'L£'],\n  'LKR': [, 'Rs'],\n  'LRD': [, '$'],\n  'LTL': [, 'Lt'],\n  'LVL': [, 'Ls'],\n  'MGA': [, 'Ar'],\n  'MMK': [, 'K'],\n  'MNT': [, '₮'],\n  'MUR': [, 'Rs'],\n  'MXN': ['MX$', '$'],\n  'MYR': [, 'RM'],\n  'NAD': [, '$'],\n  'NGN': [, '₦'],\n  'NIO': [, 'C$'],\n  'NOK': [, 'kr'],\n  'NPR': [, 'Rs'],\n  'NZD': ['NZ$', '$'],\n  'PHP': [, '₱'],\n  'PKR': [, 'Rs'],\n  'PLN': [, 'zł'],\n  'PYG': [, '₲'],\n  'RON': [, 'lei'],\n  'RUB': [, '₽'],\n  'RUR': [, 'р.'],\n  'RWF': [, 'RF'],\n  'SBD': [, '$'],\n  'SEK': [, 'kr'],\n  'SGD': [, '$'],\n  'SHP': [, '£'],\n  'SRD': [, '$'],\n  'SSP': [, '£'],\n  'STD': [, 'Db'],\n  'SYP': [, '£'],\n  'THB': [, '฿'],\n  'TOP': [, 'T$'],\n  'TRY': [, '₺'],\n  'TTD': [, '$'],\n  'TWD': ['NT$', '$'],\n  'UAH': [, '₴'],\n  'USD': ['$'],\n  'UYU': [, '$'],\n  'VEF': [, 'Bs'],\n  'VND': ['₫'],\n  'XAF': ['FCFA'],\n  'XCD': ['EC$', '$'],\n  'XOF': ['CFA'],\n  'XPF': ['CFPF'],\n  'ZAR': [, 'R'],\n  'ZMW': [, 'ZK'],\n};\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {PlatformLocation,LOCATION_INITIALIZED,LocationChangeEvent,LocationChangeListener} from './platform_location';\nexport {LocationStrategy,APP_BASE_HREF} from './location_strategy';\nexport {HashLocationStrategy} from './hash_location_strategy';\nexport {PathLocationStrategy} from './path_location_strategy';\nexport {PopStateEvent,Location} from './location';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL for storing application location data.\n * \\@description \n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n * \n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n * \n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class PathLocationStrategy extends LocationStrategy {\nprivate _baseHref: string;\n/**\n * @param {?} _platformLocation\n * @param {?=} href\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    return Location.joinWithSlash(this._baseHref, internal);\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    const /** @type {?} */ pathname = this._platformLocation.pathname +\n        Location.normalizeQueryParams(this._platformLocation.search);\n    const /** @type {?} */ hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction PathLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nPathLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPathLocationStrategy.ctorParameters;\n/** @type {?} */\nPathLocationStrategy.prototype._baseHref;\n/** @type {?} */\nPathLocationStrategy.prototype._platformLocation;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL hash for storing application location data.\n * \\@description \n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n * \n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class HashLocationStrategy extends LocationStrategy {\nprivate _baseHref: string = '';\n/**\n * @param {?} _platformLocation\n * @param {?=} _baseHref\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let /** @type {?} */ path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction HashLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nHashLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHashLocationStrategy.ctorParameters;\n/** @type {?} */\nHashLocationStrategy.prototype._baseHref;\n/** @type {?} */\nHashLocationStrategy.prototype._platformLocation;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable} from '@angular/core';\n\nimport {LocationStrategy} from './location_strategy';\n/**\n * \\@experimental\n * @record\n */\nexport function PopStateEvent() {}\n\n\nfunction PopStateEvent_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nPopStateEvent.prototype.pop;\n/** @type {?|undefined} */\nPopStateEvent.prototype.type;\n/** @type {?|undefined} */\nPopStateEvent.prototype.url;\n}\n\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  type?: string;\n  url?: string;\n}\n/**\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n * \\@description \n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n * \n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n * \n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n * \n * ### Example\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \\@stable\n */\nexport class Location {\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\n/**\n * \\@internal\n */\n_baseHref: string;\n/**\n * \\@internal\n */\n_platformStrategy: LocationStrategy;\n/**\n * @param {?} platformStrategy\n */\nconstructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const /** @type {?} */ browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'type': ev.type,\n      });\n    });\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n/**\n * Normalizes the given path and compares to the current normalized path.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nisCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n/**\n * Given a string representing a URL, returns the normalized URL path without leading or\n * trailing slashes.\n * @param {?} url\n * @return {?}\n */\nnormalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n/**\n * Given a string representing a URL, returns the platform-specific external URL path.\n * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n * @param {?} url\n * @return {?}\n */\nprepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and pushes a\n * new item onto the platform's history.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\ngo(path: string, query: string = ''): void {\n    this._platformStrategy.pushState(null, '', path, query);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and replaces\n * the top item on the platform's history stack.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nreplaceState(path: string, query: string = ''): void {\n    this._platformStrategy.replaceState(null, '', path, query);\n  }\n/**\n * Navigates forward in the platform's history.\n * @return {?}\n */\nforward(): void { this._platformStrategy.forward(); }\n/**\n * Navigates back in the platform's history.\n * @return {?}\n */\nback(): void { this._platformStrategy.back(); }\n/**\n * Subscribe to the platform's `popState` events.\n * @param {?} onNext\n * @param {?=} onThrow\n * @param {?=} onReturn\n * @return {?}\n */\nsubscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n/**\n * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n * is.\n * @param {?} params\n * @return {?}\n */\n\npublic static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n/**\n * Given 2 parts of a url, join them with a slash if needed.\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\n\npublic static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let /** @type {?} */ slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n/**\n * If url has a trailing slash, remove it, otherwise return url as is. This\n * method looks for the first occurence of either #, ?, or the end of the\n * line as `/` characters after any of these should not be replaced.\n * @param {?} url\n * @return {?}\n */\n\npublic static stripTrailingSlash(url: string): string {\n    const /** @type {?} */ match = url.match(/#|\\?|$/);\n    const /** @type {?} */ pathEndIdx = match && match.index || url.length;\n    const /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: LocationStrategy, },\n];\n}\n\nfunction Location_tsickle_Closure_declarations() {\n/** @type {?} */\nLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocation.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._subject;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._baseHref;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._platformStrategy;\n}\n\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\nfunction PlatformLocation_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.getBaseHrefFromDOM = function() {};\n\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nPlatformLocation.prototype.onPopState = function(fn) {};\n\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nPlatformLocation.prototype.onHashChange = function(fn) {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.pathname = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.search = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.hash = function() {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nPlatformLocation.prototype.replaceState = function(state, title, url) {};\n\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nPlatformLocation.prototype.pushState = function(state, title, url) {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.forward = function() {};\n\n/**\n * @abstract\n * @return {?}\n */\nPlatformLocation.prototype.back = function() {};\n}\n\n/**\n * \\@whatItDoes indicates when a location is initialized\n * \\@experimental\n */\nexport const /** @type {?} */ LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n/**\n * A serializable version of the event from onPopState or onHashChange\n * \n * \\@experimental\n * @record\n */\nexport function LocationChangeEvent() {}\n\n\nfunction LocationChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nLocationChangeEvent.prototype.type;\n}\n\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n/**\n * \\@experimental\n * @record\n */\nexport function LocationChangeListener() {}\n\n\nfunction LocationChangeListener_tsickle_Closure_declarations() {\n/* TODO: handle strange member:\n(e: LocationChangeEvent): any;\n*/\n}\n\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["NgModule","Pipe","ɵisPromise","DATE_FORMATS_SPLIT","timeZoneGetter","isDate","ViewContainerRef","Directive","ElementRef","KeyValueDiffers","TemplateRef","Host","Input","IterableDiffers","isDevMode","NgModuleRef","Renderer2","ɵisListLikeIterable","Injectable","tslib_1.__extends","EventEmitter"],"mappings":"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"}