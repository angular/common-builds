{"version":3,"sources":["packages/common/common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","common","http","core","rxjs","operators","this","HttpHandler","HttpBackend","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","HttpHeaders","headers","_this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name_1","slice","toLowerCase","trim","maybeSetNormalizedName","has","get","set","keys","name","values","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","__spread","toDelete_1","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","k","standardEncoding","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","map","paramParser","rawParams","codec","map$$1","param","eqIdx","_a","val","list","isArray","res","toString","eKey","join","base_1","idx","splice","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpEventType","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","params","urlWithParams","qIdx","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpResponseBase","HttpHeaderResponse","_super","ResponseHeader","status","statusText","defaultStatus","defaultStatusText","ok","HttpResponse","Response","HttpErrorResponse","message","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Injectable","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","Inject","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","xhr","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","jsonpCallbackContext","window","HttpClientXsrfModule","HttpClientXsrfModule_1","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","HttpClientJsonpModule","useFactory","ɵHttpInterceptingHandler"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.0-beta.3+41.sha-f974c48\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/common/http', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));\n}(this, (function (exports,core,rxjs,operators,common) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n *\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n *\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var index = line.indexOf(':');\n                    if (index > 0) {\n                        var name_1 = line.slice(0, index);\n                        var key = name_1.toLowerCase();\n                        var value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            _this.headers.get(key).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var values = headers[name];\n                    var key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    HttpHeaders.prototype.has = function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    HttpHeaders.prototype.get = function (name) {\n        this.init();\n        var values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    HttpHeaders.prototype.keys = function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    HttpHeaders.prototype.getAll = function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, other.headers.get(key));\n            _this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    };\n    HttpHeaders.prototype.clone = function (update) {\n        var clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, __spread(value));\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var toDelete_1 = update.value;\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    HttpHeaders.prototype.forEach = function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };\n    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\nfunction paramParser(rawParams, codec) {\n    var map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = __read(eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n            var list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var value = options.fromObject[key];\n                _this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    HttpParams.prototype.has = function (param) {\n        this.init();\n        return this.map.has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.get = function (param) {\n        this.init();\n        var res = this.map.get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.getAll = function (param) {\n        this.init();\n        return this.map.get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    HttpParams.prototype.keys = function () {\n        this.init();\n        return Array.from(this.map.keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    HttpParams.prototype.toString = function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var eKey = _this.encoder.encodeKey(key);\n            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    HttpParams.prototype.clone = function (update) {\n        var clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });\n            this.updates.forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        _this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var base_1 = _this.map.get(update.param) || [];\n                            var idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                _this.map.set(update.param, base_1);\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            _this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n *\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    HttpRequest.prototype.serializeBody = function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    HttpRequest.prototype.detectContentTypeHeader = function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var method = update.method || this.method;\n        var url = update.url || this.url;\n        var responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var headers = update.headers || this.headers;\n        var params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n *\n */\n\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(exports.HttpEventType || (exports.HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n *\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n *\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    HttpHeaderResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n *\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n *\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n *\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    HttpClient.prototype.request = function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = rxjs.of(req).pipe(operators.concatMap(function (req) { return _this.handler.handle(req); }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(operators.filter(function (event) { return event instanceof HttpResponse; }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(operators.map(function (res) { return res.body; }));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.delete = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.head = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    HttpClient.prototype.jsonp = function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.options = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.patch = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.post = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.put = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient = __decorate([\n        core.Injectable(),\n        __metadata(\"design:paramtypes\", [HttpHandler])\n    ], HttpClient);\n    return HttpClient;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n *\n */\nvar HTTP_INTERCEPTORS = new core.InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor = __decorate([\n        core.Injectable()\n    ], NoopInterceptor);\n    return NoopInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n *\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    JsonpClientBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs.Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var callback = _this.nextCallback();\n            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var body = null;\n            // Whether the response callback has been called.\n            var finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: exports.HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend = __decorate([\n        core.Injectable(),\n        __param(1, core.Inject(common.DOCUMENT)),\n        __metadata(\"design:paramtypes\", [JsonpCallbackContext, Object])\n    ], JsonpClientBackend);\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n *\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor = __decorate([\n        core.Injectable(),\n        __metadata(\"design:paramtypes\", [JsonpClientBackend])\n    ], JsonpInterceptor);\n    return JsonpInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n *\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr = __decorate([\n        core.Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], BrowserXhr);\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n *\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    HttpXhrBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs.Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                var statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error: error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function (error) {\n                var res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var progressEvent = {\n                    type: exports.HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var progress = {\n                    type: exports.HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: exports.HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend = __decorate([\n        core.Injectable(),\n        __metadata(\"design:paramtypes\", [XhrFactory])\n    ], HttpXhrBackend);\n    return HttpXhrBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new core.InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new core.InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n *\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = common.ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor = __decorate([\n        core.Injectable(),\n        __param(0, core.Inject(common.DOCUMENT)), __param(1, core.Inject(core.PLATFORM_ID)),\n        __param(2, core.Inject(XSRF_COOKIE_NAME)),\n        __metadata(\"design:paramtypes\", [Object, String, String])\n    ], HttpXsrfCookieExtractor);\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor = __decorate([\n        core.Injectable(),\n        __param(1, core.Inject(XSRF_HEADER_NAME)),\n        __metadata(\"design:paramtypes\", [HttpXsrfTokenExtractor, String])\n    ], HttpXsrfInterceptor);\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    HttpInterceptingHandler.prototype.handle = function (req) {\n        if (this.chain === null) {\n            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler = __decorate([\n        core.Injectable(),\n        __metadata(\"design:paramtypes\", [HttpBackend, core.Injector])\n    ], HttpInterceptingHandler);\n    return HttpInterceptingHandler;\n}());\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * An NgModule that adds XSRF protection support to outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n *\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    HttpClientXsrfModule_1 = HttpClientXsrfModule;\n    /**\n     * Disable the default XSRF protection.\n     */\n    HttpClientXsrfModule.disable = function () {\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    HttpClientXsrfModule.withOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    var HttpClientXsrfModule_1;\n    HttpClientXsrfModule = HttpClientXsrfModule_1 = __decorate([\n        core.NgModule({\n            providers: [\n                HttpXsrfInterceptor,\n                { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n            ],\n        })\n    ], HttpClientXsrfModule);\n    return HttpClientXsrfModule;\n}());\n/**\n * An NgModule that provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n *\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule = __decorate([\n        core.NgModule({\n            /**\n             * Optional configuration for XSRF protection.\n             */\n            imports: [\n                HttpClientXsrfModule.withOptions({\n                    cookieName: 'XSRF-TOKEN',\n                    headerName: 'X-XSRF-TOKEN',\n                }),\n            ],\n            /**\n             * The module provides `HttpClient` itself, and supporting services.\n             */\n            providers: [\n                HttpClient,\n                { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                HttpXhrBackend,\n                { provide: HttpBackend, useExisting: HttpXhrBackend },\n                BrowserXhr,\n                { provide: XhrFactory, useExisting: BrowserXhr },\n            ],\n        })\n    ], HttpClientModule);\n    return HttpClientModule;\n}());\n/**\n * An NgModule that enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n *\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule = __decorate([\n        core.NgModule({\n            providers: [\n                JsonpClientBackend,\n                { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n            ],\n        })\n    ], HttpClientJsonpModule);\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexports.HttpBackend = HttpBackend;\nexports.HttpHandler = HttpHandler;\nexports.HttpClient = HttpClient;\nexports.HttpHeaders = HttpHeaders;\nexports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\nexports.JsonpClientBackend = JsonpClientBackend;\nexports.JsonpInterceptor = JsonpInterceptor;\nexports.HttpClientJsonpModule = HttpClientJsonpModule;\nexports.HttpClientModule = HttpClientModule;\nexports.HttpClientXsrfModule = HttpClientXsrfModule;\nexports.ɵHttpInterceptingHandler = HttpInterceptingHandler;\nexports.HttpParams = HttpParams;\nexports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\nexports.HttpRequest = HttpRequest;\nexports.HttpErrorResponse = HttpErrorResponse;\nexports.HttpHeaderResponse = HttpHeaderResponse;\nexports.HttpResponse = HttpResponse;\nexports.HttpResponseBase = HttpResponseBase;\nexports.HttpXhrBackend = HttpXhrBackend;\nexports.XhrFactory = XhrFactory;\nexports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}