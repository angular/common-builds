{"version":3,"sources":["packages/common/common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","common","http","core","rxjs","operators","this","HttpHandler","HttpBackend","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","HttpHeaders","headers","_this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name_1","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","set","keys","name","values","length","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","__spread","arguments","toDelete_1","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","k","standardEncoding","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","map","paramParser","rawParams","codec","map$$1","param","eqIdx","_a","val","list","isArray","res","toString","eKey","join","base_1","idx","splice","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpEventType","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","params","urlWithParams","qIdx","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpResponseBase","HttpHeaderResponse","_super","ResponseHeader","status","statusText","defaultStatus","defaultStatusText","ok","HttpResponse","Response","HttpErrorResponse","message","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","decorators","Injectable","ctorParameters","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","Inject","args","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","xhr","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","String","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","HttpClientJsonpModule","useFactory","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_g","ɵangular_packages_common_http_http_h","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵHttpInterceptingHandler","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.6\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/common/http', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));\n}(this, (function (exports,core,rxjs,operators,common) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n *\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n *\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var index = line.indexOf(':');\n                    if (index > 0) {\n                        var name_1 = line.slice(0, index);\n                        var key = name_1.toLowerCase();\n                        var value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            _this.headers.get(key).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var values = headers[name];\n                    var key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    HttpHeaders.prototype.has = function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    HttpHeaders.prototype.get = function (name) {\n        this.init();\n        var values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    HttpHeaders.prototype.keys = function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    HttpHeaders.prototype.getAll = function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, other.headers.get(key));\n            _this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    };\n    HttpHeaders.prototype.clone = function (update) {\n        var clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, __spread(value));\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var toDelete_1 = update.value;\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    HttpHeaders.prototype.forEach = function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };\n    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\nfunction paramParser(rawParams, codec) {\n    var map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = __read(eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n            var list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var value = options.fromObject[key];\n                _this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    HttpParams.prototype.has = function (param) {\n        this.init();\n        return this.map.has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.get = function (param) {\n        this.init();\n        var res = this.map.get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.getAll = function (param) {\n        this.init();\n        return this.map.get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    HttpParams.prototype.keys = function () {\n        this.init();\n        return Array.from(this.map.keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    HttpParams.prototype.toString = function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var eKey = _this.encoder.encodeKey(key);\n            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    HttpParams.prototype.clone = function (update) {\n        var clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });\n            this.updates.forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        _this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var base_1 = _this.map.get(update.param) || [];\n                            var idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                _this.map.set(update.param, base_1);\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            _this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n *\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    HttpRequest.prototype.serializeBody = function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    HttpRequest.prototype.detectContentTypeHeader = function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var method = update.method || this.method;\n        var url = update.url || this.url;\n        var responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var headers = update.headers || this.headers;\n        var params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n *\n */\n\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(exports.HttpEventType || (exports.HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n *\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n *\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    HttpHeaderResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n *\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n *\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n *\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    HttpClient.prototype.request = function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = rxjs.of(req).pipe(operators.concatMap(function (req) { return _this.handler.handle(req); }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(operators.filter(function (event) { return event instanceof HttpResponse; }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(operators.map(function (res) { return res.body; }));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.delete = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.head = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    HttpClient.prototype.jsonp = function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.options = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.patch = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.post = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.put = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler }\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n *\n */\nvar HTTP_INTERCEPTORS = new core.InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    return NoopInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n *\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    JsonpClientBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs.Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var callback = _this.nextCallback();\n            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var body = null;\n            // Whether the response callback has been called.\n            var finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: exports.HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n *\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend }\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n *\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n *\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    HttpXhrBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs.Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                var statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error: error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function (error) {\n                var res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var progressEvent = {\n                    type: exports.HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var progress = {\n                    type: exports.HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: exports.HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory }\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new core.InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new core.InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n *\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = common.ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n        { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\n        { type: String, decorators: [{ type: core.Inject, args: [XSRF_COOKIE_NAME,] }] }\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor },\n        { type: String, decorators: [{ type: core.Inject, args: [XSRF_HEADER_NAME,] }] }\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    HttpInterceptingHandler.prototype.handle = function (req) {\n        if (this.chain === null) {\n            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpInterceptingHandler.ctorParameters = function () { return [\n        { type: HttpBackend },\n        { type: core.Injector }\n    ]; };\n    return HttpInterceptingHandler;\n}());\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n *\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    HttpClientXsrfModule.disable = function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    HttpClientXsrfModule.withOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] }\n    ];\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n *\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] }\n    ];\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n *\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] }\n    ];\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_common_http_http_a = NoopInterceptor;\nexports.ɵangular_packages_common_http_http_b = JsonpCallbackContext;\nexports.ɵangular_packages_common_http_http_c = jsonpCallbackContext;\nexports.ɵangular_packages_common_http_http_d = BrowserXhr;\nexports.ɵangular_packages_common_http_http_g = HttpXsrfCookieExtractor;\nexports.ɵangular_packages_common_http_http_h = HttpXsrfInterceptor;\nexports.ɵangular_packages_common_http_http_e = XSRF_COOKIE_NAME;\nexports.ɵangular_packages_common_http_http_f = XSRF_HEADER_NAME;\nexports.HttpBackend = HttpBackend;\nexports.HttpHandler = HttpHandler;\nexports.HttpClient = HttpClient;\nexports.HttpHeaders = HttpHeaders;\nexports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\nexports.JsonpClientBackend = JsonpClientBackend;\nexports.JsonpInterceptor = JsonpInterceptor;\nexports.HttpClientJsonpModule = HttpClientJsonpModule;\nexports.HttpClientModule = HttpClientModule;\nexports.HttpClientXsrfModule = HttpClientXsrfModule;\nexports.ɵHttpInterceptingHandler = HttpInterceptingHandler;\nexports.HttpParams = HttpParams;\nexports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\nexports.HttpRequest = HttpRequest;\nexports.HttpErrorResponse = HttpErrorResponse;\nexports.HttpHeaderResponse = HttpHeaderResponse;\nexports.HttpResponse = HttpResponse;\nexports.HttpResponseBase = HttpResponseBase;\nexports.HttpXhrBackend = HttpXhrBackend;\nexports.XhrFactory = XhrFactory;\nexports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}