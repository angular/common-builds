{"version":3,"file":"common.umd.min.js","sources":["../../../../packages/common/src/pipes/index.ts","../../../../packages/common/src/common_module.ts","../../../../packages/common/src/dom_tokens.ts","../../../../packages/common/src/pipes/slice_pipe.ts","../../../../packages/common/src/pipes/number_pipe.ts","../../../../packages/common/src/pipes/i18n_select_pipe.ts","../../../../packages/common/src/pipes/json_pipe.ts","../../../../packages/common/src/pipes/i18n_plural_pipe.ts","../../../../packages/common/src/pipes/case_conversion_pipes.ts","../../../../packages/common/src/pipes/deprecated/number_pipe.ts","../../../../packages/common/src/pipes/async_pipe.ts","../../../../packages/common/src/pipes/deprecated/intl.ts","../../../../packages/common/src/pipes/deprecated/date_pipe.ts","../../../../packages/common/src/directives/ng_template_outlet.ts","../../../../packages/common/src/directives/index.ts","../../../../packages/common/src/i18n/format_date.ts","../../../../packages/common/src/pipes/date_pipe.ts","../../../../packages/common/src/directives/ng_style.ts","../../../../packages/common/src/directives/ng_plural.ts","../../../../packages/common/src/directives/ng_for_of.ts","../../../../packages/common/src/directives/ng_if.ts","../../../../packages/common/src/directives/ng_switch.ts","../../../../packages/common/src/directives/ng_component_outlet.ts","../../../../packages/common/src/directives/ng_class.ts","../../../../packages/common/src/i18n/localization.ts","../../../../packages/common/src/i18n/currencies.ts","../../../../packages/common/src/i18n/locale_en.ts","../../../../packages/common/src/i18n/locale_data.ts","../../../../packages/common/src/i18n/locale_data_api.ts","../../../../packages/common/src/location/path_location_strategy.ts","../../../../packages/common/src/location/index.ts","../../../../packages/common/src/location/hash_location_strategy.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../packages/common/src/location/location.ts","../../../../packages/common/src/i18n/format_number.ts","../../../../packages/common/src/cookie.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe\n};\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const /** @type {?} */ COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './i18n/localization';\nimport {COMMON_DEPRECATED_I18N_PIPES} from './pipes/deprecated/index';\nimport {COMMON_PIPES} from './pipes/index';\n/**\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n * \n * \\@stable\n */\nexport class CommonModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction CommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommonModule.ctorParameters;\n}\n\n/**\n * A module that contains the deprecated i18n pipes.\n * \n * @deprecated from v5\n */\nexport class DeprecatedI18NPipesModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{declarations: [COMMON_DEPRECATED_I18N_PIPES], exports: [COMMON_DEPRECATED_I18N_PIPES]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction DeprecatedI18NPipesModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedI18NPipesModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedI18NPipesModule.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n * \n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n * \n * \\@stable\n */\nexport const /** @type {?} */ DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatNumber} from '../i18n/format_number';\nimport {NumberFormatStyle, findCurrencySymbol, getLocaleCurrencyName, getLocaleCurrencySymbol} from '../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo[:locale]]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, digits?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Decimal, digits);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo[:locale]]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, digits?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Percent, digits);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:display[:digitInfo[:locale]]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `display` indicates whether to show the currency symbol or the code.\n *   - `code`(default): use code (e.g. `USD`).\n *   - `symbol`: use symbol (e.g. `$`).\n *   - `symbol-narrow`: some countries have two symbols for their currency, one regular and one\n *   - boolean (deprecated from v5): `true` for symbol and false for `code`\n *   narrow (e.g. the canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`).\n *   If there is no narrow symbol for the chosen currency, the regular symbol will be used.\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} display\n * @param {?=} digits\n * @param {?=} locale\n * @return {?}\n */\ntransform(\n      value: any, currencyCode?: string,\n      display: 'code'|'symbol'|'symbol-narrow'|boolean = 'symbol', digits?: string,\n      locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let /** @type {?} */ currency = currencyCode || 'USD';\n    if (display !== 'code') {\n      currency = findCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow');\n    }\n\n    const {str, error} = formatNumber(value, locale, NumberFormatStyle.Currency, digits, currency);\n\n    if (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error);\n    }\n\n    return str;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmpty(value: any): boolean {\n  return value == null || value === '' || value !== value;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\n * \\@howToUse `expression | i18nSelect:mapping`\n * \\@description \n * \n *  Where `mapping` is an object that indicates the text that should be displayed\n *  for different values of the provided `expression`.\n *  If none of the keys of the mapping match the value of the `expression`, then the content\n *  of the `other` key is returned when present, otherwise an empty string is returned.\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n * \n *  \\@experimental\n */\nexport class I18nSelectPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} mapping\n * @return {?}\n */\ntransform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'i18nSelect', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction I18nSelectPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nSelectPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nSelectPipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Converts value into JSON string.\n * \\@howToUse `expression | json`\n * \\@description \n * \n * Converts value into string using `JSON.stringify`. Useful for debugging.\n * \n * ### Example\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n * \n * \\@stable\n */\nexport class JsonPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: any): string { return JSON.stringify(value, null, 2); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'json', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction JsonPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonPipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping[:locale]`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n * default)\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}, locale?: string): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NUMBER_FORMAT_REGEXP, parseIntAutoRadix} from '../../i18n/format_number';\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {NumberFormatter} from './intl';\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined;\n  let /** @type {?} */ minFraction: number|undefined;\n  let /** @type {?} */ maxFraction: number|undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedDecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedDecimalPipe.ctorParameters;\n/** @type {?} */\nDeprecatedDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedPercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedPercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedPercentPipe.ctorParameters;\n/** @type {?} */\nDeprecatedPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n * \n * \\@stable\n */\nexport class DeprecatedCurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits,\n        currencyCode, symbolDisplay);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedCurrencyPipe.ctorParameters;\n/** @type {?} */\nDeprecatedCurrencyPipe.prototype._locale;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * @record\n */\nfunction SubscriptionStrategy() {}\n\n\nfunction SubscriptionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nSubscriptionStrategy.prototype.createSubscription;\n/** @type {?} */\nSubscriptionStrategy.prototype.dispose;\n/** @type {?} */\nSubscriptionStrategy.prototype.onDestroy;\n}\n\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\n\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\n\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\n\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} opts\n * @return {?}\n */\nstatic format(num: number, locale: string, style: NumberFormatStyle, opts: {\n    minimumIntegerDigits?: number,\n    minimumFractionDigits?: number,\n    maximumFractionDigits?: number,\n    currency?: string|null,\n    currencyAsSymbol?: boolean\n  } = {}): string {\n    const {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n           currencyAsSymbol = false} = opts;\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return options.reduce((merged, opt) => ({...merged, ...opt}), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n  */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {ISO8601_DATE_REGEX, isoStringToDate} from '../date_pipe';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {DateFormatter} from './intl';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n * \n * \\@stable\n */\nexport class DeprecatedDatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    let /** @type {?} */ date: Date;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (!isNaN(value - parseFloat(value))) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n * timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(\n        date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DeprecatedDatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDeprecatedDatePipe._ALIASES;\n/** @type {?} */\nDeprecatedDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedDatePipe.ctorParameters;\n/** @type {?} */\nDeprecatedDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@stable\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n/**\n * We need to re-create existing embedded view if:\n * - templateRef has changed\n * - context has changes\n * \n * We mark context object as changed when the corresponding object\n * shape changes (new properties are added or existing properties are removed).\n * In other words we consider context with the same properties as \"the same\" even\n * if object reference changes (see https://github.com/angular/angular/issues/13407).\n * @param {?} changes\n * @return {?}\n */\n\nprivate _shouldRecreateView(changes: SimpleChanges): boolean {\n    const /** @type {?} */ ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n/**\n * @param {?} ctxChange\n * @return {?}\n */\n\nprivate _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let /** @type {?} */ propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n/**\n * @param {?} ctx\n * @return {?}\n */\n\nprivate _updateExistingContext(ctx: Object): void {\n    for (let /** @type {?} */ propName of Object.keys(ctx)) {\n      ( /** @type {?} */((<any>this._viewRef.context)))[propName] = ( /** @type {?} */((<any>this.ngTemplateOutletContext)))[propName];\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngTemplateOutletContext\": [{ type: Input },],\n\"ngTemplateOutlet\": [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const /** @type {?} */ COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormStyle, FormatWidth, NumberSymbol, Time, TranslationWidth, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat} from './locale_data_api';\n\nconst /** @type {?} */ NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\ntype ZoneWidth = number;\nlet ZoneWidth: any = {};\nZoneWidth.Short = 0;\nZoneWidth.ShortGMT = 1;\nZoneWidth.Long = 2;\nZoneWidth.Extended = 3;\nZoneWidth[ZoneWidth.Short] = \"Short\";\nZoneWidth[ZoneWidth.ShortGMT] = \"ShortGMT\";\nZoneWidth[ZoneWidth.Long] = \"Long\";\nZoneWidth[ZoneWidth.Extended] = \"Extended\";\n\ntype DateType = number;\nlet DateType: any = {};\nDateType.FullYear = 0;\nDateType.Month = 1;\nDateType.Date = 2;\nDateType.Hours = 3;\nDateType.Minutes = 4;\nDateType.Seconds = 5;\nDateType.Milliseconds = 6;\nDateType.Day = 7;\nDateType[DateType.FullYear] = \"FullYear\";\nDateType[DateType.Month] = \"Month\";\nDateType[DateType.Date] = \"Date\";\nDateType[DateType.Hours] = \"Hours\";\nDateType[DateType.Minutes] = \"Minutes\";\nDateType[DateType.Seconds] = \"Seconds\";\nDateType[DateType.Milliseconds] = \"Milliseconds\";\nDateType[DateType.Day] = \"Day\";\n\ntype TranslationType = number;\nlet TranslationType: any = {};\nTranslationType.DayPeriods = 0;\nTranslationType.Days = 1;\nTranslationType.Months = 2;\nTranslationType.Eras = 3;\nTranslationType[TranslationType.DayPeriods] = \"DayPeriods\";\nTranslationType[TranslationType.Days] = \"Days\";\nTranslationType[TranslationType.Months] = \"Months\";\nTranslationType[TranslationType.Eras] = \"Eras\";\n\n/**\n * Transforms a date to a locale string based on a pattern and a timezone\n * \n * \\@internal\n * @param {?} date\n * @param {?} format\n * @param {?} locale\n * @param {?=} timezone\n * @return {?}\n */\nexport function formatDate(date: Date, format: string, locale: string, timezone?: string): string {\n  const /** @type {?} */ namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let /** @type {?} */ parts: string[] = [];\n  let /** @type {?} */ match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const /** @type {?} */ part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let /** @type {?} */ text = '';\n  parts.forEach(value => {\n    const /** @type {?} */ dateFormatter = getDateFormatter(value);\n    text += dateFormatter ?\n        dateFormatter(date, locale, dateTimezoneOffset) :\n        value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n/**\n * @param {?} locale\n * @param {?} format\n * @return {?}\n */\nfunction getNamedFormat(locale: string, format: string): string {\n  const /** @type {?} */ localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let /** @type {?} */ formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const /** @type {?} */ shortTime = getNamedFormat(locale, 'shortTime');\n      const /** @type {?} */ shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const /** @type {?} */ mediumTime = getNamedFormat(locale, 'mediumTime');\n      const /** @type {?} */ mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const /** @type {?} */ longTime = getNamedFormat(locale, 'longTime');\n      const /** @type {?} */ longDate = getNamedFormat(locale, 'longDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const /** @type {?} */ fullTime = getNamedFormat(locale, 'fullTime');\n      const /** @type {?} */ fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n/**\n * @param {?} str\n * @param {?} opt_values\n * @return {?}\n */\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n/**\n * @param {?} num\n * @param {?} digits\n * @param {?=} minusSign\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction padNumber(\n    num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\n  let /** @type {?} */ neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let /** @type {?} */ strNum = '' + num;\n  while (strNum.length < digits) strNum = '0' + strNum;\n  if (trim) {\n    strNum = strNum.substr(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n * @param {?} name\n * @param {?} size\n * @param {?=} offset\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction dateGetter(\n    name: DateType, size: number, offset: number = 0, trim = false,\n    negWrap = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    let /** @type {?} */ part = getDatePart(name, date, size);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n    if (name === DateType.Hours && part === 0 && offset === -12) {\n      part = 12;\n    }\n    return padNumber(\n        part, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim, negWrap);\n  };\n}\n/**\n * @param {?} name\n * @param {?} date\n * @param {?} size\n * @return {?}\n */\nfunction getDatePart(name: DateType, date: Date, size: number): number {\n  switch (name) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.Milliseconds:\n      const /** @type {?} */ div = size === 1 ? 100 : (size === 2 ? 10 : 1);\n      return Math.round(date.getMilliseconds() / div);\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${name}\".`);\n  }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n * @param {?} name\n * @param {?} width\n * @param {?=} form\n * @param {?=} extended\n * @return {?}\n */\nfunction dateStrGetter(\n    name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\n    extended = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n * @param {?} date\n * @param {?} locale\n * @param {?} name\n * @param {?} width\n * @param {?} form\n * @param {?} extended\n * @return {?}\n */\nfunction getDateTranslation(\n    date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\n    extended: boolean) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const /** @type {?} */ currentHours = date.getHours();\n      const /** @type {?} */ currentMinutes = date.getMinutes();\n      if (extended) {\n        const /** @type {?} */ rules = getLocaleExtraDayPeriodRules(locale);\n        const /** @type {?} */ dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        let /** @type {?} */ result;\n        rules.forEach((rule: Time | [Time, Time], index: number) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const {hours: hoursFrom, minutes: minutesFrom} = rule[0];\n            const {hours: hoursTo, minutes: minutesTo} = rule[1];\n            if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                (currentHours < hoursTo ||\n                 (currentHours === hoursTo && currentMinutes < minutesTo))) {\n              result = dayPeriods[index];\n            }\n          } else {  // noon or midnight\n            const {hours, minutes} = rule;\n            if (hours === currentHours && minutes === currentMinutes) {\n              result = dayPeriods[index];\n            }\n          }\n        });\n        if (result) {\n          return result;\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, /** @type {?} */(( <TranslationWidth>width)))[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, /** @type {?} */(( <TranslationWidth>width)))[date.getFullYear() <= 0 ? 0 : 1];\n  }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n * @param {?} width\n * @return {?}\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function(date: Date, locale: string, offset: number) {\n    const /** @type {?} */ zone = -1 * offset;\n    const /** @type {?} */ minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const /** @type {?} */ hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n              padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst /** @type {?} */ JANUARY = 0;\nconst /** @type {?} */ THURSDAY = 4;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getFirstThursdayOfYear(year: number) {\n  const /** @type {?} */ firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n  return new Date(\n      year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n * @param {?} datetime\n * @return {?}\n */\nfunction getThursdayThisWeek(datetime: Date) {\n  return new Date(\n      datetime.getFullYear(), datetime.getMonth(),\n      datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n/**\n * @param {?} size\n * @param {?=} monthBased\n * @return {?}\n */\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    let /** @type {?} */ result;\n    if (monthBased) {\n      const /** @type {?} */ nbDaysBefore1stDayOfMonth =\n          new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const /** @type {?} */ today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const /** @type {?} */ firstThurs = getFirstThursdayOfYear(date.getFullYear());\n      const /** @type {?} */ thisThurs = getThursdayThisWeek(date);\n      const /** @type {?} */ diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset?: number) => string;\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatter} = {};\n/**\n * @param {?} format\n * @return {?}\n */\nfunction getDateFormatter(format: string): DateFormatter|null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let /** @type {?} */ formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter =\n          dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second padded (0-9)\n    case 'S':\n      formatter = dateGetter(DateType.Milliseconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.Milliseconds, 2);\n      break;\n    // = millisecond\n    case 'SSS':\n      formatter = dateGetter(DateType.Milliseconds, 3);\n      break;\n\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n/**\n * @param {?} timezone\n * @param {?} fallback\n * @return {?}\n */\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const /** @type {?} */ requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n/**\n * @param {?} date\n * @param {?} timezone\n * @param {?} reverse\n * @return {?}\n */\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const /** @type {?} */ reverseValue = reverse ? -1 : 1;\n  const /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\n  const /** @type {?} */ timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatDate} from '../i18n/format_date';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nexport const /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\nexport class DatePipe implements PipeTransform {\n/**\n * @param {?} locale\n */\nconstructor(\nprivate locale: string) {}\n/**\n * @param {?} value\n * @param {?=} format\n * @param {?=} timezone\n * @param {?=} locale\n * @return {?}\n */\ntransform(value: any, format = 'mediumDate', timezone?: string, locale?: string): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    let /** @type {?} */ date: Date;\n    if (isDate(value)) {\n      date = value;\n    } else if (!isNaN(value - parseFloat(value))) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => +val);\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return formatDate(date, format, locale || this.locale, timezone);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype.locale;\n}\n\n/**\n * \\@internal\n * @param {?} match\n * @return {?}\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = +(match[9] + match[10]);\n    tzMin = +(match[9] + match[11]);\n  }\n  dateSetter.call(date, +(match[1]), +(match[2]) - 1, +(match[3]));\n  const /** @type {?} */ h = +(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = +(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = +(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Update an HTML element styles.\n * \n * \\@howToUse \n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n * \n * \\@stable\n */\nexport class NgStyle implements DoCheck {\nprivate _ngStyle: {[key: string]: string};\nprivate _differ: KeyValueDiffer<string, string|number>;\n/**\n * @param {?} _differs\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _differs: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer2) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n/**\n * @param {?} nameAndUnit\n * @param {?} value\n * @return {?}\n */\n\nprivate _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    this._renderer.setStyle(this._ngEl.nativeElement, name, /** @type {?} */(( value as string)));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngStyle\": [{ type: Input },],\n};\n}\n\nfunction NgStyle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgStyle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgStyle.ctorParameters;\n/** @type {?} */\nNgStyle.propDecorators;\n/** @type {?} */\nNgStyle.prototype._ngStyle;\n/** @type {?} */\nNgStyle.prototype._differ;\n/** @type {?} */\nNgStyle.prototype._differs;\n/** @type {?} */\nNgStyle.prototype._ngEl;\n/** @type {?} */\nNgStyle.prototype._renderer;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\n\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\n\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\n\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngPlural\": [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const /** @type {?} */ isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\n\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngForOf\": [{ type: Input },],\n\"ngForTrackBy\": [{ type: Input },],\n\"ngForTemplate\": [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\n\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngIf\": [{ type: Input },],\n\"ngIfThen\": [{ type: Input },],\n\"ngIfElse\": [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\n\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitch\": [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngSwitchCase\": [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges, StaticProvider, Type, ViewContainerRef} from '@angular/core';\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n * \n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n * \n * ### Fine tune control\n * \n * You can control the component creation process by using the following optional attributes:\n * \n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n * \n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n * \n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n * \n * ### Syntax\n * \n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n * \n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n * \n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n * ## Example\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n * \n * A more complete example with additional options:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n * \n * \\@experimental\n */\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n   ngComponentOutlet: Type<any>;\n   ngComponentOutletInjector: Injector;\n   ngComponentOutletContent: any[][];\n   ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\nprivate _componentRef: ComponentRef<any>|null = null;\nprivate _moduleRef: NgModuleRef<any>|null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const /** @type {?} */ componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngComponentOutlet]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"ngComponentOutlet\": [{ type: Input },],\n\"ngComponentOutletInjector\": [{ type: Input },],\n\"ngComponentOutletContent\": [{ type: Input },],\n\"ngComponentOutletNgModuleFactory\": [{ type: Input },],\n};\n}\n\nfunction NgComponentOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentOutlet.ctorParameters;\n/** @type {?} */\nNgComponentOutlet.propDecorators;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutlet;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletInjector;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletContent;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n/** @type {?} */\nNgComponentOutlet.prototype._componentRef;\n/** @type {?} */\nNgComponentOutlet.prototype._moduleRef;\n/** @type {?} */\nNgComponentOutlet.prototype._viewContainerRef;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>|null;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>|null;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer2) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\n\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\n\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\n\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\n\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\n\nprivate _toggleClass(klass: string, enabled: boolean): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"klass\": [{ type: Input, args: ['class', ] },],\n\"ngClass\": [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\nimport {Plural, getLocalePluralCase} from './locale_data_api';\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\nfunction NgLocalization_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} value\n * @param {?=} locale\n * @return {?}\n */\nNgLocalization.prototype.getPluralCategory = function(value, locale) {};\n}\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * \n * \\@internal\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @param {?=} locale\n * @return {?}\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let /** @type {?} */ key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n */\nexport class NgLocaleLocalization extends NgLocalization {\n/**\n * @param {?} locale\n */\nconstructor( protected locale: string) { super(); }\n/**\n * @param {?} value\n * @param {?=} locale\n * @return {?}\n */\ngetPluralCategory(value: any, locale?: string): string {\n    const /** @type {?} */ plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NgLocaleLocalization_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLocaleLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLocaleLocalization.ctorParameters;\n/** @type {?} */\nNgLocaleLocalization.prototype.locale;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * \\@experimental\n */\nexport const /** @type {?} */ CURRENCIES: {[code: string]: (string | undefined)[]} = {\n  'AOA': [, 'Kz'],\n  'ARS': [, '$'],\n  'AUD': ['A$', '$'],\n  'BAM': [, 'KM'],\n  'BBD': [, '$'],\n  'BDT': [, '৳'],\n  'BMD': [, '$'],\n  'BND': [, '$'],\n  'BOB': [, 'Bs'],\n  'BRL': ['R$'],\n  'BSD': [, '$'],\n  'BWP': [, 'P'],\n  'BYN': [, 'р.'],\n  'BZD': [, '$'],\n  'CAD': ['CA$', '$'],\n  'CLP': [, '$'],\n  'CNY': ['CN¥', '¥'],\n  'COP': [, '$'],\n  'CRC': [, '₡'],\n  'CUC': [, '$'],\n  'CUP': [, '$'],\n  'CZK': [, 'Kč'],\n  'DKK': [, 'kr'],\n  'DOP': [, '$'],\n  'EGP': [, 'E£'],\n  'ESP': [, '₧'],\n  'EUR': ['€'],\n  'FJD': [, '$'],\n  'FKP': [, '£'],\n  'GBP': ['£'],\n  'GEL': [, '₾'],\n  'GIP': [, '£'],\n  'GNF': [, 'FG'],\n  'GTQ': [, 'Q'],\n  'GYD': [, '$'],\n  'HKD': ['HK$', '$'],\n  'HNL': [, 'L'],\n  'HRK': [, 'kn'],\n  'HUF': [, 'Ft'],\n  'IDR': [, 'Rp'],\n  'ILS': ['₪'],\n  'INR': ['₹'],\n  'ISK': [, 'kr'],\n  'JMD': [, '$'],\n  'JPY': ['¥'],\n  'KHR': [, '៛'],\n  'KMF': [, 'CF'],\n  'KPW': [, '₩'],\n  'KRW': ['₩'],\n  'KYD': [, '$'],\n  'KZT': [, '₸'],\n  'LAK': [, '₭'],\n  'LBP': [, 'L£'],\n  'LKR': [, 'Rs'],\n  'LRD': [, '$'],\n  'LTL': [, 'Lt'],\n  'LVL': [, 'Ls'],\n  'MGA': [, 'Ar'],\n  'MMK': [, 'K'],\n  'MNT': [, '₮'],\n  'MUR': [, 'Rs'],\n  'MXN': ['MX$', '$'],\n  'MYR': [, 'RM'],\n  'NAD': [, '$'],\n  'NGN': [, '₦'],\n  'NIO': [, 'C$'],\n  'NOK': [, 'kr'],\n  'NPR': [, 'Rs'],\n  'NZD': ['NZ$', '$'],\n  'PHP': [, '₱'],\n  'PKR': [, 'Rs'],\n  'PLN': [, 'zł'],\n  'PYG': [, '₲'],\n  'RON': [, 'lei'],\n  'RUB': [, '₽'],\n  'RUR': [, 'р.'],\n  'RWF': [, 'RF'],\n  'SBD': [, '$'],\n  'SEK': [, 'kr'],\n  'SGD': [, '$'],\n  'SHP': [, '£'],\n  'SRD': [, '$'],\n  'SSP': [, '£'],\n  'STD': [, 'Db'],\n  'SYP': [, '£'],\n  'THB': [, '฿'],\n  'TOP': [, 'T$'],\n  'TRY': [, '₺'],\n  'TTD': [, '$'],\n  'TWD': ['NT$', '$'],\n  'UAH': [, '₴'],\n  'USD': ['$'],\n  'UYU': [, '$'],\n  'VEF': [, 'Bs'],\n  'VND': ['₫'],\n  'XAF': ['FCFA'],\n  'XCD': ['EC$', '$'],\n  'XOF': ['CFA'],\n  'XPF': ['CFPF'],\n  'ZAR': [, 'R'],\n  'ZMW': [, 'ZK'],\n};\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n\nexport default [\n  'en',\n  [\n    ['a', 'p'],\n    ['AM', 'PM'],\n  ],\n  [\n    ['AM', 'PM'],\n    ,\n  ],\n  [\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  ],\n  ,\n  [\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n      'October', 'November', 'December'\n    ]\n  ],\n  , [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n  ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n  ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\n  [\n    '{1}, {0}',\n    ,\n    '{1} \\'at\\' {0}',\n  ],\n  ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n  ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar',\n  function(n: number):\n      number {\n        let /** @type {?} */ i = Math.floor(Math.abs(n)), /** @type {?} */ v = n.toString().replace(/^[^.]*\\.?/, '').length;\n        if (i === 1 && v === 0) return 1;\n        return 5;\n      }\n];\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * \\@experimental i18n support is experimental.\n */\nexport const /** @type {?} */ LOCALE_DATA: {[localeId: string]: any} = {};\n/**\n * Register global data to be used internally by Angular. See the\n * {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} data\n * @param {?=} extraData\n * @return {?}\n */\nexport function registerLocaleData(data: any, extraData?: any) {\n  const /** @type {?} */ localeId = data[LocaleDataIndex.LocaleId].toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport const enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencySymbol,\n  CurrencyName,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CURRENCIES} from './currencies';\nimport localeEn from './locale_en';\nimport {LOCALE_DATA, LocaleDataIndex, ExtraLocaleDataIndex} from './locale_data';\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle.Scientific = 3;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\nNumberFormatStyle[NumberFormatStyle.Scientific] = \"Scientific\";\n\nexport type Plural = number;\nexport let Plural: any = {};\nPlural.Zero = 0;\nPlural.One = 1;\nPlural.Two = 2;\nPlural.Few = 3;\nPlural.Many = 4;\nPlural.Other = 5;\nPlural[Plural.Zero] = \"Zero\";\nPlural[Plural.One] = \"One\";\nPlural[Plural.Two] = \"Two\";\nPlural[Plural.Few] = \"Few\";\nPlural[Plural.Many] = \"Many\";\nPlural[Plural.Other] = \"Other\";\n\nexport type FormStyle = number;\nexport let FormStyle: any = {};\nFormStyle.Format = 0;\nFormStyle.Standalone = 1;\nFormStyle[FormStyle.Format] = \"Format\";\nFormStyle[FormStyle.Standalone] = \"Standalone\";\n\nexport type TranslationWidth = number;\nexport let TranslationWidth: any = {};\nTranslationWidth.Narrow = 0;\nTranslationWidth.Abbreviated = 1;\nTranslationWidth.Wide = 2;\nTranslationWidth.Short = 3;\nTranslationWidth[TranslationWidth.Narrow] = \"Narrow\";\nTranslationWidth[TranslationWidth.Abbreviated] = \"Abbreviated\";\nTranslationWidth[TranslationWidth.Wide] = \"Wide\";\nTranslationWidth[TranslationWidth.Short] = \"Short\";\n\nexport type FormatWidth = number;\nexport let FormatWidth: any = {};\nFormatWidth.Short = 0;\nFormatWidth.Medium = 1;\nFormatWidth.Long = 2;\nFormatWidth.Full = 3;\nFormatWidth[FormatWidth.Short] = \"Short\";\nFormatWidth[FormatWidth.Medium] = \"Medium\";\nFormatWidth[FormatWidth.Long] = \"Long\";\nFormatWidth[FormatWidth.Full] = \"Full\";\n\nexport type NumberSymbol = number;\nexport let NumberSymbol: any = {};\nNumberSymbol.Decimal = 0;\nNumberSymbol.Group = 1;\nNumberSymbol.List = 2;\nNumberSymbol.PercentSign = 3;\nNumberSymbol.PlusSign = 4;\nNumberSymbol.MinusSign = 5;\nNumberSymbol.Exponential = 6;\nNumberSymbol.SuperscriptingExponent = 7;\nNumberSymbol.PerMille = 8;\nNumberSymbol.Infinity = 9;\nNumberSymbol.NaN = 10;\nNumberSymbol.TimeSeparator = 11;\nNumberSymbol.CurrencyDecimal = 12;\nNumberSymbol.CurrencyGroup = 13;\nNumberSymbol[NumberSymbol.Decimal] = \"Decimal\";\nNumberSymbol[NumberSymbol.Group] = \"Group\";\nNumberSymbol[NumberSymbol.List] = \"List\";\nNumberSymbol[NumberSymbol.PercentSign] = \"PercentSign\";\nNumberSymbol[NumberSymbol.PlusSign] = \"PlusSign\";\nNumberSymbol[NumberSymbol.MinusSign] = \"MinusSign\";\nNumberSymbol[NumberSymbol.Exponential] = \"Exponential\";\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = \"SuperscriptingExponent\";\nNumberSymbol[NumberSymbol.PerMille] = \"PerMille\";\nNumberSymbol[NumberSymbol.Infinity] = \"Infinity\";\nNumberSymbol[NumberSymbol.NaN] = \"NaN\";\nNumberSymbol[NumberSymbol.TimeSeparator] = \"TimeSeparator\";\nNumberSymbol[NumberSymbol.CurrencyDecimal] = \"CurrencyDecimal\";\nNumberSymbol[NumberSymbol.CurrencyGroup] = \"CurrencyGroup\";\n\nexport type WeekDay = number;\nexport let WeekDay: any = {};\nWeekDay.Sunday = 0;\nWeekDay.Monday = 1;\nWeekDay.Tuesday = 2;\nWeekDay.Wednesday = 3;\nWeekDay.Thursday = 4;\nWeekDay.Friday = 5;\nWeekDay.Saturday = 6;\nWeekDay[WeekDay.Sunday] = \"Sunday\";\nWeekDay[WeekDay.Monday] = \"Monday\";\nWeekDay[WeekDay.Tuesday] = \"Tuesday\";\nWeekDay[WeekDay.Wednesday] = \"Wednesday\";\nWeekDay[WeekDay.Thursday] = \"Thursday\";\nWeekDay[WeekDay.Friday] = \"Friday\";\nWeekDay[WeekDay.Saturday] = \"Saturday\";\n\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleId(locale: string): string {\n  return findLocaleData(locale)[LocaleDataIndex.LocaleId];\n}\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ amPmData = /** @type {?} */(( <[\n    string, string\n  ][][]>[data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]]));\n  const /** @type {?} */ amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ daysData = /** @type {?} */((\n      <string[][][]>[data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]]));\n  const /** @type {?} */ days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ monthsData = /** @type {?} */((\n      <string[][][]>[data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]]));\n  const /** @type {?} */ months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ erasData = /** @type {?} */(( <[string, string][]>data[LocaleDataIndex.Eras]));\n  return getLastDefinedValue(erasData, width);\n}\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.FirstDayOfWeek];\n}\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.WeekendRange];\n}\n/**\n * Date format that depends on the locale.\n * \n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n * \n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n * \n * - `long` should contain year, long-month, day.\n * \n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n * \n * - `medium` should contain year, abbreviated-month (MMM), day.\n * \n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n * \n * - `short` should contain year, numeric-month (MM/M), and day.\n * \n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.DateFormat][width];\n}\n/**\n * Time format that depends on the locale.\n * \n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n * \n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.TimeFormat][width];\n}\n/**\n * Date-time format that depends on the locale.\n * \n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n * \n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n * \n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ dateTimeFormatData = /** @type {?} */(( <string[]>data[LocaleDataIndex.DateTimeFormat]));\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {\\@link NumberSymbol} for more information.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} symbol\n * @return {?}\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  const /** @type {?} */ res = data[LocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n/**\n * Number format that depends on the locale.\n * \n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n * \n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n * \n * Here are the special characters used in number patterns:\n * \n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n * \n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} type\n * @return {?}\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.NumberFormats][type];\n}\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencySymbol] || null;\n}\n/**\n * The name of the currency for the main country using this locale (e.g. USD for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyName] || null;\n}\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {\\@link NgPlural} for more information.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocalePluralCase(locale: string): (value: number) => Plural {\n  const /** @type {?} */ data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction checkFullData(data: any) {\n  if (!data[LocaleDataIndex.ExtraData]) {\n    throw new Error(\n        `Missing extra locale data for the locale \"${data[LocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n * \n * Note: this is only available if you load the full locale data.\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  checkFullData(data);\n  const /** @type {?} */ rules = data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {\\@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n * \n * Note: this is only available if you load the full locale data.\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\n * data.\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const /** @type {?} */ data = findLocaleData(locale);\n  checkFullData(data);\n  const /** @type {?} */ dayPeriodsData = /** @type {?} */(( <string[][][]>[\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ]));\n  const /** @type {?} */ dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Returns the first value that is defined in an array, going backwards.\n * \n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\n * add the first one to the locale data arrays, the other ones are only defined when different.\n * We use this function to retrieve the first defined value.\n * \n * \\@experimental i18n support is experimental.\n * @template T\n * @param {?} data\n * @param {?} index\n * @return {?}\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let /** @type {?} */ i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * A representation of the time with hours and minutes\n *\n * @experimental i18n support is experimental.\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n/**\n * Extract the hours and minutes from a string like \"15:45\"\n * @param {?} time\n * @return {?}\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n/**\n * Finds the locale data for a locale id\n * \n * \\@experimental i18n support is experimental.\n * @param {?} locale\n * @return {?}\n */\nexport function findLocaleData(locale: string): any {\n  const /** @type {?} */ normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n\n  let /** @type {?} */ match = LOCALE_DATA[normalizedLocale];\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const /** @type {?} */ parentLocale = normalizedLocale.split('-')[0];\n  match = LOCALE_DATA[parentLocale];\n\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Return the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: $, US$, or USD)\n * \n * \\@internal\n * @param {?} code\n * @param {?} format\n * @return {?}\n */\nexport function findCurrencySymbol(code: string, format: 'wide' | 'narrow') {\n  const /** @type {?} */ currency = CURRENCIES[code] || {};\n  const /** @type {?} */ symbol = currency[0] || code;\n  return format === 'wide' ? symbol : currency[1] || symbol;\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL for storing application location data.\n * \\@description \n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n * \n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n * \n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class PathLocationStrategy extends LocationStrategy {\nprivate _baseHref: string;\n/**\n * @param {?} _platformLocation\n * @param {?=} href\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    return Location.joinWithSlash(this._baseHref, internal);\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    const /** @type {?} */ pathname = this._platformLocation.pathname +\n        Location.normalizeQueryParams(this._platformLocation.search);\n    const /** @type {?} */ hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction PathLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nPathLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPathLocationStrategy.ctorParameters;\n/** @type {?} */\nPathLocationStrategy.prototype._baseHref;\n/** @type {?} */\nPathLocationStrategy.prototype._platformLocation;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {PlatformLocation,LOCATION_INITIALIZED,LocationChangeEvent,LocationChangeListener} from './platform_location';\nexport {LocationStrategy,APP_BASE_HREF} from './location_strategy';\nexport {HashLocationStrategy} from './hash_location_strategy';\nexport {PathLocationStrategy} from './path_location_strategy';\nexport {PopStateEvent,Location} from './location';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL hash for storing application location data.\n * \\@description \n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n * \n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class HashLocationStrategy extends LocationStrategy {\nprivate _baseHref: string = '';\n/**\n * @param {?} _platformLocation\n * @param {?=} _baseHref\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let /** @type {?} */ path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction HashLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nHashLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHashLocationStrategy.ctorParameters;\n/** @type {?} */\nHashLocationStrategy.prototype._baseHref;\n/** @type {?} */\nHashLocationStrategy.prototype._platformLocation;\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable} from '@angular/core';\n\nimport {LocationStrategy} from './location_strategy';\n/**\n * \\@experimental\n * @record\n */\nexport function PopStateEvent() {}\n\n\nfunction PopStateEvent_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nPopStateEvent.prototype.pop;\n/** @type {?|undefined} */\nPopStateEvent.prototype.type;\n/** @type {?|undefined} */\nPopStateEvent.prototype.url;\n}\n\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  type?: string;\n  url?: string;\n}\n/**\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n * \\@description \n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n * \n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n * \n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n * \n * ### Example\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \\@stable\n */\nexport class Location {\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\n/**\n * \\@internal\n */\n_baseHref: string;\n/**\n * \\@internal\n */\n_platformStrategy: LocationStrategy;\n/**\n * @param {?} platformStrategy\n */\nconstructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const /** @type {?} */ browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'type': ev.type,\n      });\n    });\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n/**\n * Normalizes the given path and compares to the current normalized path.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nisCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n/**\n * Given a string representing a URL, returns the normalized URL path without leading or\n * trailing slashes.\n * @param {?} url\n * @return {?}\n */\nnormalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n/**\n * Given a string representing a URL, returns the platform-specific external URL path.\n * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n * @param {?} url\n * @return {?}\n */\nprepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and pushes a\n * new item onto the platform's history.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\ngo(path: string, query: string = ''): void {\n    this._platformStrategy.pushState(null, '', path, query);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and replaces\n * the top item on the platform's history stack.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nreplaceState(path: string, query: string = ''): void {\n    this._platformStrategy.replaceState(null, '', path, query);\n  }\n/**\n * Navigates forward in the platform's history.\n * @return {?}\n */\nforward(): void { this._platformStrategy.forward(); }\n/**\n * Navigates back in the platform's history.\n * @return {?}\n */\nback(): void { this._platformStrategy.back(); }\n/**\n * Subscribe to the platform's `popState` events.\n * @param {?} onNext\n * @param {?=} onThrow\n * @param {?=} onReturn\n * @return {?}\n */\nsubscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n/**\n * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n * is.\n * @param {?} params\n * @return {?}\n */\n\npublic static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n/**\n * Given 2 parts of a url, join them with a slash if needed.\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\n\npublic static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let /** @type {?} */ slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n/**\n * If url has a trailing slash, remove it, otherwise return url as is. This\n * method looks for the first occurence of either #, ?, or the end of the\n * line as `/` characters after any of these should not be replaced.\n * @param {?} url\n * @return {?}\n */\n\npublic static stripTrailingSlash(url: string): string {\n    const /** @type {?} */ match = url.match(/#|\\?|$/);\n    const /** @type {?} */ pathEndIdx = match && match.index || url.length;\n    const /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: LocationStrategy, },\n];\n}\n\nfunction Location_tsickle_Closure_declarations() {\n/** @type {?} */\nLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocation.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._subject;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._baseHref;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._platformStrategy;\n}\n\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NumberFormatStyle, NumberSymbol, getLocaleNumberFormat, getLocaleNumberSymbol} from './locale_data_api';\n\nexport const /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst /** @type {?} */ MAX_DIGITS = 22;\nconst /** @type {?} */ DECIMAL_SEP = '.';\nconst /** @type {?} */ ZERO_CHAR = '0';\nconst /** @type {?} */ PATTERN_SEP = ';';\nconst /** @type {?} */ GROUP_SEP = ',';\nconst /** @type {?} */ DIGIT_CHAR = '#';\nconst /** @type {?} */ CURRENCY_CHAR = '¤';\nconst /** @type {?} */ PERCENT_CHAR = '%';\n\n/** @internal */\nexport type FormatNumberRes = {\n  str: string | null,\n  error?: string\n};\n/**\n * Transform a number to a locale string based on a style and a format\n * \n * \\@internal\n * @param {?} value\n * @param {?} locale\n * @param {?} style\n * @param {?=} digitsInfo\n * @param {?=} currency\n * @return {?}\n */\nexport function formatNumber(\n    value: number | string, locale: string, style: NumberFormatStyle, digitsInfo?: string | null,\n    currency: string | null = null): FormatNumberRes {\n  const /** @type {?} */ res: FormatNumberRes = {str: null};\n  const /** @type {?} */ format = getLocaleNumberFormat(locale, style);\n  let /** @type {?} */ num;\n\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(+value - parseFloat(value))) {\n    num = +value;\n  } else if (typeof value !== 'number') {\n    res.error = `${value} is not a number`;\n    return res;\n  } else {\n    num = value;\n  }\n\n  if (style === NumberFormatStyle.Percent) {\n    num = num * 100;\n  }\n\n  const /** @type {?} */ numStr = Math.abs(num) + '';\n  const /** @type {?} */ pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  let /** @type {?} */ formattedText = '';\n  let /** @type {?} */ isZero = false;\n\n  if (!isFinite(num)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    const /** @type {?} */ parsedNumber = parseNumber(numStr);\n\n    let /** @type {?} */ minInt = pattern.minInt;\n    let /** @type {?} */ minFraction = pattern.minFrac;\n    let /** @type {?} */ maxFraction = pattern.maxFrac;\n\n    if (digitsInfo) {\n      const /** @type {?} */ parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        res.error = `${digitsInfo} is not a valid digit info`;\n        return res;\n      }\n      const /** @type {?} */ minIntPart = parts[1];\n      const /** @type {?} */ minFractionPart = parts[3];\n      const /** @type {?} */ maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n\n    roundNumber(parsedNumber, minFraction, maxFraction);\n\n    let /** @type {?} */ digits = parsedNumber.digits;\n    let /** @type {?} */ integerLen = parsedNumber.integerLen;\n    const /** @type {?} */ exponent = parsedNumber.exponent;\n    let /** @type {?} */ decimals = [];\n    isZero = digits.every(d => !d);\n\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    const /** @type {?} */ groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n\n    const /** @type {?} */ groupSymbol = currency ? NumberSymbol.CurrencyGroup : NumberSymbol.Group;\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n\n    // append the decimal digits\n    if (decimals.length) {\n      const /** @type {?} */ decimalSymbol = currency ? NumberSymbol.CurrencyDecimal : NumberSymbol.Decimal;\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n\n  if (num < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n\n  if (style === NumberFormatStyle.Currency && currency !== null) {\n    res.str = formattedText\n                  .replace(CURRENCY_CHAR, currency)\n                  // if we have 2 time the currency character, the second one is ignored\n                  .replace(CURRENCY_CHAR, '');\n    return res;\n  }\n\n  if (style === NumberFormatStyle.Percent) {\n    res.str = formattedText.replace(\n        new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n    return res;\n  }\n\n  res.str = formattedText;\n  return res;\n}\n/**\n * @record\n */\nfunction ParsedNumberFormat() {}\n\n\nfunction ParsedNumberFormat_tsickle_Closure_declarations() {\n/** @type {?} */\nParsedNumberFormat.prototype.minInt;\n/** @type {?} */\nParsedNumberFormat.prototype.minFrac;\n/** @type {?} */\nParsedNumberFormat.prototype.maxFrac;\n/** @type {?} */\nParsedNumberFormat.prototype.posPre;\n/** @type {?} */\nParsedNumberFormat.prototype.posSuf;\n/** @type {?} */\nParsedNumberFormat.prototype.negPre;\n/** @type {?} */\nParsedNumberFormat.prototype.negSuf;\n/** @type {?} */\nParsedNumberFormat.prototype.gSize;\n/** @type {?} */\nParsedNumberFormat.prototype.lgSize;\n}\n\n\ninterface ParsedNumberFormat {\n  minInt: number;\n  // the minimum number of digits required in the fraction part of the number\n  minFrac: number;\n  // the maximum number of digits required in the fraction part of the number\n  maxFrac: number;\n  // the prefix for a positive number\n  posPre: string;\n  // the suffix for a positive number\n  posSuf: string;\n  // the prefix for a negative number (e.g. `-` or `(`))\n  negPre: string;\n  // the suffix for a negative number (e.g. `)`)\n  negSuf: string;\n  // number of digits in each group of separated digits\n  gSize: number;\n  // number of digits in the last group of digits before the decimal separator\n  lgSize: number;\n}\n/**\n * @param {?} format\n * @param {?=} minusSign\n * @return {?}\n */\nfunction parseNumberFormat(format: string, minusSign = '-'): ParsedNumberFormat {\n  const /** @type {?} */ p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0\n  };\n\n  const /** @type {?} */ patternParts = format.split(PATTERN_SEP);\n  const /** @type {?} */ positive = patternParts[0];\n  const /** @type {?} */ negative = patternParts[1];\n\n  const /** @type {?} */ positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n      positive.split(DECIMAL_SEP) :\n      [\n        positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n        positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n      ], /** @type {?} */\n        integer = positiveParts[0], /** @type {?} */ fraction = positiveParts[1] || '';\n\n  p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n\n  for (let /** @type {?} */ i = 0; i < fraction.length; i++) {\n    const /** @type {?} */ ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n\n  const /** @type {?} */ groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n\n  if (negative) {\n    const /** @type {?} */ trunkLen = positive.length - p.posPre.length - p.posSuf.length, /** @type {?} */\n          pos = negative.indexOf(DIGIT_CHAR);\n\n    p.negPre = negative.substr(0, pos).replace(/'/g, '');\n    p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n\n  return p;\n}\n/**\n * @record\n */\nfunction ParsedNumber() {}\n\n\nfunction ParsedNumber_tsickle_Closure_declarations() {\n/** @type {?} */\nParsedNumber.prototype.digits;\n/** @type {?} */\nParsedNumber.prototype.exponent;\n/** @type {?} */\nParsedNumber.prototype.integerLen;\n}\n\n\ninterface ParsedNumber {\n  // an array of digits containing leading zeros as necessary\n  digits: number[];\n  // the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n  exponent: number;\n  // the number of the digits in `d` that are to the left of the decimal point\n  integerLen: number;\n}\n/**\n * Parse a number (as a string)\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n * @param {?} numStr\n * @return {?}\n */\nfunction parseNumber(numStr: string): ParsedNumber {\n  let /** @type {?} */ exponent = 0, /** @type {?} */ digits, /** @type {?} */ integerLen;\n  let /** @type {?} */ i, /** @type {?} */ j, /** @type {?} */ zeros;\n\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n  }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = +numStr.charAt(i);\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n\n  return {digits, exponent, integerLen};\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n * @param {?} parsedNumber\n * @param {?} minFrac\n * @param {?} maxFrac\n * @return {?}\n */\nfunction roundNumber(parsedNumber: ParsedNumber, minFrac: number, maxFrac: number) {\n  if (minFrac > maxFrac) {\n    throw new Error(\n        `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n  }\n\n  let /** @type {?} */ digits = parsedNumber.digits;\n  let /** @type {?} */ fractionLen = digits.length - parsedNumber.integerLen;\n  const /** @type {?} */ fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n\n  // The index of the digit to where rounding is to occur\n  let /** @type {?} */ roundAt = fractionSize + parsedNumber.integerLen;\n  let /** @type {?} */ digit = digits[roundAt];\n\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let /** @type {?} */ j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, roundAt = fractionSize + 1);\n    digits[0] = 0;\n    for (let /** @type {?} */ i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let /** @type {?} */ k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const /** @type {?} */ carry = digits.reduceRight(function(carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d % 10;\n    return Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\n/**\n * \\@internal\n * @param {?} text\n * @return {?}\n */\nexport function parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const /** @type {?} */ cookie of cookieStr.split(';')) {\n    const /** @type {?} */ eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n"],"names":["COMMON_PIPES","AsyncPipe","UpperCasePipe","LowerCasePipe","SlicePipe","CommonModule","decorators","type","_angular_core","NgModule","args","DeprecatedI18NPipesModule","value","isEmpty","locale","this","_locale","error","invalidPipeArgumentError","CurrencyPipe","str","prototype","transform","currencyCode","display","digits","console","warn","currency","findCurrencySymbol","Pipe","name","I18nSelectPipe","mapping","hasOwnProperty","I18nPluralPipe","pluralMap","key","getPluralCategory","Object","keys","_localization","replace","_INTERPOLATION_REGEXP","toString","TitleCasePipe","toUpperCase","DeprecatedDecimalPipe","formatNumber$$1","NumberFormatStyle","Decimal","DeprecatedPercentPipe","Percent","DeprecatedCurrencyPipe","symbolDisplay","Currency","_ref","_latestValue","obj","_obj","_latestReturnedValue","_subscribe","_promiseStrategy","async","markForCheck","NumberFormatter","format","num","style","opts","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","_a","currencyAsSymbol","options","toLowerCase","undefined","currencyDisplay","Intl","NumberFormat","DATE_FORMATS_SPLIT$1","PATTERN_ALIASES","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","jms","jm","DATE_FORMATS$1","yyyy","yy","y","MMMM","MMM","MM","M","LLLL","L","dd","d","h","hourExtractor","hour12Modify","jj","ss","digitModifier","s","sss","EEE","EE","a","hourClockExtractor","DeprecatedDatePipe","pattern","date","split","map","val","parseInt","m","Date","isDate","_ALIASES","medium","short","longDate","mediumDate","shortDate","mediumTime","pure","NgTemplateOutlet","ngOnChanges","changes","recreateView","_shouldRecreateView","_viewRef","_viewContainerRef","remove","indexOf","_hasContextShapeChanged","ctxChange","prevCtxKeys","previousValue","currCtxKeys","currentValue","length","_i","currCtxKeys_1","propName","ctx","Directive","selector","COMMON_DIRECTIVES","NgClass","NgComponentOutlet","NgIf","NAMED_FORMATS","DATE_FORMATS_SPLIT","ZoneWidth","Short","ShortGMT","Long","Extended","DateType","FullYear","Month","Hours","Minutes","Seconds","Milliseconds","Day","DATE_FORMATS","DatePipe","timezone","isDate$1","match","ISO8601_DATE_REGEX","isoStringToDate","formatDate","NgStyle","_differs","_ngEl","_renderer","defineProperty","set","v","_differ","find","create","configurable","diff","_ngStyle","_setStyle","nameAndUnit","unit","setStyle","nativeElement","ElementRef","NgPlural","_updateView","view","_activeView","NgPluralCase","template","viewContainer","ngPlural","isANumber","isNaN","Number","addCase","SwitchView","TemplateRef","ctorParameters","NgForOf","_viewContainer","_template","get","_trackByFn","fn","e","_applyChanges","_this","insertTuples","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","createEmbeddedView","NgForOfContext","ngForOf","tuple","RecordViewTuple","push","move","i","_perViewChange","record","context","$implicit","propDecorators","_thenTemplateRef","_context","ngIf","condition","_thenViewRef","_elseViewRef","clear","_elseTemplateRef","ngIfElse","Input","NgIfContext","created","_created","NgSwitch","_defaultUsed","newValue","_updateDefaultCases","_matchCase","_lastCasesMatched","useDefault","_defaultViews","defaultView","enforceState","NgSwitchCase","ngDoCheck","_view","ngSwitch","ngSwitchCase","NgSwitchDefault","templateRef","_addDefault","_componentRef","ngComponentOutlet","elInjector","ngComponentOutletInjector","parentInjector","_moduleRef","destroy","ngComponentOutletNgModuleFactory","parentModule","NgModuleRef","injector","componentFactoryResolver","ngOnDestroy","_iterableDiffers","_keyValueDiffers","_applyInitialClasses","_applyClasses","_rawClass","_cleanupClasses","_iterableDiffer","_keyValueDiffer","iterableChanges","keyValueChanges","forEachRemovedItem","_applyIterableChanges","rawClassVal","isCleanup","Array","isArray","Set","_toggleClass","klass","enabled","trim","addClass","removeClass","KeyValueDiffers","IterableDiffers","NgLocaleLocalization","plural","getLocalePluralCase","Plural","Zero","One","Few","CURRENCIES","AOA","ARS","AUD","BAM","BBD","BDT","BMD","BND","BOB","BRL","BSD","BWP","BYN","BZD","CAD","CLP","CNY","COP","CRC","CUC","CUP","CZK","DKK","DOP","EGP","ESP","EUR","FJD","FKP","GBP","GEL","GIP","GNF","GTQ","GYD","HKD","HNL","HRK","HUF","IDR","ILS","INR","ISK","JMD","JPY","KHR","KMF","KPW","KRW","KYD","KZT","LAK","LBP","LKR","LRD","LTL","LVL","MGA","MMK","MNT","MUR","MXN","MYR","NAD","NGN","NIO","NOK","NPR","NZD","PHP","PKR","PLN","PYG","RON","RUB","RUR","RWF","SBD","SEK","SGD","SHP","SRD","SSP","STD","SYP","THB","TOP","TRY","TTD","TWD","UAH","USD","VEF","localeEn","Scientific","Two","Many","Other","FormStyle","Format","Standalone","TranslationWidth","Narrow","Abbreviated","Wide","FormatWidth","Medium","Full","NumberSymbol","Group","List","PercentSign","PlusSign","MinusSign","Exponential","SuperscriptingExponent","PerMille","Infinity","NaN","TimeSeparator","CurrencyDecimal","CurrencyGroup","WeekDay","Sunday","Monday","Tuesday","Wednesday","PathLocationStrategy","_platformLocation","href","__extends","_super","onHashChange","forward","back","LocationStrategy","_baseHref","HashLocationStrategy","getBaseHref","replaceState","state","title","path","queryParams","parseFloat","pipe","minInt","minFraction","maxFraction","parts","NUMBER_FORMAT_REGEXP","Error","parseIntAutoRadix","extendStatics","setPrototypeOf","__proto__","b","p","Location","platformStrategy","_subject","EventEmitter","_platformStrategy","url","joinWithSlash","start","end","slashes","endsWith","startsWith","pathEndIdx","index","droppedSlashIdx","slice","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","inner","dateFormatter","cacheKey","DATE_FORMATTER_CACHE","exec","_format","concat","pop","res","getLocaleNumberFormat","numStr","Math","abs","parseNumberFormat","getLocaleNumberSymbol","formattedText","isZero","isFinite","parsedNumber","parseNumber","minFrac","maxFrac","digitsInfo","minIntPart","minFractionPart","maxFractionPart","integerLen","exponent","unshift","decimals","splice","groups","lgSize","gSize","join","groupSymbol","decimalSymbol","negPre","negSuf","posPre","posSuf","CURRENCY_CHAR","minusSign","patternParts","PATTERN_SEP","positive","negative","positiveParts","DECIMAL_SEP","substring","lastIndexOf","ZERO_CHAR","integer","fraction","substr","DIGIT_CHAR","ch","charAt","GROUP_SEP","trunkLen","pos","search","zeros","j","roundNumber","fractionLen","roundAt","max","fractionSize","digit","k","parseCookieValue","cookieStr","encodeURIComponent","cookie","namedFormat","getNamedFormat","part","dateTimezoneOffset","getTimezoneOffset","timezoneToOffset","convertTimezoneToLocal","localeId","getLocaleId","formatValue","getLocaleDateFormat","getLocaleTimeFormat","shortTime","formatDateTime","getLocaleDateTimeFormat","longTime","fullTime","padNumber","negWrap","neg","dateGetter","size","offset","getDatePart","getFullYear","getMonth","getDate","getHours","getMinutes","getDateTranslation","width","form","extended","TranslationType","Months","getLocaleMonthNames","Days","DayPeriods","currentHours_1","currentMinutes_1","result_1","dayPeriods_1","getLocaleExtraDayPeriods","rules","forEach","rule","hoursFrom","hours","minutesFrom","minutes","_b","hoursTo","minutesTo","timeZoneGetter","zone","floor","ceil","weekGetter","monthBased","result","nbDaysBefore1stDayOfMonth","getDay","today","round","getDateFormatter","formatter","dateStrGetter","Eras","symbol","data","findLocaleData","getLocaleExtraDayPeriodRules","LOCALE_DATA","normalizedLocale","cases","ngLocalization","exports","module","factory","require"],"mappings":"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"}