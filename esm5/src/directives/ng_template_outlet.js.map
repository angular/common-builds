{"version":3,"file":"ng_template_outlet.js","sourceRoot":"","sources":["../../../../../../packages/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAmB,KAAK,EAA0C,WAAW,EAAE,gBAAgB,EAAC,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCrI,0BAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;KAAI;;;;;IAE3D,sCAAW;;;;IAAX,UAAY,OAAsB;QAChC,qBAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAEvD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC9E;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CACrD,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;aAC1D;SACF;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;aAC3D;SACF;KACF;;;;;;;;;;;;;IAYO,8CAAmB;;;;;;;;;;;;cAAC,OAAsB;QAChD,qBAAM,SAAS,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;QACrD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC;;;;;;IAGzF,kDAAuB;;;;cAAC,SAAuB;QACrD,qBAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC;QAC/D,qBAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;QAE9D,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9C,GAAG,CAAC,CAAiB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW;gBAA3B,IAAI,QAAQ,oBAAA;gBACf,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,IAAI,CAAC;iBACb;aACF;YACD,MAAM,CAAC,KAAK,CAAC;SACd;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;SACb;;;;;;IAGK,iDAAsB;;;;cAAC,GAAW;QACxC,GAAG,CAAC,CAAiB,UAAgB,EAAhB,KAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhB,cAAgB,EAAhB,IAAgB;YAAhC,IAAI,QAAQ,SAAA;YACf,mBAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAC,CAAC,QAAQ,CAAC,GAAG,mBAAM,IAAI,CAAC,uBAAuB,EAAC,CAAC,QAAQ,CAAC,CAAC;SACxF;;;gBA/DJ,SAAS,SAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC;;;;gBA1BqD,gBAAgB;;;4CA8B7G,KAAK;qCAEL,KAAK;;2BAxCR;;SAmCa,gBAAgB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * Note: using the key `$implicit` in the context object will set its value as default.\n *\n * ## Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n *\n */\n@Directive({selector: '[ngTemplateOutlet]'})\nexport class NgTemplateOutlet implements OnChanges {\n  private _viewRef: EmbeddedViewRef<any>;\n\n  @Input() public ngTemplateOutletContext: Object;\n\n  @Input() public ngTemplateOutlet: TemplateRef<any>;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if:\n   * - templateRef has changed\n   * - context has changes\n   *\n   * We mark context object as changed when the corresponding object\n   * shape changes (new properties are added or existing properties are removed).\n   * In other words we consider context with the same properties as \"the same\" even\n   * if object reference changes (see https://github.com/angular/angular/issues/13407).\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n\n  private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private _updateExistingContext(ctx: Object): void {\n    for (let propName of Object.keys(ctx)) {\n      (<any>this._viewRef.context)[propName] = (<any>this.ngTemplateOutletContext)[propName];\n    }\n  }\n}\n"]}