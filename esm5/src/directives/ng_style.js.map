{"version":3,"file":"ng_style.js","sourceRoot":"","sources":["../../../../../../packages/common/src/directives/ng_style.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAW,UAAU,EAAE,KAAK,EAAmC,eAAe,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;IA6B/H,iBACY,UAAmC,KAAiB,EAAU,SAAoB;QAAlF,aAAQ,GAAR,QAAQ;QAA2B,UAAK,GAAL,KAAK,CAAY;QAAU,cAAS,GAAT,SAAS,CAAW;KAAI;0BAG9F,4BAAO;;;;;kBAAC,CAA0B;YACpC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;aAC/C;;;;;;;;IAGH,2BAAS;;;IAAT;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,qBAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC7B;SACF;KACF;;;;;IAEO,+BAAa;;;;cAAC,OAA+C;;QACnE,OAAO,CAAC,kBAAkB,CAAC,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,EAAhC,CAAgC,CAAC,CAAC;QACzE,OAAO,CAAC,gBAAgB,CAAC,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,EAA/C,CAA+C,CAAC,CAAC;QACtF,OAAO,CAAC,kBAAkB,CAAC,UAAC,MAAM,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,EAA/C,CAA+C,CAAC,CAAC;;;;;;;IAGlF,2BAAS;;;;;cAAC,WAAmB,EAAE,KAAmC;QACxE,iCAAO,YAAI,EAAE,YAAI,CAA2B;QAC5C,KAAK,GAAG,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,KAAG,KAAK,GAAG,IAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QAE1D,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,oBAAE,KAAe,EAAC,CAAC;SAC1E;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SAC5D;;;gBAvCJ,SAAS,SAAC,EAAC,QAAQ,EAAE,WAAW,EAAC;;;;gBAxB8C,eAAe;gBAAnE,UAAU;gBAA2D,SAAS;;;4BAgCvG,KAAK;;kBAxCR;;SAiCa,OAAO","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * Update an HTML element styles.\n *\n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n *\n *\n */\n@Directive({selector: '[ngStyle]'})\nexport class NgStyle implements DoCheck {\n  private _ngStyle: {[key: string]: string};\n  private _differ: KeyValueDiffer<string, string|number>;\n\n  constructor(\n      private _differs: KeyValueDiffers, private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input()\n  set ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n\n  private _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    if (value != null) {\n      this._renderer.setStyle(this._ngEl.nativeElement, name, value as string);\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name);\n    }\n  }\n}\n"]}