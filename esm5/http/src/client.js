/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { concatMap, filter, map } from 'rxjs/operators';
import { HttpHandler } from './backend';
import { HttpHeaders } from './headers';
import { HttpParams } from './params';
import { HttpRequest } from './request';
import { HttpResponse } from './response';
/**
 * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. Basically, this clones the object and adds the body.
 */
function addBody(options, body) {
    return {
        body: body,
        headers: options.headers,
        observe: options.observe,
        params: options.params,
        reportProgress: options.reportProgress,
        responseType: options.responseType,
        withCredentials: options.withCredentials,
    };
}
/**
 * Perform HTTP requests.
 *
 * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies according to which
 * signature is called (mainly the values of `observe` and `responseType`).
 *
 *
 */
var HttpClient = /** @class */ (function () {
    function HttpClient(handler) {
        this.handler = handler;
    }
    /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     */
    /**
       * Constructs an `Observable` for a particular HTTP request that, when subscribed,
       * fires the request through the chain of registered interceptors and on to the
       * server.
       *
       * This method can be called in one of two ways. Either an `HttpRequest`
       * instance can be passed directly as the only parameter, or a method can be
       * passed as the first parameter, a string URL as the second, and an
       * options hash as the third.
       *
       * If a `HttpRequest` object is passed directly, an `Observable` of the
       * raw `HttpEvent` stream will be returned.
       *
       * If a request is instead built by providing a URL, the options object
       * determines the return type of `request()`. In addition to configuring
       * request parameters such as the outgoing headers and/or the body, the options
       * hash specifies two key pieces of information about the request: the
       * `responseType` and what to `observe`.
       *
       * The `responseType` value determines how a successful response body will be
       * parsed. If `responseType` is the default `json`, a type interface for the
       * resulting object may be passed as a type parameter to `request()`.
       *
       * The `observe` value determines the return type of `request()`, based on what
       * the consumer is interested in observing. A value of `events` will return an
       * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
       * including progress events by default. A value of `response` will return an
       * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
       * depends on the `responseType` and any optionally provided type parameter.
       * A value of `body` will return an `Observable<T>` with the same `T` body type.
       */
    HttpClient.prototype.request = /**
       * Constructs an `Observable` for a particular HTTP request that, when subscribed,
       * fires the request through the chain of registered interceptors and on to the
       * server.
       *
       * This method can be called in one of two ways. Either an `HttpRequest`
       * instance can be passed directly as the only parameter, or a method can be
       * passed as the first parameter, a string URL as the second, and an
       * options hash as the third.
       *
       * If a `HttpRequest` object is passed directly, an `Observable` of the
       * raw `HttpEvent` stream will be returned.
       *
       * If a request is instead built by providing a URL, the options object
       * determines the return type of `request()`. In addition to configuring
       * request parameters such as the outgoing headers and/or the body, the options
       * hash specifies two key pieces of information about the request: the
       * `responseType` and what to `observe`.
       *
       * The `responseType` value determines how a successful response body will be
       * parsed. If `responseType` is the default `json`, a type interface for the
       * resulting object may be passed as a type parameter to `request()`.
       *
       * The `observe` value determines the return type of `request()`, based on what
       * the consumer is interested in observing. A value of `events` will return an
       * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
       * including progress events by default. A value of `response` will return an
       * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
       * depends on the `responseType` and any optionally provided type parameter.
       * A value of `body` will return an `Observable<T>` with the same `T` body type.
       */
    function (first, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var req;
        // Firstly, check whether the primary argument is an instance of `HttpRequest`.
        if (first instanceof HttpRequest) {
            // It is. The other arguments must be undefined (per the signatures) and can be
            // ignored.
            req = first;
        }
        else {
            // It's a string, so it represents a URL. Construct a request based on it,
            // and incorporate the remaining arguments (assuming GET unless a method is
            // provided.
            // Figure out the headers.
            var headers = undefined;
            if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
            }
            else {
                headers = new HttpHeaders(options.headers);
            }
            // Sort out parameters.
            var params = undefined;
            if (!!options.params) {
                if (options.params instanceof HttpParams) {
                    params = options.params;
                }
                else {
                    params = new HttpParams({ fromObject: options.params });
                }
            }
            // Construct the request.
            req = new HttpRequest(first, (url), (options.body !== undefined ? options.body : null), {
                headers: headers,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials,
            });
        }
        // Start with an Observable.of() the initial request, and run the handler (which
        // includes all interceptors) inside a concatMap(). This way, the handler runs
        // inside an Observable chain, which causes interceptors to be re-run on every
        // subscription (this also makes retries re-run the handler, including interceptors).
        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));
        // If coming via the API signature which accepts a previously constructed HttpRequest,
        // the only option is to get the event stream. Otherwise, return the event stream if
        // that is what was requested.
        if (first instanceof HttpRequest || options.observe === 'events') {
            return events$;
        }
        // The requested stream contains either the full response or the body. In either
        // case, the first step is to filter the event stream to extract a stream of
        // responses(s).
        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));
        // Decide which stream to return.
        switch (options.observe || 'body') {
            case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                    case 'arraybuffer':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is an ArrayBuffer.
                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                throw new Error('Response is not an ArrayBuffer.');
                            }
                            return res.body;
                        }));
                    case 'blob':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a Blob.
                            if (res.body !== null && !(res.body instanceof Blob)) {
                                throw new Error('Response is not a Blob.');
                            }
                            return res.body;
                        }));
                    case 'text':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a string.
                            if (res.body !== null && typeof res.body !== 'string') {
                                throw new Error('Response is not a string.');
                            }
                            return res.body;
                        }));
                    case 'json':
                    default:
                        // No validation needed for JSON responses, as they can be of any type.
                        return res$.pipe(map(function (res) { return res.body; }));
                }
            case 'response':
                // The response stream was requested directly, so return it.
                return res$;
            default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
        }
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * DELETE request to be executed on the server. See the individual overloads for
       * details of `delete()`'s return type based on the provided options.
       */
    HttpClient.prototype.delete = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * DELETE request to be executed on the server. See the individual overloads for
       * details of `delete()`'s return type based on the provided options.
       */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('DELETE', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * GET request to be executed on the server. See the individual overloads for
       * details of `get()`'s return type based on the provided options.
       */
    HttpClient.prototype.get = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * GET request to be executed on the server. See the individual overloads for
       * details of `get()`'s return type based on the provided options.
       */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('GET', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * HEAD request to be executed on the server. See the individual overloads for
       * details of `head()`'s return type based on the provided options.
       */
    HttpClient.prototype.head = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * HEAD request to be executed on the server. See the individual overloads for
       * details of `head()`'s return type based on the provided options.
       */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('HEAD', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause a request
       * with the special method `JSONP` to be dispatched via the interceptor pipeline.
       *
       * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
       * If no such interceptor is reached, then the `JSONP` request will likely be
       * rejected by the configured backend.
       */
    HttpClient.prototype.jsonp = /**
       * Constructs an `Observable` which, when subscribed, will cause a request
       * with the special method `JSONP` to be dispatched via the interceptor pipeline.
       *
       * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
       * If no such interceptor is reached, then the `JSONP` request will likely be
       * rejected by the configured backend.
       */
    function (url, callbackParam) {
        return this.request('JSONP', url, {
            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
            observe: 'body',
            responseType: 'json',
        });
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * OPTIONS request to be executed on the server. See the individual overloads for
       * details of `options()`'s return type based on the provided options.
       */
    HttpClient.prototype.options = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * OPTIONS request to be executed on the server. See the individual overloads for
       * details of `options()`'s return type based on the provided options.
       */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('OPTIONS', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * PATCH request to be executed on the server. See the individual overloads for
       * details of `patch()`'s return type based on the provided options.
       */
    HttpClient.prototype.patch = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * PATCH request to be executed on the server. See the individual overloads for
       * details of `patch()`'s return type based on the provided options.
       */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PATCH', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * POST request to be executed on the server. See the individual overloads for
       * details of `post()`'s return type based on the provided options.
       */
    HttpClient.prototype.post = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * POST request to be executed on the server. See the individual overloads for
       * details of `post()`'s return type based on the provided options.
       */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('POST', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * POST request to be executed on the server. See the individual overloads for
       * details of `post()`'s return type based on the provided options.
       */
    HttpClient.prototype.put = /**
       * Constructs an `Observable` which, when subscribed, will cause the configured
       * POST request to be executed on the server. See the individual overloads for
       * details of `post()`'s return type based on the provided options.
       */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PUT', url, addBody(options, body));
    };
    HttpClient.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpClient.ctorParameters = function () { return [
        { type: HttpHandler, },
    ]; };
    return HttpClient;
}());
export { HttpClient };

//# sourceMappingURL=data:application/json;base64,