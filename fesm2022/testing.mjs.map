{"version":3,"file":"testing.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/mock_platform_location.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/navigation/provide_fake_platform_navigation.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/location_mock.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/mock_location_strategy.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/provide_location_mocks.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DOCUMENT,\n  LocationChangeEvent,\n  LocationChangeListener,\n  PlatformLocation,\n  PlatformNavigation,\n} from '../../index';\nimport {Inject, inject, Injectable, InjectionToken, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\nimport {FakeNavigation} from './navigation/fake_navigation';\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\nfunction parseUrl(urlStr: string, baseHref: string) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase: string | undefined;\n\n  // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n  let parsedUrl: {\n    protocol: string;\n    hostname: string;\n    port: string;\n    pathname: string;\n    search: string;\n    hash: string;\n  };\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8],\n    };\n  }\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n  return {\n    hostname: (!serverBase && parsedUrl.hostname) || '',\n    protocol: (!serverBase && parsedUrl.protocol) || '',\n    port: (!serverBase && parsedUrl.port) || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || '',\n  };\n}\n\n/**\n * Mock platform location config\n *\n * @publicApi\n */\nexport interface MockPlatformLocationConfig {\n  startUrl?: string;\n  appBaseHref?: string;\n}\n\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nexport const MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken<MockPlatformLocationConfig>(\n  'MOCK_PLATFORM_LOCATION_CONFIG',\n);\n\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockPlatformLocation implements PlatformLocation {\n  private baseHref: string = '';\n  private hashUpdate = new Subject<LocationChangeEvent>();\n  private popStateSubject = new Subject<LocationChangeEvent>();\n  private urlChangeIndex: number = 0;\n  private urlChanges: {\n    hostname: string;\n    protocol: string;\n    port: string;\n    pathname: string;\n    search: string;\n    hash: string;\n    state: unknown;\n  }[] = [{hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null}];\n\n  constructor(\n    @Inject(MOCK_PLATFORM_LOCATION_CONFIG) @Optional() config?: MockPlatformLocationConfig,\n  ) {\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n\n      const parsedChanges = this.parseChanges(\n        null,\n        config.startUrl || 'http://_empty_/',\n        this.baseHref,\n      );\n      this.urlChanges[0] = {...parsedChanges};\n    }\n  }\n\n  get hostname() {\n    return this.urlChanges[this.urlChangeIndex].hostname;\n  }\n  get protocol() {\n    return this.urlChanges[this.urlChangeIndex].protocol;\n  }\n  get port() {\n    return this.urlChanges[this.urlChangeIndex].port;\n  }\n  get pathname() {\n    return this.urlChanges[this.urlChangeIndex].pathname;\n  }\n  get search() {\n    return this.urlChanges[this.urlChangeIndex].search;\n  }\n  get hash() {\n    return this.urlChanges[this.urlChangeIndex].hash;\n  }\n  get state() {\n    return this.urlChanges[this.urlChangeIndex].state;\n  }\n\n  getBaseHrefFromDOM(): string {\n    return this.baseHref;\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    const subscription = this.popStateSubject.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n\n  onHashChange(fn: LocationChangeListener): VoidFunction {\n    const subscription = this.hashUpdate.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n\n  get href(): string {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n\n  get url(): string {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n\n  private parseChanges(state: unknown, url: string, baseHref: string = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return {...parseUrl(url, baseHref), state};\n  }\n\n  replaceState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n\n    this.urlChanges[this.urlChangeIndex] = {\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState,\n    };\n  }\n\n  pushState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n    if (this.urlChangeIndex > 0) {\n      this.urlChanges.splice(this.urlChangeIndex + 1);\n    }\n    this.urlChanges.push({\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState,\n    });\n    this.urlChangeIndex = this.urlChanges.length - 1;\n  }\n\n  forward(): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex < this.urlChanges.length) {\n      this.urlChangeIndex++;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  back(): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex > 0) {\n      this.urlChangeIndex--;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    const nextPageIndex = this.urlChangeIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n      this.urlChangeIndex = nextPageIndex;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  getState(): unknown {\n    return this.state;\n  }\n\n  /**\n   * Browsers are inconsistent in when they fire events and perform the state updates\n   * The most easiest thing to do in our mock is synchronous and that happens to match\n   * Firefox and Chrome, at least somewhat closely\n   *\n   * https://github.com/WICG/navigation-api#watching-for-navigations\n   * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n   * popstate is always sent before hashchange:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n   */\n  private emitEvents(oldHash: string, oldUrl: string) {\n    this.popStateSubject.next({\n      type: 'popstate',\n      state: this.getState(),\n      oldUrl,\n      newUrl: this.url,\n    } as LocationChangeEvent);\n    if (oldHash !== this.hash) {\n      this.hashUpdate.next({\n        type: 'hashchange',\n        state: null,\n        oldUrl,\n        newUrl: this.url,\n      } as LocationChangeEvent);\n    }\n  }\n}\n\n/**\n * Mock implementation of URL state.\n */\n@Injectable()\nexport class FakeNavigationPlatformLocation implements PlatformLocation {\n  private readonly _platformNavigation: FakeNavigation;\n\n  constructor() {\n    const platformNavigation = inject(PlatformNavigation);\n    if (!(platformNavigation instanceof FakeNavigation)) {\n      throw new Error(\n        'FakePlatformNavigation cannot be used without FakeNavigation. Use ' +\n          '`provideFakeNavigation` to have all these services provided together.',\n      );\n    }\n    this._platformNavigation = platformNavigation;\n  }\n\n  private config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {optional: true});\n  getBaseHrefFromDOM(): string {\n    return this.config?.appBaseHref ?? '';\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    this._platformNavigation.window.addEventListener('popstate', fn);\n    return () => this._platformNavigation.window.removeEventListener('popstate', fn);\n  }\n\n  onHashChange(fn: LocationChangeListener): VoidFunction {\n    this._platformNavigation.window.addEventListener('hashchange', fn as any);\n    return () => this._platformNavigation.window.removeEventListener('hashchange', fn as any);\n  }\n\n  get href(): string {\n    return this._platformNavigation.currentEntry.url!;\n  }\n  get protocol(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).protocol;\n  }\n  get hostname(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).hostname;\n  }\n  get port(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).port;\n  }\n  get pathname(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).pathname;\n  }\n  get search(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).search;\n  }\n  get hash(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).hash;\n  }\n\n  pushState(state: any, title: string, url: string): void {\n    this._platformNavigation.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    this._platformNavigation.replaceState(state, title, url);\n  }\n\n  forward(): void {\n    this._platformNavigation.forward();\n  }\n\n  back(): void {\n    this._platformNavigation.back();\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    this._platformNavigation.go(relativePosition);\n  }\n\n  getState(): unknown {\n    return this._platformNavigation.currentEntry.getHistoryState();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, PlatformLocation, PlatformNavigation} from '../../../index';\nimport {inject, InjectionToken, Provider} from '@angular/core';\n\nimport {\n  FakeNavigationPlatformLocation,\n  MOCK_PLATFORM_LOCATION_CONFIG,\n} from '../mock_platform_location';\n\nimport {FakeNavigation} from './fake_navigation';\n\nconst FAKE_NAVIGATION = new InjectionToken<FakeNavigation>('fakeNavigation', {\n  providedIn: 'root',\n  factory: () => {\n    const config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {optional: true});\n    const baseFallback = 'http://_empty_/';\n    const startUrl = new URL(config?.startUrl || baseFallback, baseFallback);\n    const fakeNavigation = new FakeNavigation(inject(DOCUMENT), startUrl.href as `http${string}`);\n    fakeNavigation.setSynchronousTraversalsForTesting(true);\n    return fakeNavigation;\n  },\n});\n\n/**\n * Return a provider for the `FakeNavigation` in place of the real Navigation API.\n */\nexport function provideFakePlatformNavigation(): Provider[] {\n  return [\n    {\n      provide: PlatformNavigation,\n      useFactory: () => inject(FAKE_NAVIGATION),\n    },\n    {provide: PlatformLocation, useClass: FakeNavigationPlatformLocation},\n  ];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Location,\n  LocationStrategy,\n  PopStateEvent,\n  ɵnormalizeQueryParams as normalizeQueryParams,\n} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Subject, SubscriptionLike} from 'rxjs';\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class SpyLocation implements Location {\n  urlChanges: string[] = [];\n  private _history: LocationState[] = [new LocationState('', '', null)];\n  private _historyIndex: number = 0;\n  /** @internal */\n  _subject = new Subject<PopStateEvent>();\n  /** @internal */\n  _basePath: string = '';\n  /** @internal */\n  _locationStrategy: LocationStrategy = null!;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription: SubscriptionLike | null = null;\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n\n  setInitialPath(url: string) {\n    this._history[this._historyIndex].path = url;\n  }\n\n  setBaseHref(url: string) {\n    this._basePath = url;\n  }\n\n  path(): string {\n    return this._history[this._historyIndex].path;\n  }\n\n  getState(): unknown {\n    return this._history[this._historyIndex].state;\n  }\n\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath = this.path().endsWith('/')\n      ? this.path().substring(0, this.path().length - 1)\n      : this.path();\n\n    return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n  }\n\n  simulateUrlPop(pathname: string) {\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'popstate'});\n  }\n\n  simulateHashChange(pathname: string) {\n    const path = this.prepareExternalUrl(pathname);\n    this.pushHistory(path, '', null);\n\n    this.urlChanges.push('hash: ' + pathname);\n    // the browser will automatically fire popstate event before each `hashchange` event, so we need\n    // to simulate it.\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'popstate'});\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'hashchange'});\n  }\n\n  prepareExternalUrl(url: string): string {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._basePath + url;\n  }\n\n  go(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    this.pushHistory(path, query, state);\n\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push(url);\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  replaceState(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    const history = this._history[this._historyIndex];\n\n    history.state = state;\n\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push('replace: ' + url);\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  forward() {\n    if (this._historyIndex < this._history.length - 1) {\n      this._historyIndex++;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    const nextPageIndex = this._historyIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n      this._historyIndex = nextPageIndex;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  onUrlChange(fn: (url: string, state: unknown) => void): VoidFunction {\n    this._urlChangeListeners.push(fn);\n\n    this._urlChangeSubscription ??= this.subscribe((v) => {\n      this._notifyUrlChangeListeners(v.url, v.state);\n    });\n\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach((fn) => fn(url, state));\n  }\n\n  subscribe(\n    onNext: (value: any) => void,\n    onThrow?: ((error: any) => void) | null,\n    onReturn?: (() => void) | null,\n  ): SubscriptionLike {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow ?? undefined,\n      complete: onReturn ?? undefined,\n    });\n  }\n\n  normalize(url: string): string {\n    return null!;\n  }\n\n  private pushHistory(path: string, query: string, state: any) {\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query, state));\n    this._historyIndex = this._history.length - 1;\n  }\n}\n\nclass LocationState {\n  constructor(\n    public path: string,\n    public query: string,\n    public state: any,\n  ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject = new Subject<_MockPopStateEvent>();\n  private stateChanges: any[] = [];\n  constructor() {\n    super();\n  }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.next(new _MockPopStateEvent(this.path()));\n  }\n\n  override path(includeHash: boolean = false): string {\n    return this.internalPath;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  override pushState(ctx: any, title: string, path: string, query: string): void {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  override replaceState(ctx: any, title: string, path: string, query: string): void {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  override onPopState(fn: (value: any) => void): void {\n    this._subject.subscribe({next: fn});\n  }\n\n  override getBaseHref(): string {\n    return this.internalBaseHref;\n  }\n\n  override back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  override forward(): void {\n    throw 'not implemented';\n  }\n\n  override getState(): unknown {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location, LocationStrategy} from '../../index';\nimport {Provider} from '@angular/core';\n\nimport {SpyLocation} from './location_mock';\nimport {MockLocationStrategy} from './mock_location_strategy';\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nexport function provideLocationMocks(): Provider[] {\n  return [\n    {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n  ];\n}\n"],"names":["verifyProtocol","test","urlStr","parsedUrl","URL","serverBase","e","result","urlParse","exec","hostSplit","split","protocol","hostname","port","pathname","search","indexOf","baseHref","substring","length","hash","parsedChanges","parseChanges","config","startUrl","urlChanges","urlChangeIndex","state","subscription","unsubscribe","hashUpdate","subscribe","fn","url","JSON","parse","stringify","parsedState","title","newUrl","splice","push","oldUrl","emitEvents","oldHash","relativePosition","nextPageIndex","getState","next","type","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","MockPlatformLocation","deps","token","MOCK_PLATFORM_LOCATION_CONFIG","optional","target","ɵɵFactoryTarget","Injectable","ɵɵngDeclareInjectable","decorators","ctorParameters","undefined","inject","baseFallback","fakeNavigation","setSynchronousTraversalsForTesting","provideFakePlatformNavigation","SpyLocation","_locationStrategy","ngOnDestroy","_urlChangeSubscription","_historyIndex","path","setBaseHref","_basePath","_history","isCurrentPathEqualTo","query","endsWith","currPath","givenPath","simulateUrlPop","_subject","simulateHashChange","prepareExternalUrl","pushHistory","locationState","_notifyUrlChangeListeners","normalizeQueryParams","replaceState","history","forward","v","fnIndex","stateChanges","simulatePopState","_MockPopStateEvent","internalPath","internal","startsWith","internalBaseHref","internalTitle","externalUrl","ctx","onPopState","getBaseHref","nextUrl","provideLocationMocks"],"mappings":"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"}