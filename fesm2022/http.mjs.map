{"version":3,"file":"http.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/transfer_cache.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  ApplicationRef,\n  inject,\n  InjectionToken,\n  makeStateKey,\n  Provider,\n  StateKey,\n  TransferState,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵperformanceMarkFeature as performanceMarkFeature,\n  ɵtruncateMiddle as truncateMiddle,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\nimport {HttpParams} from './params';\n\n/**\n * Options to configure how TransferCache should be used to cache requests made via HttpClient.\n *\n * @param includeHeaders Specifies which headers should be included into cached responses. No\n *     headers are included by default.\n * @param filter A function that receives a request as an argument and returns a boolean to indicate\n *     whether a request should be included into the cache.\n * @param includePostRequests Enables caching for POST requests. By default, only GET and HEAD\n *     requests are cached. This option can be enabled if POST requests are used to retrieve data\n *     (for example using GraphQL).\n * @param includeRequestsWithAuthHeaders Enables caching of requests containing either `Authorization`\n *     or `Proxy-Authorization` headers. By default, these requests are excluded from caching.\n *\n * @see [Configuring the caching options](guide/ssr#configuring-the-caching-options)\n *\n * @publicApi\n */\nexport type HttpTransferCacheOptions = {\n  includeHeaders?: string[];\n  filter?: (req: HttpRequest<unknown>) => boolean;\n  includePostRequests?: boolean;\n  includeRequestsWithAuthHeaders?: boolean;\n};\n\n/**\n * If your application uses different HTTP origins to make API calls (via `HttpClient`) on the server and\n * on the client, the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token allows you to establish a mapping\n * between those origins, so that `HttpTransferCache` feature can recognize those requests as the same\n * ones and reuse the data cached on the server during hydration on the client.\n *\n * **Important note**: the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token should *only* be provided in\n * the *server* code of your application (typically in the `app.server.config.ts` script). Angular throws an\n * error if it detects that the token is defined while running on the client.\n *\n * @usageNotes\n *\n * When the same API endpoint is accessed via `http://internal-domain.com:8080` on the server and\n * via `https://external-domain.com` on the client, you can use the following configuration:\n * ```ts\n * // in app.server.config.ts\n * {\n *     provide: HTTP_TRANSFER_CACHE_ORIGIN_MAP,\n *     useValue: {\n *         'http://internal-domain.com:8080': 'https://external-domain.com'\n *     }\n * }\n * ```\n *\n * @publicApi\n */\nexport const HTTP_TRANSFER_CACHE_ORIGIN_MAP = new InjectionToken<Record<string, string>>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'HTTP_TRANSFER_CACHE_ORIGIN_MAP' : '',\n);\n\n/**\n * Keys within cached response data structure.\n */\n\nexport const BODY = 'b';\nexport const HEADERS = 'h';\nexport const STATUS = 's';\nexport const STATUS_TEXT = 'st';\nexport const REQ_URL = 'u';\nexport const RESPONSE_TYPE = 'rt';\n\ninterface TransferHttpResponse {\n  /** body */\n  [BODY]: any;\n  /** headers */\n  [HEADERS]: Record<string, string[]>;\n  /** status */\n  [STATUS]?: number;\n  /** statusText */\n  [STATUS_TEXT]?: string;\n  /** url */\n  [REQ_URL]?: string;\n  /** responseType */\n  [RESPONSE_TYPE]?: HttpRequest<unknown>['responseType'];\n}\n\ninterface CacheOptions extends HttpTransferCacheOptions {\n  isCacheActive: boolean;\n}\n\nconst CACHE_OPTIONS = new InjectionToken<CacheOptions>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '',\n);\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  const {isCacheActive, ...globalOptions} = inject(CACHE_OPTIONS);\n  const {transferCache: requestOptions, method: requestMethod} = req;\n\n  // In the following situations we do not want to cache the request\n  if (\n    !isCacheActive ||\n    requestOptions === false ||\n    // POST requests are allowed either globally or at request level\n    (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n    (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n    // Do not cache request that require authorization when includeRequestsWithAuthHeaders is falsey\n    (!globalOptions.includeRequestsWithAuthHeaders && hasAuthHeaders(req)) ||\n    globalOptions.filter?.(req) === false\n  ) {\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n\n  const originMap: Record<string, string> | null = inject(HTTP_TRANSFER_CACHE_ORIGIN_MAP, {\n    optional: true,\n  });\n\n  if (typeof ngServerMode !== 'undefined' && !ngServerMode && originMap) {\n    throw new RuntimeError(\n      RuntimeErrorCode.HTTP_ORIGIN_MAP_USED_IN_CLIENT,\n      ngDevMode &&\n        'Angular detected that the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token is configured and ' +\n          'present in the client side code. Please ensure that this token is only provided in the ' +\n          'server code of the application.',\n    );\n  }\n\n  const requestUrl =\n    typeof ngServerMode !== 'undefined' && ngServerMode && originMap\n      ? mapRequestOriginUrl(req.url, originMap)\n      : req.url;\n\n  const storeKey = makeCacheKey(req, requestUrl);\n  const response = transferState.get(storeKey, null);\n\n  let headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n\n  if (response) {\n    const {\n      [BODY]: undecodedBody,\n      [RESPONSE_TYPE]: responseType,\n      [HEADERS]: httpHeaders,\n      [STATUS]: status,\n      [STATUS_TEXT]: statusText,\n      [REQ_URL]: url,\n    } = response;\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer | Blob | string | undefined = undecodedBody;\n\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    let headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n    }\n\n    return of(\n      new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url,\n      }),\n    );\n  }\n\n  const event$ = next(req);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // Request not found in cache. Make the request and cache it if on the server.\n    return event$.pipe(\n      tap((event: HttpEvent<unknown>) => {\n        // Only cache successful HTTP responses.\n        if (event instanceof HttpResponse) {\n          transferState.set<TransferHttpResponse>(storeKey, {\n            [BODY]: event.body,\n            [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n            [STATUS]: event.status,\n            [STATUS_TEXT]: event.statusText,\n            [REQ_URL]: requestUrl,\n            [RESPONSE_TYPE]: req.responseType,\n          });\n        }\n      }),\n    );\n  }\n\n  return event$;\n}\n\n/** @returns true when the requests contains autorization related headers. */\nfunction hasAuthHeaders(req: HttpRequest<unknown>): boolean {\n  return req.headers.has('authorization') || req.headers.has('proxy-authorization');\n}\n\nfunction getFilteredHeaders(\n  headers: HttpHeaders,\n  includeHeaders: string[] | undefined,\n): Record<string, string[]> {\n  if (!includeHeaders) {\n    return {};\n  }\n\n  const headersMap: Record<string, string[]> = {};\n  for (const key of includeHeaders) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction sortAndConcatParams(params: HttpParams | URLSearchParams): string {\n  return [...params.keys()]\n    .sort()\n    .map((k) => `${k}=${params.getAll(k)}`)\n    .join('&');\n}\n\nfunction makeCacheKey(\n  request: HttpRequest<any>,\n  mappedRequestUrl: string,\n): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType} = request;\n  const encodedParams = sortAndConcatParams(params);\n\n  let serializedBody = request.serializeBody();\n  if (serializedBody instanceof URLSearchParams) {\n    serializedBody = sortAndConcatParams(serializedBody);\n  } else if (typeof serializedBody !== 'string') {\n    serializedBody = '';\n  }\n\n  const key = [method, responseType, mappedRequestUrl, serializedBody, encodedParams].join('|');\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n * @see [Caching data when using HttpClient](guide/ssr#configuring-the-caching-options)\n *\n */\nexport function withHttpTransferCache(cacheOptions: HttpTransferCacheOptions): Provider[] {\n  return [\n    {\n      provide: CACHE_OPTIONS,\n      useFactory: (): CacheOptions => {\n        performanceMarkFeature('NgHttpTransferCache');\n        return {isCacheActive: true, ...cacheOptions};\n      },\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_OPTIONS);\n\n        return () => {\n          appRef.whenStable().then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      },\n    },\n  ];\n}\n\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(\n  url: string,\n  headers: HttpHeaders,\n  headersToInclude: string[],\n): HttpHeaders {\n  const warningProduced = new Set();\n  return new Proxy<HttpHeaders>(headers, {\n    get(target: HttpHeaders, prop: keyof HttpHeaders): unknown {\n      const value = Reflect.get(target, prop);\n      const methods: Set<keyof HttpHeaders> = new Set(['get', 'has', 'getAll']);\n\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n\n      return (headerName: string) => {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        const key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          const truncatedUrl = truncateMiddle(url);\n\n          console.warn(\n            formatRuntimeError(\n              RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE,\n              `Angular detected that the \\`${headerName}\\` header is accessed, but the value of the header ` +\n                `was not transferred from the server to the client by the HttpTransferCache. ` +\n                `To include the value of the \\`${headerName}\\` header for the \\`${truncatedUrl}\\` request, ` +\n                `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                `\\`provideClientHydration()\\` call. `,\n            ),\n          );\n        }\n\n        // invoking the original method\n        return (value as Function).apply(target, [headerName]);\n      };\n    },\n  });\n}\n\nfunction mapRequestOriginUrl(url: string, originMap: Record<string, string>): string {\n  const origin = new URL(url, 'resolve://').origin;\n  const mappedOrigin = originMap[origin];\n  if (!mappedOrigin) {\n    return url;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    verifyMappedOrigin(mappedOrigin);\n  }\n\n  return url.replace(origin, mappedOrigin);\n}\n\nfunction verifyMappedOrigin(url: string): void {\n  if (new URL(url, 'resolve://').pathname !== '/') {\n    throw new RuntimeError(\n      RuntimeErrorCode.HTTP_ORIGIN_MAP_CONTAINS_PATH,\n      'Angular detected a URL with a path segment in the value provided for the ' +\n        `\\`HTTP_TRANSFER_CACHE_ORIGIN_MAP\\` token: ${url}. The map should only contain origins ` +\n        'without any other segments.',\n    );\n  }\n}\n"],"names":["STATUS_TEXT","REQ_URL","transferCacheInterceptorFn","req","next","globalOptions","inject","CACHE_OPTIONS","transferCache","requestOptions","method","requestMethod","includePostRequests","ALLOWED_METHODS","includes","includeRequestsWithAuthHeaders","hasAuthHeaders","filter","transferState","TransferState","originMap","HTTP_TRANSFER_CACHE_ORIGIN_MAP","optional","ngServerMode","RuntimeError","ngDevMode","requestUrl","mapRequestOriginUrl","url","makeCacheKey","includeHeaders","headersToInclude","response","BODY","undecodedBody","RESPONSE_TYPE","responseType","HEADERS","httpHeaders","STATUS","status","statusText","body","TextEncoder","encode","buffer","headers","appendMissingHeadersDetection","of","HttpResponse","event$","event","set","storeKey","getFilteredHeaders","has","headersMap","key","values","sortAndConcatParams","params","keys","map","k","getAll","request","mappedRequestUrl","encodedParams","serializeBody","URLSearchParams"],"mappings":"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"}