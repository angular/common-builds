{"version":3,"file":"_module-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/headers.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/context.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/params.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/request.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/response.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/fetch.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/xhr.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/backend.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/jsonp.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/xsrf.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/provider.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/src/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\ninterface Update {\n  name: string;\n  value?: string | string[];\n  op: 'a' | 's' | 'd';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @see [Setting request headers](guide/http/making-requests#setting-request-headers)\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  private headers!: Map<string, string[]>;\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[] | null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(\n    headers?: string | {[name: string]: string | number | (string | number)[]} | Headers,\n  ) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach((line) => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const value = line.slice(index + 1).trim();\n            this.addHeaderEntry(name, value);\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((value: string, name: string) => {\n        this.addHeaderEntry(name, value);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string | null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[] | null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach((update) => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach((key) => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter((value) => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private addHeaderEntry(name: string, value: string) {\n    const key = name.toLowerCase();\n    this.maybeSetNormalizedName(name, key);\n    if (this.headers.has(key)) {\n      this.headers.get(key)!.push(value);\n    } else {\n      this.headers.set(key, [value]);\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map((value) =>\n      value.toString(),\n    );\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach((key) =>\n      fn(this.normalizedNames.get(key)!, this.headers.get(key)!),\n    );\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(\n  headers: Record<string, unknown> | Headers,\n): asserts headers is Record<string, string | string[] | number | number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n        `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`,\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @see [Request and response metadata](guide/http/interceptors#request-and-response-metadata)\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```ts\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @see [Request and response metadata](guide/http/interceptors#request-and-response-metadata)\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @see [Custom parameter encoding](guide/http/making-requests#custom-parameter-encoding)\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n        eqIdx == -1\n          ? [codec.decodeKey(param), '']\n          : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n    STANDARD_ENCODING_REGEX,\n    (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s,\n  );\n}\n\nfunction valueToString(value: string | number | boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string | number | boolean;\n  op: 'a' | 'd' | 's';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @see [Setting URL parameters](guide/http/making-requests#setting-url-parameters)\n * @see [Custom parameter encoding](guide/http/making-requests#custom-parameter-encoding)\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  };\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @see [Setting URL parameters](guide/http/making-requests#setting-url-parameters)\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]> | null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[] | null = null;\n  private cloneFrom: HttpParams | null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (options.fromString) {\n      if (options.fromObject) {\n        throw new RuntimeError(\n          RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT,\n          ngDevMode && 'Cannot specify both fromString and fromObject.',\n        );\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach((key) => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string | null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[] | null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  }): HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach((param) => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach((_value) => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as string | number | boolean, op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return (\n      this.keys()\n        .map((key) => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!\n            .map((value) => eKey + '=' + this.encoder.encodeValue(value))\n            .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter((param) => param !== '')\n        .join('&')\n    );\n  }\n\n  private clone(update: Update | Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach((key) => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach((update) => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  withCredentials?: boolean;\n  credentials?: RequestCredentials;\n  transferCache?: {includeHeaders?: string[]} | boolean;\n  keepalive?: boolean;\n  priority?: RequestPriority;\n  cache?: RequestCache;\n  timeout?: number;\n  mode?: RequestMode;\n  redirect?: RequestRedirect;\n  referrer?: string;\n  integrity?: string;\n  referrerPolicy?: ReferrerPolicy;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * `Content-Type` is an HTTP header used to indicate the media type\n * (also known as MIME type) of the resource being sent to the client\n * or received from the server.\n */\nexport const CONTENT_TYPE_HEADER = 'Content-Type';\n\n/**\n * The `Accept` header is an HTTP request header that indicates the media types\n * (or content types) the client is willing to receive from the server.\n */\nexport const ACCEPT_HEADER = 'Accept';\n\n/**\n * `text/plain` is a content type used to indicate that the content being\n * sent is plain text with no special formatting or structured data\n * like HTML, XML, or JSON.\n */\nexport const TEXT_CONTENT_TYPE = 'text/plain';\n\n/**\n * `application/json` is a content type used to indicate that the content\n * being sent is in the JSON format.\n */\nexport const JSON_CONTENT_TYPE = 'application/json';\n\n/**\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\n * Accept header of HTTP requests. It indicates the types of content the client is willing\n * to accept from the server, with a preference for `application/json` and `text/plain`,\n * but also accepting any other type (*\\/*).\n */\nexport const ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T | null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   *  The credentials mode of the request, which determines how cookies and HTTP authentication are handled.\n   *  This can affect whether cookies are sent with the request, and how authentication is handled.\n   */\n  readonly credentials!: RequestCredentials;\n\n  /**\n   * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\n   */\n  readonly keepalive: boolean = false;\n\n  /**\n   * Controls how the request will interact with the browser's HTTP cache.\n   * This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.\n   */\n  readonly cache!: RequestCache;\n\n  /**\n   * Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.\n   */\n  readonly priority!: RequestPriority;\n\n  /**\n   * The mode of the request, which determines how the request will interact with the browser's security model.\n   * This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.\n   */\n  readonly mode!: RequestMode;\n\n  /**\n   * The redirect mode of the request, which determines how redirects are handled.\n   * This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.\n   */\n  readonly redirect!: RequestRedirect;\n\n  /**\n   * The referrer of the request, which can be used to indicate the origin of the request.\n   * This is useful for security and analytics purposes.\n   * Value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.\n   */\n  readonly referrer!: string;\n\n  /**\n   * The integrity metadata of the request, which can be used to ensure the request is made with the expected content.\n   * A cryptographic hash of the resource to be fetched by request\n   */\n  readonly integrity!: string;\n\n  /**\n   * The referrer policy of the request, which can be used to specify the referrer information to be included with the request.\n   * This can affect the amount of referrer information sent with the request, and can be used to enhance privacy and security.\n   */\n  readonly referrerPolicy!: ReferrerPolicy;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer' | 'blob' | 'json' | 'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```ts\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  /**\n   * The HttpTransferCache option for the request\n   */\n  readonly transferCache?: {includeHeaders?: string[]} | boolean;\n\n  /**\n   * The timeout for the backend HTTP request in ms.\n   */\n  readonly timeout?: number;\n\n  constructor(\n    method: 'GET' | 'HEAD',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  );\n  constructor(\n    method: 'DELETE' | 'JSONP' | 'OPTIONS',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      timeout?: number;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n    },\n  );\n  constructor(\n    method: 'POST',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  );\n  constructor(\n    method: 'PUT' | 'PATCH',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      timeout?: number;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n    },\n  );\n  constructor(\n    method: string,\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  );\n  constructor(\n    method: string,\n    readonly url: string,\n    third?:\n      | T\n      | {\n          headers?: HttpHeaders;\n          context?: HttpContext;\n          reportProgress?: boolean;\n          params?: HttpParams;\n          responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n          withCredentials?: boolean;\n          credentials?: RequestCredentials;\n          keepalive?: boolean;\n          priority?: RequestPriority;\n          cache?: RequestCache;\n          mode?: RequestMode;\n          redirect?: RequestRedirect;\n          referrer?: string;\n          integrity?: string;\n          referrerPolicy?: ReferrerPolicy;\n          transferCache?: {includeHeaders?: string[]} | boolean;\n          timeout?: number;\n        }\n      | null,\n    fourth?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n    },\n  ) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit | undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? (third as T) : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      this.keepalive = !!options.keepalive;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (options.context) {\n        this.context = options.context;\n      }\n\n      if (options.params) {\n        this.params = options.params;\n      }\n\n      if (options.priority) {\n        this.priority = options.priority;\n      }\n\n      if (options.cache) {\n        this.cache = options.cache;\n      }\n\n      if (options.credentials) {\n        this.credentials = options.credentials;\n      }\n\n      if (typeof options.timeout === 'number') {\n        // XHR will ignore any value below 1. AbortSignals only accept unsigned integers.\n\n        if (options.timeout < 1 || !Number.isInteger(options.timeout)) {\n          throw new RuntimeError(\n            RuntimeErrorCode.INVALID_TIMEOUT_VALUE,\n            ngDevMode ? '`timeout` must be a positive integer value' : '',\n          );\n        }\n\n        this.timeout = options.timeout;\n      }\n\n      if (options.mode) {\n        this.mode = options.mode;\n      }\n\n      if (options.redirect) {\n        this.redirect = options.redirect;\n      }\n\n      if (options.integrity) {\n        this.integrity = options.integrity;\n      }\n\n      if (options.referrer) {\n        this.referrer = options.referrer;\n      }\n\n      if (options.referrerPolicy) {\n        this.referrerPolicy = options.referrerPolicy;\n      }\n\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    this.headers ??= new HttpHeaders();\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    this.context ??= new HttpContext();\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer | Blob | FormData | URLSearchParams | string | null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (\n      typeof this.body === 'string' ||\n      isArrayBuffer(this.body) ||\n      isBlob(this.body) ||\n      isFormData(this.body) ||\n      isUrlSearchParams(this.body)\n    ) {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'boolean' ||\n      Array.isArray(this.body)\n    ) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string | null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return TEXT_CONTENT_TYPE;\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'number' ||\n      typeof this.body === 'boolean'\n    ) {\n      return JSON_CONTENT_TYPE;\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    credentials?: RequestCredentials;\n    keepalive?: boolean;\n    priority?: RequestPriority;\n    cache?: RequestCache;\n    mode?: RequestMode;\n    redirect?: RequestRedirect;\n    referrer?: string;\n    integrity?: string;\n    referrerPolicy?: ReferrerPolicy;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    timeout?: number;\n    body?: T | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    keepalive?: boolean;\n    priority?: RequestPriority;\n    cache?: RequestCache;\n    mode?: RequestMode;\n    redirect?: RequestRedirect;\n    referrer?: string;\n    integrity?: string;\n    referrerPolicy?: ReferrerPolicy;\n    withCredentials?: boolean;\n    credentials?: RequestCredentials;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    timeout?: number;\n    body?: V | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<V>;\n  clone(\n    update: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      credentials?: RequestCredentials;\n      keepalive?: boolean;\n      priority?: RequestPriority;\n      cache?: RequestCache;\n      mode?: RequestMode;\n      redirect?: RequestRedirect;\n      referrer?: string;\n      integrity?: string;\n      referrerPolicy?: ReferrerPolicy;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      timeout?: number;\n      body?: any | null;\n      method?: string;\n      url?: string;\n      setHeaders?: {[name: string]: string | string[]};\n      setParams?: {[param: string]: string};\n    } = {},\n  ): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n    const keepalive = update.keepalive ?? this.keepalive;\n    const priority = update.priority || this.priority;\n    const cache = update.cache || this.cache;\n    const mode = update.mode || this.mode;\n    const redirect = update.redirect || this.redirect;\n    const credentials = update.credentials || this.credentials;\n    const referrer = update.referrer || this.referrer;\n    const integrity = update.integrity || this.integrity;\n    const referrerPolicy = update.referrerPolicy || this.referrerPolicy;\n    // Carefully handle the transferCache to differentiate between\n    // `false` and `undefined` in the update args.\n    const transferCache = update.transferCache ?? this.transferCache;\n\n    const timeout = update.timeout ?? this.timeout;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials ?? this.withCredentials;\n    const reportProgress = update.reportProgress ?? this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce(\n        (headers, name) => headers.set(name, update.setHeaders![name]),\n        headers,\n      );\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce(\n        (params, param) => params.set(param, update.setParams![param]),\n        params,\n      );\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n      transferCache,\n      keepalive,\n      cache,\n      priority,\n      timeout,\n      mode,\n      redirect,\n      credentials,\n      referrer,\n      integrity,\n      referrerPolicy,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @see [Receiving raw progress event](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @see [Intercepting response events](guide/http/interceptors#intercepting-response-events)\n * @publicApi\n */\nexport type HttpEvent<T> =\n  | HttpSentEvent\n  | HttpHeaderResponse\n  | HttpResponse<T>\n  | HttpDownloadProgressEvent\n  | HttpUploadProgressEvent\n  | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   *\n   * @deprecated With HTTP/2 and later versions, this will incorrectly remain set to 'OK' even when the status code of a response is not 200.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string | null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  readonly type!: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Indicates whether the HTTP response was redirected during the request.\n   * This property is only available when using the Fetch API using `withFetch()`\n   * When using the default XHR Request this property will be `undefined`\n   */\n  readonly redirected?: boolean;\n\n  /**\n   * Indicates the type of the HTTP response, based on how the request was made and how the browser handles the response.\n   *\n   * This corresponds to the `type` property of the Fetch API's `Response` object, which can indicate values such as:\n   * - `'basic'`: A same-origin response, allowing full access to the body and headers.\n   * - `'cors'`: A cross-origin response with CORS enabled, exposing only safe response headers.\n   * - `'opaque'`: A cross-origin response made with `no-cors`, where the response body and headers are inaccessible.\n   * - `'opaqueredirect'`: A response resulting from a redirect followed in `no-cors` mode.\n   * - `'error'`: A response representing a network error or similar failure.\n   *\n   * This property is only available when using the Fetch-based backend (via `withFetch()`).\n   * When using Angular's (XHR) backend, this value will be `undefined`.\n   */\n  readonly responseType?: ResponseType;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n      redirected?: boolean;\n      responseType?: ResponseType;\n    },\n    defaultStatus: number = 200,\n    defaultStatusText: string = 'OK',\n  ) {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    this.redirected = init.redirected;\n    this.responseType = init.responseType;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @see [Receiving raw progress events](guide/http/making-requests#receiving-raw-progress-events)\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(\n    update: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ): HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @see [Interacting with the server response events](guide/http/making-requests#interacting-with-the-server-response-events)\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T | null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(\n    init: {\n      body?: T | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n      redirected?: boolean;\n      responseType?: ResponseType;\n    } = {},\n  ) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n    redirected?: boolean;\n    responseType?: ResponseType;\n  }): HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n    redirected?: boolean;\n    responseType?: ResponseType;\n  }): HttpResponse<V>;\n  clone(\n    update: {\n      body?: any | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n      redirected?: boolean;\n      responseType?: ResponseType;\n    } = {},\n  ): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n      redirected: update.redirected ?? this.redirected,\n      responseType: update.responseType ?? this.responseType,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @see [Handling request failure](guide/http/making-requests#handling-request-failure)\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any | null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n    redirected?: boolean;\n    responseType?: ResponseType;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      // TODO: Cleanup G3 to update the tests that rely on having the status text in the Error message.\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n        init.statusText\n      }`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nexport const HTTP_STATUS_CODE_OK = 200;\nexport const HTTP_STATUS_CODE_NO_CONTENT = 204;\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = HTTP_STATUS_CODE_OK,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = HTTP_STATUS_CODE_NO_CONTENT,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DestroyRef,\n  inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  ɵformatRuntimeError as formatRuntimeError,\n} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\nimport {RuntimeErrorCode} from './errors';\n\nimport type {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {ACCEPT_HEADER, ACCEPT_HEADER_VALUE, CONTENT_TYPE_HEADER, HttpRequest} from './request';\nimport {\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpResponse,\n} from './response';\n\n// Needed for the global `Zone` ambient types to be available.\nimport type {} from 'zone.js';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * An internal injection token to reference `FetchBackend` implementation\n * in a tree-shakable way.\n */\nexport const FETCH_BACKEND = new InjectionToken<FetchBackend>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '',\n);\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We use an arrow function to always reference the current global implementation of `fetch`.\n  // This is helpful for cases when the global `fetch` implementation is modified by external code,\n  // see https://github.com/angular/angular/issues/57527.\n  private readonly fetchImpl =\n    inject(FetchFactory, {optional: true})?.fetch ?? ((...args) => globalThis.fetch(...args));\n  private readonly ngZone = inject(NgZone);\n  private readonly destroyRef = inject(DestroyRef);\n  private destroyed = false;\n\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer) => {\n      const aborter = new AbortController();\n\n      this.doRequest(request, aborter.signal, observer).then(noop, (error) =>\n        observer.error(new HttpErrorResponse({error})),\n      );\n\n      let timeoutId: ReturnType<typeof setTimeout> | undefined;\n      if (request.timeout) {\n        // TODO: Replace with AbortSignal.any([aborter.signal, AbortSignal.timeout(request.timeout)])\n        // when AbortSignal.any support is Baseline widely available (NET nov. 2026)\n        timeoutId = this.ngZone.runOutsideAngular(() =>\n          setTimeout(() => {\n            if (!aborter.signal.aborted) {\n              aborter.abort(new DOMException('signal timed out', 'TimeoutError'));\n            }\n          }, request.timeout),\n        );\n      }\n\n      return () => {\n        if (timeoutId !== undefined) {\n          clearTimeout(timeoutId);\n        }\n        aborter.abort();\n      };\n    });\n  }\n\n  private async doRequest(\n    request: HttpRequest<any>,\n    signal: AbortSignal,\n    observer: Observer<HttpEvent<any>>,\n  ): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n    try {\n      // Run fetch outside of Angular zone.\n      // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n      // the response should eventually timeout which causes extra CD cycles every 500ms\n      const fetchPromise = this.ngZone.runOutsideAngular(() =>\n        this.fetchImpl(request.urlWithParams, {signal, ...init}),\n      );\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(\n        new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers,\n        }),\n      );\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = response.url || request.urlWithParams;\n\n    let status = response.status;\n    let body: string | ArrayBuffer | Blob | object | null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string | undefined;\n\n      // We have to check whether the Zone is defined in the global scope because this may be called\n      // when the zone is nooped.\n      const reqZone = typeof Zone !== 'undefined' && Zone.current;\n\n      let canceled = false;\n\n      // Perform response processing outside of Angular zone to\n      // ensure no excessive change detection runs are executed\n      // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n      await this.ngZone.runOutsideAngular(async () => {\n        while (true) {\n          // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\n          // unnecessary work or triggering side effects after teardown.\n          // This may happen if the app was explicitly destroyed before\n          // the response returned entirely.\n          if (this.destroyed) {\n            // Streams left in a pending state (due to `break` without cancel) may\n            // continue consuming or holding onto data behind the scenes.\n            // Calling `reader.cancel()` allows the browser or the underlying\n            // system to release any network or memory resources associated with the stream.\n            await reader.cancel();\n            canceled = true;\n            break;\n          }\n\n          const {done, value} = await reader.read();\n\n          if (done) {\n            break;\n          }\n\n          chunks.push(value);\n          receivedLength += value.length;\n\n          if (request.reportProgress) {\n            partialText =\n              request.responseType === 'text'\n                ? (partialText ?? '') +\n                  (decoder ??= new TextDecoder()).decode(value, {stream: true})\n                : undefined;\n\n            const reportProgress = () =>\n              observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText,\n              } as HttpDownloadProgressEvent);\n            reqZone ? reqZone.run(reportProgress) : reportProgress();\n          }\n        }\n      });\n\n      // We need to manage the canceled state — because the Streams API does not\n      // expose a direct `.state` property on the reader.\n      // We need to `return` because `parseBody` may not be able to parse chunks\n      // that were only partially read (due to cancellation caused by app destruction).\n      if (canceled) {\n        observer.complete();\n        return;\n      }\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n        body = this.parseBody(request, chunksAll, contentType, status);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(\n          new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url || request.urlWithParams,\n          }),\n        );\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HTTP_STATUS_CODE_OK : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    const redirected = response.redirected;\n\n    const responseType = response.type;\n\n    if (ok) {\n      observer.next(\n        new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url,\n          redirected,\n          responseType,\n        }),\n      );\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(\n        new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url,\n          redirected,\n          responseType,\n        }),\n      );\n    }\n  }\n\n  private parseBody(\n    request: HttpRequest<any>,\n    binContent: Uint8Array<ArrayBuffer>,\n    contentType: string,\n    status: number,\n  ): string | ArrayBuffer | Blob | object | null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        if (text === '') {\n          return null;\n        }\n        try {\n          return JSON.parse(text) as object;\n        } catch (e: unknown) {\n          // Allow handling non-JSON errors (!) as plain text, same as the XHR\n          // backend. Without this special sauce, any non-JSON error would be\n          // completely inaccessible downstream as the `HttpErrorResponse.error`\n          // would be set to the `SyntaxError` from then failing `JSON.parse`.\n          if (status < 200 || status >= 300) {\n            return text;\n          }\n          throw e;\n        }\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {type: contentType});\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    let credentials: RequestCredentials | undefined;\n\n    // If the request has a credentials property, use it.\n    // Otherwise, if the request has withCredentials set to true, use 'include'.\n    credentials = req.credentials;\n\n    // If withCredentials is true should be set to 'include', for compatibility\n    if (req.withCredentials) {\n      // A warning is logged in development mode if the request has both\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warningOptionsMessage(req);\n      credentials = 'include';\n    }\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    if (!req.headers.has(ACCEPT_HEADER)) {\n      headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n    }\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers[CONTENT_TYPE_HEADER] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n      keepalive: req.keepalive,\n      cache: req.cache,\n      priority: req.priority,\n      mode: req.mode,\n      redirect: req.redirect,\n      referrer: req.referrer,\n      integrity: req.integrity,\n      referrerPolicy: req.referrerPolicy,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array<ArrayBuffer> {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\nfunction warningOptionsMessage(req: HttpRequest<any>) {\n  if (req.credentials && req.withCredentials) {\n    console.warn(\n      formatRuntimeError(\n        RuntimeErrorCode.WITH_CREDENTIALS_OVERRIDES_EXPLICIT_CREDENTIALS,\n        `Angular detected that a \\`HttpClient\\` request has both \\`withCredentials: true\\` and \\`credentials: '${req.credentials}'\\` options. The \\`withCredentials\\` option is overriding the explicit \\`credentials\\` setting to 'include'. Consider removing \\`withCredentials\\` and using \\`credentials: '${req.credentials}'\\` directly for clarity.`,\n      ),\n    );\n  }\n}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '../../index';\nimport {\n  inject,\n  Injectable,\n  ɵRuntimeError as RuntimeError,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵTracingService as TracingService,\n  ɵTracingSnapshot as TracingSnapshot,\n} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport type {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {ACCEPT_HEADER, ACCEPT_HEADER_VALUE, CONTENT_TYPE_HEADER, HttpRequest} from './request';\nimport {\n  HTTP_STATUS_CODE_NO_CONTENT,\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpJsonParseError,\n  HttpResponse,\n  HttpUploadProgressEvent,\n} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Validates whether the request is compatible with the XHR backend.\n * Show a warning if the request contains options that are not supported by XHR.\n */\nfunction validateXhrCompatibility(req: HttpRequest<any>) {\n  const unsupportedOptions: {\n    property: keyof HttpRequest<any>;\n    errorCode: RuntimeErrorCode;\n  }[] = [\n    {\n      property: 'keepalive',\n      errorCode: RuntimeErrorCode.KEEPALIVE_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'cache',\n      errorCode: RuntimeErrorCode.CACHE_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'priority',\n      errorCode: RuntimeErrorCode.PRIORITY_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'mode',\n      errorCode: RuntimeErrorCode.MODE_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'redirect',\n      errorCode: RuntimeErrorCode.REDIRECT_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'credentials',\n      errorCode: RuntimeErrorCode.CREDENTIALS_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'integrity',\n      errorCode: RuntimeErrorCode.INTEGRITY_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'referrer',\n      errorCode: RuntimeErrorCode.REFERRER_NOT_SUPPORTED_WITH_XHR,\n    },\n    {\n      property: 'referrerPolicy',\n      errorCode: RuntimeErrorCode.REFERRER_POLICY_NOT_SUPPORTED_WITH_XHR,\n    },\n  ];\n\n  // Check each unsupported option and warn if present\n  for (const {property, errorCode} of unsupportedOptions) {\n    if (req[property]) {\n      console.warn(\n        formatRuntimeError(\n          errorCode,\n          `Angular detected that a \\`HttpClient\\` request with the \\`${property}\\` option was sent using XHR, which does not support it. To use the \\`${property}\\` option, enable Fetch API support by passing \\`withFetch()\\` as an argument to \\`provideHttpClient()\\`.`,\n        ),\n      );\n    }\n  }\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class HttpXhrBackend implements HttpBackend {\n  private readonly tracingService: TracingService<TracingSnapshot> | null = inject(TracingService, {\n    optional: true,\n  });\n\n  constructor(private xhrFactory: XhrFactory) {}\n\n  private maybePropagateTrace<T extends Function>(fn: T): T {\n    return this.tracingService?.propagate ? this.tracingService.propagate(fn) : fn;\n  }\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_JSONP_MODULE,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`,\n      );\n    }\n\n    // Validate that the request is compatible with the XHR backend.\n    ngDevMode && validateXhrCompatibility(req);\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory & {ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void | null> =\n      // Note that `ɵloadImpl` is never defined in client bundles and can be\n      // safely dropped whenever we're running in the browser.\n      // This branching is redundant.\n      // The `ngServerMode` guard also enables tree-shaking of the `from()`\n      // function from the common bundle, as it's only used in server code.\n      typeof ngServerMode !== 'undefined' && ngServerMode && xhrFactory.ɵloadImpl\n        ? from(xhrFactory.ɵloadImpl())\n        : of(null);\n\n    return source.pipe(\n      switchMap(() => {\n        // Everything happens on Observable subscription.\n        return new Observable((observer: Observer<HttpEvent<any>>) => {\n          // Start by setting up the XHR object with request method, URL, and withCredentials\n          // flag.\n          const xhr = xhrFactory.build();\n          xhr.open(req.method, req.urlWithParams);\n          if (req.withCredentials) {\n            xhr.withCredentials = true;\n          }\n\n          // Add all the requested headers.\n          req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n          // Add an Accept header if one isn't present already.\n          if (!req.headers.has(ACCEPT_HEADER)) {\n            xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n          }\n\n          // Auto-detect the Content-Type header if one isn't present already.\n          if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n              xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n            }\n          }\n\n          if (req.timeout) {\n            xhr.timeout = req.timeout;\n          }\n\n          // Set the responseType if one was requested.\n          if (req.responseType) {\n            const responseType = req.responseType.toLowerCase();\n\n            // JSON responses need to be processed as text. This is because if the server\n            // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n            // xhr.response will be null, and xhr.responseText cannot be accessed to\n            // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n            // is parsed by first requesting text and then applying JSON.parse.\n            xhr.responseType = (responseType !== 'json' ? responseType : 'text') as any;\n          }\n\n          // Serialize the request body if one is present. If not, this will be set to null.\n          const reqBody = req.serializeBody();\n\n          // If progress events are enabled, response headers will be delivered\n          // in two events - the HttpHeaderResponse event and the full HttpResponse\n          // event. However, since response headers don't change in between these\n          // two events, it doesn't make sense to parse them twice. So headerResponse\n          // caches the data extracted from the response whenever it's first parsed,\n          // to ensure parsing isn't duplicated.\n          let headerResponse: HttpHeaderResponse | null = null;\n\n          // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n          // state, and memoizes it into headerResponse.\n          const partialFromXhr = (): HttpHeaderResponse => {\n            if (headerResponse !== null) {\n              return headerResponse;\n            }\n\n            const statusText = xhr.statusText || 'OK';\n\n            // Parse headers from XMLHttpRequest - this step is lazy.\n            const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n            // Read the response URL from the XMLHttpResponse instance and fall back on the\n            // request URL.\n            const url = xhr.responseURL || req.url;\n\n            // Construct the HttpHeaderResponse and memoize it.\n            headerResponse = new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n            return headerResponse;\n          };\n\n          // Next, a few closures are defined for the various events which XMLHttpRequest can\n          // emit. This allows them to be unregistered as event listeners later.\n\n          // First up is the load event, which represents a response being fully available.\n          const onLoad = this.maybePropagateTrace(() => {\n            // Read response state from the memoized partial data.\n            let {headers, status, statusText, url} = partialFromXhr();\n\n            // The body will be read out if present.\n            let body: any | null = null;\n\n            if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            }\n\n            // Normalize another potential bug (this one comes from CORS).\n            if (status === 0) {\n              status = !!body ? HTTP_STATUS_CODE_OK : 0;\n            }\n\n            // ok determines whether the response will be transmitted on the event or\n            // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n            // but a successful status code can still result in an error if the user\n            // asked for JSON data and the body cannot be parsed as such.\n            let ok = status >= 200 && status < 300;\n\n            // Check whether the body needs to be parsed as JSON (in many cases the browser\n            // will have done that already).\n            if (req.responseType === 'json' && typeof body === 'string') {\n              // Save the original body, before attempting XSSI prefix stripping.\n              const originalBody = body;\n              body = body.replace(XSSI_PREFIX, '');\n              try {\n                // Attempt the parse. If it fails, a parse error should be delivered to the\n                // user.\n                body = body !== '' ? JSON.parse(body) : null;\n              } catch (error) {\n                // Since the JSON.parse failed, it's reasonable to assume this might not have\n                // been a JSON response. Restore the original body (including any XSSI prefix)\n                // to deliver a better error response.\n                body = originalBody;\n\n                // If this was an error request to begin with, leave it as a string, it\n                // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                if (ok) {\n                  // Even though the response status was 2xx, this is still an error.\n                  ok = false;\n                  // The parse error contains the text of the body that failed to parse.\n                  body = {error, text: body} as HttpJsonParseError;\n                }\n              }\n            }\n\n            if (ok) {\n              // A successful response is delivered on the event stream.\n              observer.next(\n                new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n              // The full body has been received and delivered, no further events\n              // are possible. This request is complete.\n              observer.complete();\n            } else {\n              // An unsuccessful request is delivered on the error channel.\n              observer.error(\n                new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n            }\n          });\n\n          // The onError callback is called when something goes wrong at the network level.\n          // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n          // transmitted on the error channel.\n          const onError = this.maybePropagateTrace((error: ProgressEvent) => {\n            const {url} = partialFromXhr();\n            const res = new HttpErrorResponse({\n              error,\n              status: xhr.status || 0,\n              statusText: xhr.statusText || 'Unknown Error',\n              url: url || undefined,\n            });\n            observer.error(res);\n          });\n\n          let onTimeout = onError;\n\n          if (req.timeout) {\n            onTimeout = this.maybePropagateTrace((_: ProgressEvent) => {\n              const {url} = partialFromXhr();\n              const res = new HttpErrorResponse({\n                error: new DOMException('Request timed out', 'TimeoutError'),\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Request timeout',\n                url: url || undefined,\n              });\n              observer.error(res);\n            });\n          }\n\n          // The sentHeaders flag tracks whether the HttpResponseHeaders event\n          // has been sent on the stream. This is necessary to track if progress\n          // is enabled since the event will be sent on only the first download\n          // progress event.\n          let sentHeaders = false;\n\n          // The download progress event handler, which is only registered if\n          // progress events are enabled.\n          const onDownProgress = this.maybePropagateTrace((event: ProgressEvent) => {\n            // Send the HttpResponseHeaders event if it hasn't been sent already.\n            if (!sentHeaders) {\n              observer.next(partialFromXhr());\n              sentHeaders = true;\n            }\n\n            // Start building the download progress event to deliver on the response\n            // event stream.\n            let progressEvent: HttpDownloadProgressEvent = {\n              type: HttpEventType.DownloadProgress,\n              loaded: event.loaded,\n            };\n\n            // Set the total number of bytes in the event if it's available.\n            if (event.lengthComputable) {\n              progressEvent.total = event.total;\n            }\n\n            // If the request was for text content and a partial response is\n            // available on XMLHttpRequest, include it in the progress event\n            // to allow for streaming reads.\n            if (req.responseType === 'text' && !!xhr.responseText) {\n              progressEvent.partialText = xhr.responseText;\n            }\n\n            // Finally, fire the event.\n            observer.next(progressEvent);\n          });\n\n          // The upload progress event handler, which is only registered if\n          // progress events are enabled.\n          const onUpProgress = this.maybePropagateTrace((event: ProgressEvent) => {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            let progress: HttpUploadProgressEvent = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded,\n            };\n\n            // If the total number of bytes being uploaded is available, include\n            // it.\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            }\n\n            // Send the event.\n            observer.next(progress);\n          });\n\n          // By default, register for load and error events.\n          xhr.addEventListener('load', onLoad);\n          xhr.addEventListener('error', onError);\n          xhr.addEventListener('timeout', onTimeout);\n          xhr.addEventListener('abort', onError);\n\n          // Progress events are only enabled if requested.\n          if (req.reportProgress) {\n            // Download progress is always enabled if requested.\n            xhr.addEventListener('progress', onDownProgress);\n\n            // Upload progress depends on whether there is a body to upload.\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.addEventListener('progress', onUpProgress);\n            }\n          }\n\n          // Fire the request, and notify the event stream that it was fired.\n          xhr.send(reqBody!);\n          observer.next({type: HttpEventType.Sent});\n          // This is the return from the Observable function, which is the\n          // request cancellation handler.\n          return () => {\n            // On a cancellation, remove all registered event listeners.\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('abort', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onTimeout);\n\n            if (req.reportProgress) {\n              xhr.removeEventListener('progress', onDownProgress);\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.removeEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Finally, abort the in-flight request.\n            if (xhr.readyState !== xhr.DONE) {\n              xhr.abort();\n            }\n          };\n        });\n      }),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {FetchBackend} from './fetch';\nimport {HttpXhrBackend} from './xhr';\nimport {isPlatformServer} from '@angular/common';\nimport {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  PLATFORM_ID,\n  ɵConsole as Console,\n  ɵformatRuntimeError as formatRuntimeError,\n  PendingTasks,\n} from '@angular/core';\nimport {finalize} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {\n  ChainedInterceptorFn,\n  HTTP_INTERCEPTOR_FNS,\n  HTTP_ROOT_INTERCEPTOR_FNS,\n  REQUESTS_CONTRIBUTE_TO_STABILITY,\n  chainedInterceptorFn,\n  interceptorChainEndFn,\n} from './interceptor';\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: HttpXhrBackend})\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable({providedIn: 'root'})\nexport class HttpInterceptorHandler implements HttpHandler {\n  private chain: ChainedInterceptorFn<unknown> | null = null;\n  private readonly pendingTasks = inject(PendingTasks);\n  private readonly contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n\n  constructor(\n    private backend: HttpBackend,\n    private injector: EnvironmentInjector,\n  ) {\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      // This flag is necessary because provideHttpClientTesting() overrides the backend\n      // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n      // no HTTP calls are actually performed during the test, so producing a warning would be\n      // misleading.\n      const isTestingBackend = (this.backend as any).isTestingBackend;\n\n      if (\n        typeof ngServerMode !== 'undefined' &&\n        ngServerMode &&\n        !(this.backend instanceof FetchBackend) &&\n        !isTestingBackend\n      ) {\n        fetchBackendWarningDisplayed = true;\n        injector\n          .get(Console)\n          .warn(\n            formatRuntimeError(\n              RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n              'Angular detected that `HttpClient` is not configured ' +\n                \"to use `fetch` APIs. It's strongly recommended to \" +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.',\n            ),\n          );\n      }\n    }\n  }\n\n  handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(\n        new Set([\n          ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n          ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n        ]),\n      );\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n        (nextSequencedFn, interceptorFn) =>\n          chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n        interceptorChainEndFn as ChainedInterceptorFn<unknown>,\n      );\n    }\n\n    if (this.contributeToStability) {\n      const removeTask = this.pendingTasks.add();\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      ).pipe(finalize(removeTask));\n    } else {\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      );\n    }\n  }\n}\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: HttpInterceptorHandler})\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '../../index';\nimport {\n  EnvironmentInjector,\n  Inject,\n  inject,\n  Injectable,\n  runInInjectionContext,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {\n  HTTP_STATUS_CODE_OK,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpResponse,\n} from './response';\nimport {RuntimeErrorCode} from './errors';\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document | undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(\n    private callbackMap: JsonpCallbackContext,\n    @Inject(DOCUMENT) private document: any,\n  ) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new RuntimeError(\n        RuntimeErrorCode.JSONP_WRONG_METHOD,\n        ngDevMode && JSONP_ERR_WRONG_METHOD,\n      );\n    } else if (req.responseType !== 'json') {\n      throw new RuntimeError(\n        RuntimeErrorCode.JSONP_WRONG_RESPONSE_TYPE,\n        ngDevMode && JSONP_ERR_WRONG_RESPONSE_TYPE,\n      );\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new RuntimeError(\n        RuntimeErrorCode.JSONP_HEADERS_NOT_SUPPORTED,\n        ngDevMode && JSONP_ERR_HEADERS_NOT_SUPPORTED,\n      );\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any | null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // Remove the <script> tag if it's still on the page.\n        node.remove();\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = () => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(\n              new HttpErrorResponse({\n                url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK),\n              }),\n            );\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(\n            new HttpResponse({\n              body,\n              status: HTTP_STATUS_CODE_OK,\n              statusText: 'OK',\n              url,\n            }),\n          );\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(\n          new HttpErrorResponse({\n            error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url,\n          }),\n        );\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    foreignDocument ??= (this.document.implementation as DOMImplementation).createHTMLDocument();\n\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return runInInjectionContext(this.injector, () =>\n      jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '../../index';\nimport {\n  EnvironmentInjector,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  runInInjectionContext,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'XSRF_ENABLED' : '',\n  {\n    factory: () => true,\n  },\n);\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'XSRF_COOKIE_NAME' : '',\n  {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n  },\n);\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'XSRF_HEADER_NAME' : '',\n  {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n  },\n);\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable({providedIn: 'root'})\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string | null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(XSRF_COOKIE_NAME) private cookieName: string,\n  ) {}\n\n  getToken(): string | null {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: HttpXsrfCookieExtractor})\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string | null;\n}\n\nexport function xsrfInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (\n    !inject(XSRF_ENABLED) ||\n    req.method === 'GET' ||\n    req.method === 'HEAD' ||\n    lcUrl.startsWith('http://') ||\n    lcUrl.startsWith('https://')\n  ) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return runInInjectionContext(this.injector, () =>\n      xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EnvironmentProviders,\n  inject,\n  InjectionToken,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\n\nimport {HttpBackend, HttpHandler, HttpInterceptorHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FETCH_BACKEND, FetchBackend} from './fetch';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, legacyInterceptorFnFactory} from './interceptor';\nimport {\n  jsonpCallbackContext,\n  JsonpCallbackContext,\n  JsonpClientBackend,\n  jsonpInterceptorFn,\n} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n  kind: KindT,\n  providers: Provider[],\n): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```ts\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n * @see [HTTP Client](guide/http/setup)\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(\n  ...features: HttpFeature<HttpFeatureKind>[]\n): EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map((f) => f.ɵkind));\n    if (\n      featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n      featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)\n    ) {\n      throw new Error(\n        ngDevMode\n          ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\n          : '',\n      );\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        return inject(FETCH_BACKEND, {optional: true}) ?? inject(HttpXhrBackend);\n      },\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(\n  interceptorFns: HttpInterceptorFn[],\n): HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(\n    HttpFeatureKind.Interceptors,\n    interceptorFns.map((interceptorFn) => {\n      return {\n        provide: HTTP_INTERCEPTOR_FNS,\n        useValue: interceptorFn,\n        multi: true,\n      };\n    }),\n  );\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '',\n);\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    },\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration({\n  cookieName,\n  headerName,\n}: {\n  cookieName?: string;\n  headerName?: string;\n}): HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see [HTTP client setup](guide/http/setup#withrequestsmadeviaparent)\n * @see {@link provideHttpClient}\n * @publicApi 19.0\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n            'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient',\n          );\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @see [Advanced fetch Options](guide/http/making-requests#advanced-fetch-options)\n *\n * @publicApi\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: FETCH_BACKEND, useExisting: FetchBackend},\n    {provide: HttpBackend, useExisting: FetchBackend},\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {\n  provideHttpClient,\n  withInterceptorsFromDi,\n  withJsonpSupport,\n  withNoXsrfProtection,\n  withXsrfConfiguration,\n} from './provider';\nimport {\n  HttpXsrfCookieExtractor,\n  HttpXsrfInterceptor,\n  HttpXsrfTokenExtractor,\n  XSRF_DEFAULT_COOKIE_NAME,\n  XSRF_DEFAULT_HEADER_NAME,\n  XSRF_ENABLED,\n} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().ɵproviders],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(\n    options: {\n      cookieName?: string;\n      headerName?: string;\n    } = {},\n  ): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\n */\n@NgModule({\n  /**\n   * Configures the dependency injector where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [provideHttpClient(withInterceptorsFromDi())],\n})\nexport class HttpClientModule {}\n\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n * @deprecated `withJsonpSupport()` as providers instead\n */\n@NgModule({\n  providers: [withJsonpSupport().ɵproviders],\n})\nexport class HttpClientJsonpModule {}\n"],"names":["constructor","headers","Map","lazyInit","split","forEach","line","index","indexOf","name","slice","value","trim","Headers","addHeaderEntry","Object","entries","values","setHeaderEntries","get","keys","init","copyFrom","lazyUpdate","update","other","key","clone","HttpHeaders","concat","toLowerCase","base","op","undefined","push","set","toDelete","delete","normalizedNames","existing","filter","length","headerValues","Array","isArray","map","toString","HttpContextToken","token","has","encodeValue","standardEncoding","decodeURIComponent","decodeValue","rawParams","params","replace","param","eqIdx","val","codec","decodeKey","list","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","STANDARD_ENCODING_REGEX","s","t","valueToString","options","fromString","fromObject","RuntimeError","ngDevMode","paramParser","encoder","getAll","appendAll","updates","_value","mightHaveBody","method","isArrayBuffer","isBlob","Blob","isUrlSearchParams","URLSearchParams","TEXT_CONTENT_TYPE","body","context","transferCache","timeout","toUpperCase","fourth","HttpEventType","statusText","defaultStatus","defaultStatusText","url","redirected","responseType","ok","status","type","ResponseHeader","HttpHeaderResponse","XSSI_PREFIX","FETCH_BACKEND","destroyRef","inject","DestroyRef","destroyed","handle","request","Observable","observer","aborter","signal","then","noop","error","HttpErrorResponse","timeoutId","ngZone","runOutsideAngular","setTimeout","aborted","abort","DOMException","clearTimeout","fetchPromise","fetchImpl","urlWithParams","next","Sent","response","reportProgress","contentLength","chunks","getReader","reqZone","Zone","current","canceled","reader","cancel","done","read","partialText","decoder","TextDecoder","decode","stream","DownloadProgress","total","loaded","run","complete","chunksAll","concatChunks","receivedLength","CONTENT_TYPE_HEADER","contentType","HTTP_STATUS_CODE_OK","binContent","text","JSON","parse","buffer","property","errorCode","xhrFactory","maybePropagateTrace","fn","tracingService","propagate","ngServerMode","ɵloadImpl","source","pipe","switchMap","build","req","withCredentials","ACCEPT_HEADER","ACCEPT_HEADER_VALUE","detectedType","detectContentTypeHeader","xhr","setRequestHeader","headerResponse","partialFromXhr","HTTP_STATUS_CODE_NO_CONTENT","responseText","originalBody","res","onError","_","onDownProgress","event","progressEvent","HttpBackend","deps","target","i0","ɵɵFactoryTarget","Injectable","providedIn","HttpXhrBackend","decorators","backend","injector","pendingTasks","PendingTasks","contributeToStability","REQUESTS_CONTRIBUTE_TO_STABILITY","fetchBackendWarningDisplayed","isTestingBackend","FetchBackend","HTTP_ROOT_INTERCEPTOR_FNS","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","callbackMap","document","nextCallback","callback","createElement","node","src","finished","removeEventListener","onLoad","remove","Error","JSONP_ERR_NO_CALLBACK","HttpResponse","appendChild","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","InjectionToken","XSRF_DEFAULT_HEADER_NAME","factory","HttpXsrfCookieExtractor","cookieName","lastCookieString","cookieString","lastToken","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","DOCUMENT","ɵɵngDeclareInjectable","ɵprov","HttpXsrfTokenExtractor","useExisting","getToken","HttpFeatureKind","providers","HttpHandler","HttpInterceptorHandler","provide","feature","features","ɵproviders","LEGACY_INTERCEPTOR_FN","useFactory","legacyInterceptorFnFactory","multi","CustomXsrfConfiguration","withJsonpSupport","makeHttpFeature","JsonpSupport","ngModule","HttpClientXsrfModule","withNoXsrfProtection","NgModule","HTTP_INTERCEPTORS","HttpXsrfInterceptor","useClass","headerName"],"mappings":";;;;;;;;;;;;;;;;;AAyDUA,EAAAA,WAAAA,CAAAC,OAAA,EAAA;SAC6BA,OAAA,EAAA;MAE3B,IAAAA,CAAAA,OAAA,OAAAC,GAAA,EAAA;AAEJ,KAAA,MAAA,IAAA,OAAAD,OAAA,KAAA,QAAA,EAAA;AACF,MAAA,IAAC,CAAAE,QAAA,GAAA,MAAA;;AAICF,QAAAA,OAAgC,CAAAG,KAAA,CAAAC,IAAAA,CAAAA,CAAAA,OAAA,CAAAC,IAAA,IAAA;AAEpC,UAAA,MAAAC,KAAA,GAAAD,IAAA,CAAAE,OAAA,CAAA,GAAA,CAAA;cAAOD,KAAA,GAAA,CAAA,EAAA;AACL,YAAA,MAAAE,IAAA,GAAAH,IAAA,CAAAI,KAAA,IAAAH,KAAA,CAAA;YAAK,MAAAI,KAAW,GAAKL,IAAA,CAAAI,KAAA,CAAAH,KAAA,MAAAK,IAAA,EAAA;AACnB,YAAA,mBAAW,CAAAH,IAAA,EAAAE,KAAA,CAAA;;;;AAKTE,KAAAA,MAAAA,IAAAA,OAAAA,OAAA,KAAA,WAAqB,IAAAZ,OAAK,YAAAY,OAAA,EAAA;AAC5B,MAAA,IAAA,CAAA,OAAA,GAAA,IAAEX,GAAA,EAAA;AACJ,MAAA,OAAA,CAAA,OAAA,CAAC,CAAAS,KAAA,EAAAF,IAAA,KAAA;AACH,QAAA,IAAA,CAAAK,cAAA,CAAAL,IAAA,EAAAE,KAAA,CAAA;;;;;;;;QASCI,MAAA,CAAAC,OAAA,CAAAf,OAAA,EAAAI,OAAA,CAAA,CAAA,CAAAI,IAAA,EAAAQ,MAAA,CAAA,KAAA;AAAA,UAAA,IAAA,CAAAC,gBAAA,CAAAT,IAAA,EAAAQ,MAAA,CAAA;SACa,CAAA;;;;;;;;AA+BhBE,EAAAA,GAAAA,CAAAV,IAAA,EAAA;;;;;MAaAW,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DI;AACF;MACFC,GAAA;AAEQ,IAAA,IAAA,CAAA,CAAA,IAAA,CAAAlB,QAAA,EAAA;MAED,IAAAA,IAAAA,CAAAA,QAAmB;AACxB,QAAA,IAAM,CAAAmB,QAAA,CAAc,IAAA,CAAAnB,QAAe,CAAA;OAErC,MAAA;AAEQ,QAAA,IAAA,CAAAA,QAAA,EAAA;AAEN;MACE,IAAA,CAAAA,QAAA,GAAQ,IAAA;MACR,IAAA,CAAA,CAAA,IAAA,CAAAoB,UAAQ,EAAA;QACN,IAAA,CAAAA,UAAS,CAAAlB,OAAA,CAAAmB;AACT,QAAA,IAAA,CAAAD,UAAA,GAAA,IAAA;;;;AAGAD,EAAAA,QAAAA,CAAAG,KAAA,EAAA;;4BAEA,CAAAL,IAAA,EAAA,CAAA,CAAAf,OAAA,CAAAqB,GAAA,IAAA;;;KAGA,CAAA;;AAGFC,EAAAA,KAAAA,CAAAH,MAAQ,EAAA;IACN,MAAAG,KAAA,GAAA,IAAAC,WAAA,EAAA;qBACK,CAAA,CAAA,IAAA,CAAQzB,QAAE,IAAA,IAAA,CAAAA,QAAA,YAAAyB,WAAA,GAAA,IAAA,CAAAzB,QAAA,GAAA,IAAA;AACb,IAAA,KAAA,CAAAoB,UAAA,GAAA,CAAA,IAAY,CAAAA,cAAQ,EAAA,EAAIM,MAAA,CAAA,CAAAL,MAAA,CAAA,CAAA;WACxBG,KAAA;;;aAGa,GAAAH,MAAA,CAAAf,IAAA,CAAAqB,WAAA,EAAA;;;;AAIb,QAAA,IAAAnB,KAAA,GAAAa,MAAA,CAAAb,KAAA;AACE,QAAA,IAAA,OAAAA,KAAA,KAAA,QAAA,EAAA;AAEFA,UAAAA,KAAA,IAAAA,KAAA,CAAA;;wBACE,KAAA,CAAA,EAAA;;;mCAGE,CAAAa,MAAA,CAAAf,IAAA,EAAAiB,GAAA,CAAA;AACV,QAAA,MAAAK,IAAA,GAAA,CAAAP,MAAA,CAAAQ,EAAA,KAAA,GAAA,GAAA,IAAA,CAAA/B,OAAA,CAAAkB,GAAA,CAAAO,GAAA,IAAAO,SAAA,KAAA,EAAA;YACF,CAAAC,IAAA,CAAAvB,GAAAA,KAAA,CAAA;AAEsB,QAAA,IAAA,CAAAV,OAAA,CAAAkC,GAAA,CAAAT,GAAA,EAAAK,IAAA,CAAA;AACpB,QAAA;AACA,MAAA,KAAA,GAAA;AACA,QAAA,MAAIK,QAAA,GAAAZ,MAAA,CAAAb,KAAA;AACF,QAAA,IAAA,CAAAyB,QAAA,EAAA;AACF,UAAA,IAAA,CAAAnC,OAAA,CAAAoC,MAAA,CAAAX,GAAA,CAAA;cAAO,CAAAY,eAAA,CAAAD,MAAA,CAAAX,GAAA,CAAA;SAEP,MAAA;AACF,UAAA,IAAAa,QAAA,GAAAtC,IAAAA,CAAAA,OAAA,CAAAkB,GAAA,CAAAO,GAAA,CAAA;AAEwB,UAAA,IAAA,CAAAa,QAAa,EAAA;AACnC,YAAA;AAGA;UACIA,oBAAkBC,MAAY,CAAA7B,KAAC,IAAAyB,QAAA,CAAA5B,OAAA,CAAAG,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA;UACnC,IAAA4B,QAAA,CAAAE,MAAA,KAAA,CAAA,EAAA;AAA2B,YAAA,IAAA,CAAAxC,OAAA,CAAAoC,MAAA,CAAAX,GAAA,CAAA;AAC7B,YAAA,IAAA,CAAAY,eAAA,CAAAD,MAAA,CAAAX,GAAA,CAAA;;AAIG,YAAA,IAAA,CAAAzB,OAAA,CAAAkC,GAAA,CAAAT,GAAA,EAAAa,QAAA,CAAA;AACH;;;;;uBAMD5B,KAAA,EAAA;AAED,IAAA,MAAA,GAAA,GAAA,IAAA,CAAAmB,WAAA,EAAA;;;;AAIG,KAAA,MACM;AAID,MAAA,IAAA,CAAA7B,OAA2B,CAAAkC,GAAA,CAAAT,GAAgB,GAAAf,KAAA,CAAA,CAAA;AAC7C;;kBAIFO,CAAAT,IAAA,EAAAQ,MAAA,EAAA;AACFyB,IAAAA,MAAAA,YAAA,GAAA,CAAAC,KAAA,CAAAC,OAAA,CAAA3B,MAAA,CAAAA,GAAAA,MAAA,GAAAA,CAAAA,MAAA,GAAA4B,GAAA,CAAAlC,KAAA,IAAAA,KAAA,CAAAmC,QAAA,EAAA,CAAA;AACF,IAAA,MAAApB,GAAA,GAAAjB,IAAA,CAAAqB,WAAA,EAAA;AAAA7B,IAAAA,IAAAA,CAAAA,OAAA,CAAAkC,GAAA,CAAAT,GAAA,EAAAgB,YAAA,CAAA;;;;;;;;;;;;;;;;ACpR8B,MAAAK,gBAAA,CAAA;;;;;;;;;;;;;;;;;;AA6E1BV,EAAAA,MAAAA,CAAAW,KAAA,EAAA;;;;AAcFC,EAAAA,GAAAA,CAAAD,KAAA,EAAA;;;MAMD5B,GAAA;;;;;;;;AC1CI;AAOM8B,EAAAA,WAAAA,CAAAvC,KAAA,EAAA;IACT,OAAAwC,gBAAA,CAAAxC,KAAA,CAAA;;;IAUQ,OAAAyC,kBAAA,CAAA1B,GAAA,CAAA;AAEJ;AAON2B,EAAAA,WAAAA,CAAA1C,KAAA,EAAA;;AAGM;;;;AAIJ2C,EAAAA,IAAAA,SAAA,CAAAb,MAAA,GAAA,CAAA,EAAA;AAIA,IAAA,MAAAc,MAAA,GAAAD,SAAA,CAAAE,OAAA,YAAApD,KAAA,CAAA,GAAA,CAAA;UAED,CAAAC,OAAA,CAAAoD,KAAA,IAAA;AAEQ,MAAA,MAAAC,KAAA,GAA0BD,KAAA,CAAAjD,OAAA,CAAA,GAAA,CAAA;AAC1B,MAAA,MAAA,CAAAkB,GAAA,EAAAiC,GAAA,CAAA,GAAkBD,KAAA,IAI3B,CAAA,CAAA,GAAA,CAAAE,KAAA,CAAAC,SAAA,CAAAJ,KAAA,SAES,CAAAG,KAAA,CAAAC,SAAA,CAAAJ,KAAA,CAAA/C,KAAA,IAAAgD,KAAA,CAAA,CAAA,EAAAE,KAAA,CAAAP,WAAA,CAAAI,KAAA,CAAA/C,KAAA,CAAAgD,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACP,MAAA,MAAAI,IAAA,GAAAjB,GAAA,CAAA1B,GAAA,CAAAO,GAAA,CAAA,IAAA,EAAA;MACFoC,IAAA,CAAA5B,IAAA,CAAAyB,GAAA,CAAA;AAgCAd,MAAAA,GAAA,CAAAV,GAAA,CAAAT,GAAA,EAAAoC,IAAA,CAAA;;;;;AASG,MAAA,uBAAA,GAAA,iBAAA;MACHC,8BAAA,GAAA;EACU,IAAG,EAAA,GAAA;AACH,EAAA,IAAA,EAAA,GAAA;;;;EAMN,IAAA,EAAA,GAAA;EACE,IAAA,EAAA,GAAA;AACE,EAAA,IAAA,EAAA;;AAKFZ,SAAAA,gBAAAA,CAAAa,CAAA,EAAA;SACFC,kBAAA,CAAAD,CAAA,CAAAR,CAAAA,OAAA,CAAAU,uBAAA,EAAA,CAAAC,CAAA,EAAAC,CAAA,KAAAL,8BAAA,CAAAK,CAAA,KAAAD,CAAA,CAAA;;AACEE,SAAAA,aAAAA,CAAA1D,KAAA,EAAA;AACA,EAAA,OAAA,GAAAA,KAAA,CAAA,CAAA;;;;;;;;;IA2DD,IAAA2D,OAAA,CAAAC,UAAA,EAAA;MACmD,IAAAD,OAAA,CAAAE,UAAA,EAAA;QACrB,MAAAC,IAAAA,aAAA,OAAAC,SAAA,IAAA,gDAAA,CAAA;AACjC;MAEA,IAAA,CAAA7B,GAAA,GAAA8B,WAAA,CAAAL,OAAA,CAAAC,UAAA,EAAA,IAAA,CAAAK,OAAA,CAAA;;MAIG,IAAA/B,CAAAA,GAAA,GAAA3C,IAAAA,GAAA,EAAA;MACHa,MAAA,CAAAK,IAEC,CAAAkD,OAAA,CAAAE,UAAA,CAAA,CAAAnE,OAAA,CAAAqB,GAAA,IAAA;AACC,QAAA,MAAMf,KAAA,GAAA2D,OAAA,CAAsBE,UAAA,CAAA9C,GAAA,CAAA;AAKtB,QAAA,MAAAT,MAAA,GAAA0B,KAAQ,CAAAC,iBAAkBjC,KAAE,CAAAkC,GAAA,CAAAwB,aAAe,CAAAA,GAAAA,CAAAA,aAAA,CAAA1D,KAAA,CAAA,CAAA;AAC7C,QAAA,IAAA,CAAAkC,GAAA,CAAAV,GAAA,CAAAT,GAAA,EAAAT,MAAA,CAAA;AAAA,OAAA,CAAA;;UAEA,CAAA4B,GAAA,GAAA,IAAA;;;;AAWH,IAAA,IAAA,CAAAxB,IAAA,EAAA;;;;;;;;AAwBIwD,EAAAA,MAAAA,CAAApB,KAAA,EAAA;;;;;eAUsE;;;;AAezE,IAAA,OAAA,IAAA,CAAA9B,KAAA,CAAA;MAAA8B,KAAA;MAAA9C,KAAA;MAAAqB,EAAA,EAAA;AAAA,KAAA,CAAA;;AAOI8C,EAAAA,SAAAA,CAAAvB,MAAA,EAAA;AACA,IAAA,MAAAwB,OAAA,GAAA,EAAA;;;;;AAMEA,UAAAA,OAAA,CAAA7C,IAAA,CAAA;YAAAuB,KAAA;AAAA9C,YAAAA,KAAA,EAAAqE,MAAA;YAAAhD,EAAA,EAAA;AAAA,WAAA,CAAA;AACE,SAAA,CAAA;;AAKA+C,QAAAA,OAAA,CAAA7C,IAAA,CAAA;UAAAuB,KAAA;AAAI9C,UAAAA;;;;;;;;AAUZ,IAAA,OAAA,IAAA,CAAAgB,KAAA,CAAA;MAAA8B,KAAA;MAAA9C,KAAA;MAAAqB,EAAA,EAAA;AAAA,KAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvTN,SAASiD,aAAAA,CAAAC,MAA4B,EAAA;UAC3BA,MAAA;AACN,IAAA,KAAA;IACA,KAAA,KAAA;;;AAiCK,IAAA,KAAA,OAAA;MACA;AACT,IAAA;AAEA,MAAA,OAAA,IAAA;;;AASAC,SAAAA,aAAAA,CAAAxE,KAAA,EAAA;;;AAUGyE,SAAAA,MAAAA,CAAAzE,KAAA,EAAA;AACH,EAAA,OAAA,OAAA0E,IAAA,KAAA,WAAA,IAAA1E,KAAA,YAAA0E,IAAA;;;;AAaA;AAOGC,SAAAA,iBAAAA,CAAA3E,KAAA,EAAA;AACG,EAAA,OAAA,OAAA4E,eAAA,KAAA,WAAA,IAAA5E,KAAA,YAAA4E,eAAA;;;;AAsBJ,MAAAC,iBAAA,GAAA,YAAA;;;;;EA0CAC,IAAA,GAAA,IAAA;;EAWAC,OAAA;;;;;;;;;;;;iBA8QoC,MAAA;;;;EAoC9BC,aAAA;EAUFC,OAAA;;;AAIA,IAAA,IAAA,CAAAV,MAAsB,GAAAA,MAAA,CAAAW,WAAA,EAAA;AAKpB,IAAA,IAAAvB,OAAA;AA4OA,IAAA,IAAAW,aAAgB,CAAA,IAAA,CAAAC,MAAA,CAAA,IAAA,CAAA,CAAAY,MAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpuBtB,IAAAC;;;AAYA,EAAA,aAAA,CAAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;;AAYGA,EAAAA,aAAA,CAAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AAMHA,EAAAA,aAAA,CAAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;;;;;;EA+UDC,UAAA;;;;;;AA0DMhG,EAAAA,WAAAA,CAAyBqB,IAAM,EAAA4E,aAAA,GAAA,GAAA,EAAAC,iBAAA,GAAA,IAAA,EAAA;;;;AAQhC,IAAA,IAAA,CAAAC,GAAA,GAAA9E,IAAA,CAAA8E,GAAA,IAAA,IAAA;AAAN,IAAA,IAAA,CAAAC,UAUE,GAAA/E,IAAA,CAAA+E,UAAA;AAGA,IAAA,IAAA,CAAAC,YAAA,GAAAhF,IAAA,CAAAgF,YAAA;IAEA,IAAA,CAAAC,EAAA,GAAA,IAAA,CAAAC,MAAA,IAAA,GAAA,IAAA,IAAA,CAAAA,MAAA,GAAA,GAAA;;;;;;AAuBA;EACAC,IAAA,GAAAT,aAAA,CAAAU,cAAA;OAYA9E,CAAAH,MAAA,GAAA,EAAA,EAAA;AAMA,IAAA,OAAA,IAAAkF,kBAAA,CAAA;;;AAGAV,MAAAA,UAAA,EAAAxE,MAAA,CAAAwE,UAAA,SAAAA,UAAA;AAEAG,MAAAA,GAAA,EAAA3E,MAKA,CAAA2E,GAAA,IAAA,IAAA,CAAAA,GAAA,IAAAlE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCjeI0E,aAAA,GAAA,cAAA;AAoBH,MAEHC,aAAA,GAAyB,kBAE0E,CAEhFlC,OAAAA,SAEA,KACAA,WAAAA,IAAAA,SAAA,GAAU,eACV;;;;;;EAkCbmC,UAAA,GAAAC,MAAA,CAAAC,UAAA,CAAA;WAEJ,GAAA,KAAA;EAEQ/G,WAAA,GAAA;;AAMN,MAAA,IAAA,CAAAgH,SAAA,GAAA,IAAA;AACI,KAAA,CAAA;AAEoG;AACpBC,EAAAA,MAAAA,CAAAC,OAAA,EAAA;WAC5E,IAAAC,UAAA,CAAAC,QAAA,IAAA;;oBAMoC,CAAAF,OAAA,EAAAG,OAAA,CAAAC,MAAA,EAAAF,QAAA,EAAAG,IAAA,CAAAC,IAAA,EAAAC,KAAA,IAAAL,QAAA,CAAAK,KAAA,CAAA,IAAAC,iBAAA,CAAA;AAAAD,QAAAA;AAAA,OAAA,CAAA,CAAA,CAAA;;;AAOnCE,QAAAA,SAAA,OAAY,CAAAC,MAAA,CAAAC,iBAAA,OAAAC,UAAA,CAAA,MAAA;AACnB,UAAA,IAAA,CAAAT,OAAc,CAAAC,MAAA,CAAAS;AAGVV,YAAAA,OAAA,CAAAW,KAAc,CAAA,IAAAC,YAAW,CAAA,kBAAA,EAAA;AAI1B;kBAEI,CAAArC,OAAA,CAAA,CAAA;;AAGT,MAAA,OAAA,MAAA;QACA,IAAA+B,SAAgB,KAAA1F,SAAW,EAAA;AAGvBiG,UAAAA,YAAiB,CAAAP;;AAGV,QAAA,OAAA,CAAAK,KAAA,EAAA;;;;kBAOTd,OAAA,EAAMI,MAAuB,EAAAF,QAAE,EAAA;uCACR,CAAAF,OAAA,CAAA;;;MAUnB,MAAAiB,2BAIyFN,iBAAA,CAAA,MAAA,IAAA,CAAAO,SAAA,CAAAlB,OAAA,CAAAmB,aAAA,EAAA;QAAAf,MAAA;QAAA,GAAAjG;AAAA,OAAA,CAAA,CAAA;iDAK5B,CAAA8G,YAAA,CAAA;AAE7Df,MAAAA,QAAA,CAAAkB,IAAA,CAAA;QAAA9B,IAAA,EAAAT,aAAA,CAAAwC;AAAA,OAAA,CAAA;mCACwE;;;;;yBAYhE,CAAAvC,UAAA;QAGRG,GAAA,EAAAe,OAAA,CAAAmB,aAAY;QACZpI,OAAA,EAAAwH,KAAA,CAAAxH;OAAA,CAAA,CAAA;AAEA,MAAA;;AAGM,IAAA,MAAA,OAAA,GAAA,IAAA2B,WAAA,CAAE4G,QAAC,CAAAvI,OAAA,CAAA;oBACD,GAAAuI,QAAA,CAAAxC;;0BAGNO,MAAM;;AAIFW,IAAAA,IAAAA,OAAA,CAAAuB,cAAA,EAAA;;;;;;;AAGJ;qBACF,EAAA;YAIsEC,aAAA,GAAAF,QAAA,CAAAvI,OAAA,CAAAkB,GAAA,CAAA,gBAAA,CAAA;YAC1EwH,MAAmD,GAAA,EAAA;kBAE8B,GAAAH,QAAA,CAAA/C,IAAA,CAAAmD,SAAA,EAAA;wBACrE,GAAA,CAAA;;qBAGZ;AAIA,MAAA,MAAAC,OAAI,GAAA,OAAAC,IAAA,KAAAA,WAAAA,IAAAA,IAAA,CAAAC,OAAA;AACF,MAAA,IAAAC,QAAA,GAAA,KAAA;;AAOI,QAAA,OAAA,IAAA,EAAA;;YAeiE,MAAAC,MAAA,CAAAC,MAAA,EAAA;YACGF,QAAA,GAAA,IAAA;AACJ,YAAA;;AAElE,UAAA,MAAA;YAAAG,IAAA;AAAAxI,YAAAA;WAAAsI,GAAAA,MAAAA,MAAA,CAAAG,IAAA,EAAA;cAEND,IAAA,EAAA;AAEA,YAAA;;gBAGE,CAAAjH,IAAA,CAAQvB,KAAC,CAAA;wBAED,IAAAA,KAAA,CAAA8B,MAAA;;uBAGM,GAEAyE,OAAA,CAAAb,YAAA,cACE,CAAAgD,WAAA,IACb,EAAA,IAAA,CAAAC,OAAA,KAAAC,IAAAA,WAAA,EAAAC,EAAAA,MAAA,CAAA7I,KAAA,EAAA;cAAA8I,MAAA,EAAA;AAAA,aAAA,CAAA,GAIuCxH,SAAA;gCACvB,GAAAwG,MAAArB,QAAA,CAAAkB,IAAA,CAAA;cACd9B,IAAA,EAAAT,aAAA,CAAA2D,gBAAA;AACLC,cAAAA,KAAA,EAASjB,aAAA,GAAAA,CAAAA,aAAA,GAAAzG,SAAA;AAEL2H,cAAAA,MAAA,gBAAW;;;AAGDf,YAAAA,OAAAA,GAAAA,OAAA,CAAAgB,GAAA,CAAApB,cAAA,IAAAA,cAAA,EAAA;;;;;AAkBZrB,QAAAA,QAAA,CAAA0C,QAAA,EAAA;AACA,QAAA;;AAIE,MAAA,MAAAC,SAAA,GAAAC,IAAAA,CAAAA,YAAA,CAAArB,MAAA,EAAAsB,cAAA,CAAA;;yBACO,GAAAzB,QAAA,CAAAvI,OAAA,CAAAkB,GAAA,CAAA+I,mBAAA,CAAA,IAAA,EAAA;6BAC6D,CAAAhD,OAAA,EAAA6C,SAAA,EAAAI,WAAA,EAAA5D,MAAA,CAAA;;QAKlEa,QAAA,CAAAK,KAAA,CAAA,IAAAC,iBAAW,CAAA;;AAEbzH,UAAAA,OAAA,EAAA2B,IAAAA,WAAO,CAAA4G,QAAA,CAAAvI,OAAA,CAAA;kBACTuI,QAAA,CAAAjC,MAAA;UACFP,UAAA,EAAAwC,QAAA,CAAAxC,UAAA;AAAAG,UAAAA,GAAA,EAAWqC,QAAA,CAAArC,GAAA,IAAAe,OAAA,CAAAmB;;AAEX,QAAA;;;AAKJ,IAAA,IAAA,MAAA,KAAA,CAAA,EAAA;eAEQ5C,IAAA,GAAA2E,mBAAuC,GAAA,CAAA;;AAW7C,IAAA,MAAA9D,EAAA,GAAOC,MAAgB,IAAA,OAAAA,MAAA,GAAA,GAAA;oBAC6C,GAAAiC,QAAA,CAAApC,UAAA;AAClE,IAAA,MAAAC,YAAA,GAAAmC,QAAA,CAAAhC,IAAA;;;;;QAQED,MAAI;QAERP,UAAA;QAGIG,GAAA;QAEFC,UAA0C;AAC1CC,QAAAA;;AAMA,MAAA,QAAA,CAAAyD,QAAM,EAAA;;yBAGKpC,iBAAA,CAAA;;;;kBAMH;;QACRtB,UAAA;;;;;AAOE,EAAA,SAAA,CAAA,OAAA,EAAAiE,UAAQ,EAAAF,WAAA,EAAA5D,MAAA,EAAA;AACZW,IAAAA,QAAAA,OAAK,CAAAb,YAAA;AACH,MAAA,KAAA,MAAA;QAIF,MAAAiE,IAAA,GAAAf,IAAAA,WAAA,EAAAC,CAAAA,MAAA,CAAAa,UAAA,CAAA,CAAA7G,OAAA,CAAAmD,aAAA,EAAA,EAAA,CAAA;AACF,QAAA,IAAA2D,IAAA,KAAA,EAAA,EAAA;;;AAKC,QAAA,IAAA;iBAC+BC,IAAA,CAAAC,KAAA,CAAAF,IAAA,CAAA;SAIzB,CAAA,UAAc;UAWvB,IAAA/D,MAAA,GAAA,GAAA,IAAAA,MAAA,IAAA,GAAA,EAAA;AAEA,YAAA,OAAA+D,IAAA;AAAA;;;;;AAKG,MAAA,KAAA,MAAA;AACMjF,QAAAA,OAAAA,IAAAA,IAAA,EAAAgF,UAAA,CAAA,EAAA;AAAA7D,UAAAA,IAAA,EAAA2D;AAAA,SAAA,CAAA;AACA,MAAA,KAAA,aAAA;AACTE,QAAAA,OAAAA,UAAA,CAAAI,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzTI,SAAA,IAAA,GAAA;;;;;;;;;;ACnDE,MAAA9D,WAAA,GAAqB,cAAA;;AAoBrB,EAAA,MAAA,kBAAA,GAAA,CAAA;IAED+D,QAAA,EAAA,WAAA;;AAGC,GAAA,EAAA;IACDA,QAAA,EAAA,OAAA;IACDC,SAAA,EAAA;;AAMED,IAAAA,QAAA,EAAA,UAAA;IACDC,SAAA,EAAA;;AAIED,IAAAA,QAAA,EAAM,MAAA;IACTC,SAAA,EAAA;;AAQFD,IAAAA,QAAA,EAAA,UAAA;IACFC,SAAA,EAAA;;;;;AAQGD,IAAAA,QAAA,EAAA,WAAA;IAEHC,SAAA,EAAA;;AAEID,IAAAA,QAAA,EAAA,UAAA;IACDC,SAAA,EAAA;;AAE4CD,IAAAA,QAAA,EAAA,gBAAA;IAErCC,SAAA,EAAA;;;;;;;;;;;;;;;;;IAqCN,IAAAC,CAAAA,UAAA,GAAAA,UAAA;AAGI;AAKSC,EAAAA,mBAAAA,CAAAC,EAAA,EAAA;IAJ4E,OAAA,IAAA,CAAAC,cAAA,EAAAC,SAAA,GAAA,IAAA,CAAAD,cAAA,CAAAC,SAAA,CAAAF,EAAA,CAAA,GAAAA,EAAA;;;;;;;AA0BjF,IAAA,MAAA,UAAA,GAAA,IAAA,CAAAF,UAAA;mBAYA,OAAAK,4BAAmE,IAAAA,YAAA,IAAAL,UAAA,CAAAM,SAAA,kBACrE,CAAAA,SAAA;AAGA,IAAA,OAAAC,MAAA,CAAAC,IAAA,CAAAC,SAAA,CAAA,MAAA;;8BAM0E,CAAAC,KAAA,EAAA;gBACpC,CAAAC,GAAA,CAAArG,MAAA,EAAAqG,GAAA,CAAAlD,aAAA,CAAA;eAG2C,CAAAmD,eACjF,EAA8C;;AAE5C;;wBAMyD,CAAAvI,GAAA,CAAAwI,aAAA,CAAA,EAAA;8BAC5C,CAAGA,aAAA,EAAAC,mBAAA,CAAA;;gDAMmC,CAAA,EAAA;AACnD,UAAA,MAAAC,YAAA,MAAiB,CAAAC,uBAAI,EAAA;cAI4DD,YAAA,KAAA,IAAA,EAAA;AACnFE,YAAAA,GAAA,CAAAC,gBAAsE,CAAA5B,mBAAA,EAAAyB,YAAA,CAAA;;;QAKpE,IAAAJ,GAAA,CAAA3F,OAAA,EAAK;4BAEmCA,OAAA;;;AAKtC,UAAA,MAAAS,YAAA,GAAAkF,GAAA,CAAAlF,YAAA,CAAAvE,WAAA,EAAA;0BAUsE,GAAAuE,YAAA,cAAAA,YAAA,GAAA,MAAA;;;AAapE,QAAA,IAAA0F,cAAA,GAAA,IAAA;;;;;0BAQA,GAA8EF,GAAA,CAAA7F,UAAA,IAAA,IAAA;mEAGlE,EAAA,CAAA;qCAGZ,IAAAuF,GAAA,CAAApF,GAAA;2BAII,IAAAO,kBAAA,CAAA;YAAAzG,OAAA;YAAAsG,MAAA,EAAAsF,GAAA,CAAAtF,MAAA;YAAAP,UAAA;AAAAG,YAAAA;AAAA,WAAA,CAAA;AAEN,UAAA,OAAA4F,cAAA;;;;;kBAWS;YAAQ/F,UAAA;AAAAG,YAAAA;AAAA,WAAA,GAAA6F,cAAA,EAAA;;UAGjB,IAAAzF,MAAA,KAAA0F,2BAAA,EAAA;0BAIWJ,GAAA,CAAArD,QAAA,KAAA,WAAA,GAAAqD,GAAA,CAAAK,YAAA,GAAAL,GAAA,CAAArD,QAAA;;AAIR,UAAA,IAAAjC,MAAA,KAAA,CAAA,EAAA;kBAEL,GAAA,CAAA,CAAAd,IAAA,GAAA2E,mBAAA,GAAA,CAAA;;yBASO,IAAA,OAAA7D,MAAA,GAAA,GAAA;AAIN,UAAA,IAAAgF,GAAA,CAAAlF,YAAA,KAAA,MAAA,IAAA,OAAAZ,IAAA,KAAA,QAAA,EAAA;YAEH,MAAA0G,YAAA,GAAA1G,IAAA;;YAIA,IAAA;cAIMA,IAAA,GAAAA,IAAA,KAAA,EAAW,GAAA8E,IAAA,CAAAC,KAAA,CAAA/E,IAAgC,CAAA,GAAA,IAAA;AAC3C,aAAA,CACA,OAAAgC,KAAA,EAAA;AAIJhC,cAAAA,IAAA,GAAA0G,YAAE;AAGJ,cAAA,IAAoE7F,EAAA,EAAA;gBAEpEA,EAAA,GAAA,KAAA;gBAEIb,IAAA,GAAA;kBAAAgC,KAAA;AAAc6C,kBAAAA,IAAA,EAAA7E;AAAA,iBAAA;AAGlB;;;;;;;;cAUEO,UAAA;;;6BAQA,EAAA;;oBAME,CAAAyB,KAAA,KAAAC,iBAAA,CAAA;;cAIFzH,OAAA;cACFsG,MAAA;cAAEP,UAAA;;;;;wBAUC,IAAA,CAAA6E,mBAAA,CAAApD,KAAA,IAAA;;;;UAID,MAAA2E,GAAA,OAAA1E,iBAAA,CAAA;YACED,KAAA;;YAIFzB,UAAA,EAAA6F,GAAA,CAAA7F,UAAA,IAAA,eAAA;YACFG,GAAA,EAAAA,GAAA,IAAAlE;WAEA,CAAA;UACAmF,QAAG,CAAAK,KAAiB,CAAA2E,GAAA,CAAA;;AAEjB,QAAA,IAAA,SAAA,GAAAC,OAAA;AACHzG,QAAAA,IAAAA,GAAAA,CAAAA,OAAI,EAAgB;sBAE6B,IAAA,CAAAiF,mBAAA,CAAAyB,CAAA,IAAA;YACjD,MAAA;AAAOnG,cAAAA;AAAe,aAAA,GAAA6F,cAAA,EAAA;;cAEpBvE,KAAA,EAAoB,IAAAQ,YAAA,CAAA,mBAAA,EAAA,cAAA,CAAA;;wBAIf,EAAO4D,GAAA,CAAA7F,UAAA,IAAA,iBAAA;cAEdG,GAAA,EAAAA,GAAA,IAAAlE;;YAGAmF,QAAI,CAAAK,KAAK,CAAA2E,GAAA,CAAA;;;AAOP,QAAA,IAAA,WAAA,GAAG,KAAoB;AAKrB,QAAA,MAAAG,cAAA,GAAA,IAAA,CAAA1B,mBAAA,CAAA2B,KAAA,IAAA;;yBAGA,CAAAR,cAAA,EAAA,CAAA;uBACF,GAAA,IAAA;;AAMF,UAAA,IAAAS,aAAA,GAAA;YACAjG,IAAA,EAAAT,aAAA,CAAA2D,gBAAA;YAELE,MAAA,EAAA4C,KAAA,CAAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC1WG8C,WAAmB,CAAA;;;;;UAAnBA,WAAmB;IAAAC,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;;UAAnBL,WAAmB;AAAAM,IAAAA,UAAA;iBAHyBC;;;;;;;QAG5CP,WAAmB;EAAAQ,UAAA,EAAA,CAAA;UAHrBH,UAAA;AAAA,IAAA,IAAA,EAAA,CAAA;AAAAC,MAAAA;iBAA8C,EAAAC;;;;gCAQhB,GAAA,KAAA;4BAWkB,CAAA;EAShDE,OAAA;EAEIC,QAAA;OARH,GAAA,IAAA;AACFC,EAAAA,YAAA,GAAAvG,MAAA,CAAAwG,YAAA,CAAA;AACFC,EAAAA,qBAAA,GAAAzG,MAAA,CAAA0G,gCAAA,CAAA;EAGCxN,WACEmN,CAAAA,OAAM,EAEFC;IAFJ,IAAAD,CAAAA,OAAM,GAANA,OAAM;IAEF,IAAAC,CAAAA,WAAAA;gBAOkF1I,SAAA,KAAA,WAAA,IAAAA,SAAA,KAAA,CAAA+I,4BAAA,EAAA;YAUtFC,gBAAgB,GAAO,IAAC,QAAgB,iBAAG;iBAIrCzC,YAAA,KAAA,WAAA,gBACC,IAGT,EAAC,IAAA,CAAAkC,OAAA,YAAAQ,YAAA,CAAA,IACF,CAAAD,gBAAA;AAzEUD,QAAAA,4BAAA,GAAA,IAAA;uDADA,CA6Eb,IAAA,EAAA,uDAAA;;;;AAaAxG,EAAAA,qBAAiC,EAAA;;4GADhCmG,QAAU,CAAAjM,GAAA,CAAAyM,yBAAA,EAAA,EAAA,CAAA,CAAC,CAAA;;;;;;;;;;;;;;gCApD0C;IAAAjB,IAAA,EAAA,CAAA;AAAA3J,MAAAA,KAAA,EAAA0J;AAAA,KAAA,EAAA;MAAA1J,KAAA,EAAA6J,EAAA,CAAAgB;AAAA,KAAA,CAAA;AAAAjB,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;;;;;gCAAA;AAAAC,IAAAA,UAAA,EADkC;AAAA,GAAA,CAAA;;;;;;8BAClC;EAAAE,UAAA,EAAA,CAAA;;;gBADkC,EAAA;KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDxF,IAAAY,aAAO,GAA2B,CAAA;AAoBjC,IAAAC,eAAA;;;AASE,MAAAC,6BAAA,GAAA,6CAAA;AAID,MAAAC,+BAAA,GAAA,wCAAA;AAaF,MAAAC,oBAAA,CAAA;;;;;;;;;;;EA0CMlO,WAAAA,CAAAmO,WAAA,EAAAC,QAAsB,EAAA;IAWtB,IAAAD,CAAAA,WAAA,GAAAA,WAAA;;;cAAAE,GAAA;AAAA,IAAA,OAAA,CAAA,kBAAA,EAAAP,aAAsB,EAAA,CAAA,CAAA;;;;;WAqBpB,IAAAvC,GAAA,CAAAlF,YAAA,KAAA,MAAA,EAAA;YAE2C,IAAA5B,aAAA,CAAAC,IAAAA,EAAAA,SAAA,IAAAsJ,6BAAA,CAAA;;mBAKgC,CAAA5M,IAAA,GAAAqB,MAAA,GAAA,CAAA,EAAA;AAI3E,MAAA,MAAA,IAAAgC,aAAA,CAAA,IAAA,EAAAC,SAAA,IAAAuJ,+BAAA,CAAA;;;YAaFK,QAA0E,QAAAD,YAAA,EAAA;;uBAOlD,CAAAD,QAAA,CAAAG,aAAA,CAAA,QAAA,CAAA;MACpBC,IAAA,CAAAC,GAAA,GAAAtI,GAAA;;MASM,IAAAuI,QAAA,GAAA,KAAA;;;;QAgBHA,QAAA,GAAA,IAAA;;;YAUP,CAAAC,mBAAuB,CAAA,MAAA,EAAAC,MAAA,CAAA;QACvBJ,IAAA,CAAAG,mBAAa,CAAA,OAAA,EAAAtC,OAAA,CAAA;AAIXmC,QAAAA,IAAA,CAAAK,MAAA,EAAA;AAII,QAAA,OAAA,IAAA,CAAAV,WAAA,CAAAG,QAAA,CAAA;;;;;AAsBJ,UAAA,IAAA,CAAAI,QAAA,EAAA;YAGNtH,QAAA,CAAAK,KAAA,CAAA,IAAAC,iBAAA,CAAA;cAEQvB,GAAA;cACSI,MAAA,EAAA,CAAA;cAEkEP,UAAA,EAAA,aAAA;AAClEyB,cAAAA,KAAA,EAAA,IAAAqH,KAAA,CAAAC,qBAAA;AAEf,aAAA,CAAA,CAAA;AACF,YAAA;;4BAzLSC,YAAA,CAAA;;;;AA4LX7I,YAAAA;AAEG,WAAA,CAAA,CAAA;kBAKa,CAAK2D,QACV,EAAA;;;;;;UAgBLrC,KAAA;UACgBlB,MAAA,EAAA,CAAA;AAApBP,UAAAA,UAAA,EAAiD,aAAA;AAArBG,UAAAA;AAAwB,SAAA,CAAA,CAAA;;;AAQjD,MAAA,IAAA,CAAA,gBAAA,CAAA,OAAA,EAAAkG,OAAA,CAAA;AACuC,MAAA,IAAA,CAAA,QAAA,CAAA5G,IAAA,CAAAwJ,WAAA,CAAAT,IAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAvKtC,EAAA;oCAAS,CAAAvH,CAAAA,MAAA,CAAAsE,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHf,MAAA2D,wBAAA,GAAA,YAAA;AAII,MAAAC,gBAAkB,GAAAC,IAAAA,cAAA,QAAA1K,SAAA,KAAAzC,SAAA,IAAAyC,SAAA,GAAA,kBAAA,GAAA,EAAA,EAAA;EAClBsI,UAEH,EAAA,MAAA;;AAmBC,CAAA,CAAA;AAGA,MAAUqC,wBAAY,GAAA,cAAA;;YAKnB,EAAA,MAAA;SAEK,EAAAC,MAAAD;;MASNE,uBAAA,CAAA;;EAvBSC,UAAA;;;;;kBAWR;mBAAuB,GAAAA,UAAA;AAiB5B;;;;AAMA;;;;;MADY,IAAAC,CAAAA,mBAAaC,YAAmB;;AAU5C,IAAA,OAAA,KAAAC,SAAA;;SAKEC,IAAqD,GAAA/C,EAAA,CAAAgD,kBAAA,CAAA;AAAAC,IAAAA,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,mBAAA;AAAAC,IAAAA,QAAA,EAAAnD,EAAA;AAAArG,IAAAA,IAAA,EAAA+I,uBAAA;IAAA5C,IAAA,EAAA,CAAA;AAAA3J,MAAAA,KAAA,EAAAiN;AAAA,KAAA,EAAA;AAAAjN,MAAAA,KAAA,EAAAmM;AAAA,KAAA,CAAA;AAAAvC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAAC;AAAA,GAAA,CAAA;cACqC,GAAAF,EAAA,CAAAqD,qBAAA,CAAA;IAAAJ,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,mBAAA;AAAAC,IAAAA,QAAA,EAAAnD,EAAA;AAAArG,IAAAA,IAAA,EAAA+I,uBAAA;IAAAvC,UAAA,EAAA;AAAA,GAAA,CAAA;;AAEjB,EAAA,CAAA,wBAAA,CAAA;AAAA8C,EAAAA,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,mBAAA;AAAAC,EAAAA,QAAA,EAAAnD,EAAA;AAAArG,EAAAA,IAAA,EAAA+I,uBAAA;EAAArC,UAAA,EAAA,CAAA;AACzE1G,IAAAA,IAAA,EAAAuG,UAAA;QAEK,EAAO,CAAA;MAAAC,UAAU,EAAA;AAAA,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAKpB,EAAA,OAAAmD,KAAA,GAAAtD,EAAA,CAAAqD,qBAAA,CAAA;IAAAJ,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,mBAAA;AAAAC,IAAAA,QAAA,EAAAnD,EAAA;AAAArG,IAAAA,IAAA,EAAA4J,sBAAA;IAAApD,UAAA,EAAA,MAAA;AAAAqD,IAAAA,WAAA,EAAAd;AAAA,GAAA,CAAA;;;;;;;;;;;;;;CAQU,CAAA;;;AAUZhE,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,GAAA,CAAArG,MAAoB,iBAGlB,CAAAA,MAAO,KAAA,MAAA;;;6CALA,EAAAoL,QAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICpEPC;WACDA,eAAA,EAAA;AAGHA,EAAAA,eAAA,CAAAA,eAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;;;;;;;;;;;;;;;;;;;AA6EG;;AAIDC,EAAAA,MAAAA,uBAIM;AAKL,IAAA,OAAA,EAAAC,WAAA;AAAAJ,IAAAA,WAAA,EAAAK;;AAOHC,IAAAA,OAAA,EAAAjE,WAAA;;;;;;;;;;;OAYqF,MAAAkE,OAAA,IAAAC,QAAA,EAAA;AACnFL,IAAAA,SAAA,CAAAtO,IAAA,CAAA0O,GAAAA,OAAA,CAAAE,UAAA,CAAA;;AAE0F,EAAA,OAAA,wBAAA,CAAAN,SAAA,CAAA;;;;;;;;;GAqBzF,CAAA,CAAA;;AAYa,MAAA,qBAAA,GAAA,IAAApB,cAAA,CAAA1K,OAAAA,SAAA,KAAAzC,SAAA,IAAAyC,SAAA,GAAA,uBAAA,GAAA,EAAA,CAAA;;6DA2Bb,CAAA;AACHiM,IAAAA,OAAA,EAAAI,qBAAA;AACEC,IAAAA,UAAA,EAAAC;GAEE,EAAA;;AAEAZ,IAAAA,WAAA,EAAAU,qBAAA;IACJG,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;wBA2BuB,CAAAX,eAAA,CAAAY,uBAAA,EAAAX,SAAA,CAAA;;;;;;;AAqBpB;AAMA,SAAAY,gBAAA,GAAA;AACH,EAAA,OAAAC,eAAA,CAAAd,eAAA,CAAAe,YAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1NMC,MAAAA,QAAA,EAAAC,oBAAA;MA9BFhB,SAAA,EAAA,CAAAiB,oBAAU,EAAA,CAAAX,UAAA;AACX,KAAA;;;;;;;;SAkCHlB,IAAA,GAAA/C,EAAA,CAAAgD,kBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,mBAAA;AAAAC,IAAAA,QAAA,EAAAnD,EAAA;AAAArG,IAAAA,IAAA,EAAAgL,oBAAA;IAAA7E,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAC,EAAA,CAAAC,eAAA,CAAA4E;AAAA,GAAA,CAAA;;;;;;;;;;;;qCASG;AAAAf,MAAAA,OAAA,EAAAgB,iBAAA;AAAAtB,MAAAA,WAAA,EAAAuB,mBAAA;MAAAV,KAAA,EAAA;KAQG,EAAA;AAAAP,MAAAA,OAAA,EAAAP,sBAAA;AAAAyB,MAAAA,QAAA,EAAAtC;AAAA,KAAA;;;;;;;;;;YA3DiB,EAAA,QAAA;EAAAQ,OAAA,EAAA,mBAAA;AAAAC,EAAAA,QAAA,EAAAnD,EAAA;AAAArG,EAAAA,IAAA,EAAAgL,oBAAA;EAAAtE,UAAA,EAAA,CAAA;kBAClB;AACD,IAAA,IAAA,EAAA,CAAA;MACAsD,SAAA,EAAA,CACEoB,mBAAY,EACZ;AAAAjB,QAAAA,OAAA,EAAAgB,iBAAA;AAAAtB,QAAAA,WAAA,EAAAuB,mBAAA;QAAAV,KAAA,EAAA;;;;;AAiCD1B,QAAAA,UAAA,EAAAN,wBAAA;AAAA4C,QAAAA,UAAA,EAAAzC;mBACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBD7I,IAAAA,IAAA,EAAAkL,QAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYSlL,IAAAA,IAAA,EAAAkL,QAAA;;;;;;;;;"}