{"version":3,"file":"_common_module-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/location/hash_location_strategy.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/i18n/locale_data_api.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/i18n/format_date.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/i18n/format_number.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/i18n/localization.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_class.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_component_outlet.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_for_of.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_if.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_switch.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_plural.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_style.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/ng_template_outlet.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/directives/index.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/async_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/case_conversion_pipes.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/date_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/i18n_plural_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/i18n_select_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/json_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/keyvalue_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/number_pipe.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/pipes/index.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/src/common_module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\n\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class HashLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string = '';\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n    private _platformLocation: PlatformLocation,\n    @Optional() @Inject(APP_BASE_HREF) _baseHref?: string,\n  ) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n      this._platformLocation.onPopState(fn),\n      this._platformLocation.onHashChange(fn),\n    );\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override path(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    const path = this._platformLocation.hash ?? '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    const url = joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? '#' + url : url;\n  }\n\n  override pushState(state: any, title: string, path: string, queryParams: string) {\n    const url =\n      this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) ||\n      this._platformLocation.pathname;\n    this._platformLocation.pushState(state, title, url);\n  }\n\n  override replaceState(state: any, title: string, path: string, queryParams: string) {\n    const url =\n      this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) ||\n      this._platformLocation.pathname;\n    this._platformLocation.replaceState(state, title, url);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵCurrencyIndex,\n  ɵExtraLocaleDataIndex,\n  ɵfindLocaleData,\n  ɵgetLocaleCurrencyCode,\n  ɵgetLocalePluralCase,\n  ɵLocaleDataIndex,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * Format styles that can be used to represent numbers.\n * @see {@link getLocaleNumberFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberFormat` is deprecated\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific,\n}\n\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see {@link NgPlural}\n * @see {@link NgPluralCase}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocalePluralCase` is deprecated\n */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nexport enum FormStyle {\n  Format,\n  Standalone,\n}\n\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nexport enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short,\n}\n\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see {@link getLocaleDateFormat}\n * @see {@link getLocaleTimeFormat}\n * @see {@link getLocaleDateTimeFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n * @publicApi\n *\n * @deprecated 18.0\n * Date locale data getters are deprecated\n */\nexport enum FormatWidth {\n  /**\n   * For `en-US`, `'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full,\n}\n\n// This needs to be an object literal, rather than an enum, because TypeScript 5.4+\n// doesn't allow numeric keys and we have `Infinity` and `NaN`.\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see {@link getLocaleNumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberSymbol` is deprecated\n *\n * @object-literal-as-enum\n */\nexport const NumberSymbol = {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example: 2,345`.`67\n   */\n  Decimal: 0,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group: 1,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List: 2,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign: 3,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign: 4,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign: 5,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential: 6,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent: 7,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille: 8,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity: 9,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN: 10,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator: 11,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal: 12,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup: 13,\n} as const;\n\nexport type NumberSymbol = (typeof NumberSymbol)[keyof typeof NumberSymbol];\n\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n *\n * @deprecated Week locale getters are deprecated\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}\n\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function serves no purpose when relying on the `Intl` API.\n */\nexport function getLocaleId(locale: string): string {\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\n}\n\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const amPmData = <[string, string][][]>[\n    data[ɵLocaleDataIndex.DayPeriodsFormat],\n    data[ɵLocaleDataIndex.DayPeriodsStandalone],\n  ];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDayNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const daysData = <string[][][]>[\n    data[ɵLocaleDataIndex.DaysFormat],\n    data[ɵLocaleDataIndex.DaysStandalone],\n  ];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleMonthNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const monthsData = <string[][][]>[\n    data[ɵLocaleDataIndex.MonthsFormat],\n    data[ɵLocaleDataIndex.MonthsStandalone],\n  ];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleEraNames(\n  locale: string,\n  width: TranslationWidth,\n): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const erasData = <[string, string][]>data[ɵLocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * You may want to rely on the following alternatives:\n * - Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (monday) if `getWeekInfo` is not supported.\n * - Other librairies like [`date-fns`](https://date-fns.org/), [`day.js`](https://day.js.org/en/) or [`weekstart`](https://www.npmjs.com/package/weekstart) library provide their own locale based data for the first day of the week.\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (Saturday+Sunday) if `getWeekInfo` is not supported .\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.WeekendRange];\n}\n\n/**\n * Retrieves a localized date-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n\n * @publicApi\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[ɵLocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize. Must be one of `NumberSymbol`.\n * @returns The character for the localized symbol.\n * @see {@link NumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.NumberFormat` to format numbers instead.\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = ɵfindLocaleData(locale);\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see {@link NumberFormatStyle}\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.NumberFormat` determine the number format instead\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nexport function getLocaleCurrencySymbol(locale: string): string | null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nexport function getLocaleCurrencyName(locale: string): string | null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n *\n * @deprecated We recommend you create a map of locale to ISO 4217 currency codes.\n * Time relative currency data is provided by the CLDR project. See https://www.unicode.org/cldr/charts/44/supplemental/detailed_territory_currency_information.html\n */\nexport function getLocaleCurrencyCode(locale: string): string | null {\n  return ɵgetLocaleCurrencyCode(locale);\n}\n\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Currencies];\n}\n\n/**\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.PluralRules` instead\n */\nexport const getLocalePluralCase: (locale: string) => (value: number) => Plural =\n  ɵgetLocalePluralCase;\n\nfunction checkFullData(data: any) {\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_EXTRA_LOCALE_DATA_FOR_LOCALE,\n      ngDevMode &&\n        `Missing extra locale data for the locale \"${\n          data[ɵLocaleDataIndex.LocaleId]\n        }\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`,\n    );\n  }\n}\n\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see {@link getLocaleExtraDayPeriods}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.DateTimeFormat` determine the day period instead.\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see {@link getLocaleExtraDayPeriodRules}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * To extract a day period use `Intl.DateTimeFormat` with the `dayPeriod` option instead.\n */\nexport function getLocaleExtraDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): string[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone],\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * For dates and numbers, let `Intl.DateTimeFormat()` and `Intl.NumberFormat()` determine the writing direction.\n * The `Intl` alternative [`getTextInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo).\n * has only partial support (Chromium M99 & Safari 17).\n * 3rd party alternatives like [`rtl-detect`](https://www.npmjs.com/package/rtl-detect) can work around this issue.\n */\nexport function getLocaleDirection(locale: string): 'ltr' | 'rtl' {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Directionality];\n}\n\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new RuntimeError(\n    RuntimeErrorCode.LOCALE_DATA_UNDEFINED,\n    ngDevMode && 'Locale data API: locale data undefined',\n  );\n}\n\n/**\n * Represents a time value with hours and minutes.\n *\n * @publicApi\n *\n * @deprecated Locale date getters are deprecated\n */\nexport type Time = {\n  hours: number;\n  minutes: number;\n};\n\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * You can use `Intl.NumberFormat().formatToParts()` to extract the currency symbol.\n * For example: `Intl.NumberFormat('en', {style:'currency', currency: 'USD'}).formatToParts().find(part => part.type === 'currency').value`\n * returns `$` for USD currency code in the `en` locale.\n * Note: `US$` is a currency symbol for the `en-ca` locale but not the `en-us` locale.\n */\nexport function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[ɵCurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[ɵCurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function should not be used anymore. Let `Intl.NumberFormat` determine the number of digits to display for the currency\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[ɵCurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵRuntimeError as RuntimeError,\n  ɵformatRuntimeError as formatRuntimeError,\n} from '@angular/core';\n\nimport {\n  FormatWidth,\n  FormStyle,\n  getLocaleDateFormat,\n  getLocaleDateTimeFormat,\n  getLocaleDayNames,\n  getLocaleDayPeriods,\n  getLocaleEraNames,\n  getLocaleExtraDayPeriodRules,\n  getLocaleExtraDayPeriods,\n  getLocaleId,\n  getLocaleMonthNames,\n  getLocaleNumberSymbol,\n  getLocaleTimeFormat,\n  NumberSymbol,\n  TranslationWidth,\n} from './locale_data_api';\nimport {RuntimeErrorCode} from '../errors';\n\nexport const ISO8601_DATE_REGEX =\n  /^(\\d{4,})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst DATE_FORMATS_SPLIT =\n  /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n\nconst enum ZoneWidth {\n  Short,\n  ShortGMT,\n  Long,\n  Extended,\n}\n\nconst enum DateType {\n  FullYear,\n  Month,\n  Date,\n  Hours,\n  Minutes,\n  Seconds,\n  FractionalSeconds,\n  Day,\n}\n\nconst enum TranslationType {\n  DayPeriods,\n  Days,\n  Months,\n  Eras,\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param format The date-time components to include. See `DatePipe` for details.\n * @param locale A locale code for the locale format rules to use.\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`).\n * If not specified, uses host system settings.\n *\n * @returns The formatted date string.\n *\n * @see {@link DatePipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nexport function formatDate(\n  value: string | number | Date,\n  format: string,\n  locale: string,\n  timezone?: string,\n): string {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let parts: string[] = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    assertValidDateFormat(parts);\n  }\n\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let text = '';\n  parts.forEach((value) => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter\n      ? dateFormatter(date, locale, dateTimezoneOffset)\n      : value === \"''\"\n        ? \"'\"\n        : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n  });\n\n  return text;\n}\n\n/**\n * Asserts that the given date format is free from common mistakes.  Throws an\n * error if one is found (except for the case of all \"Y\", in which case we just\n * log a warning).  This should only be called in development mode.\n */\nfunction assertValidDateFormat(parts: string[]) {\n  if (parts.some((part) => /^Y+$/.test(part)) && !parts.some((part) => /^w+$/.test(part))) {\n    // \"Y\" indicates \"week-based year\", which differs from the actual calendar\n    // year for a few days around Jan 1 most years.  Unless \"w\" is also\n    // present (e.g. a date like \"2024-W52\") this is likely a mistake.  Users\n    // probably meant \"y\" instead.\n    const message = `Suspicious use of week-based year \"Y\" in date pattern \"${parts.join(\n      '',\n    )}\". Did you mean to use calendar year \"y\" instead?`;\n    if (parts.length === 1) {\n      // NOTE: allow \"YYYY\" with just a warning, since it's used in tests.\n      console.error(formatRuntimeError(RuntimeErrorCode.SUSPICIOUS_DATE_FORMAT, message));\n    } else {\n      throw new RuntimeError(RuntimeErrorCode.SUSPICIOUS_DATE_FORMAT, message);\n    }\n  }\n}\n\n/**\n * Create a new Date object with the given date value, and the time set to midnight.\n *\n * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.\n * See: https://github.com/angular/angular/issues/40377\n *\n * Note that this function returns a Date object whose time is midnight in the current locale's\n * timezone. In the future we might want to change this to be midnight in UTC, but this would be a\n * considerable breaking change.\n */\nfunction createDate(year: number, month: number, date: number): Date {\n  // The `newDate` is set to midnight (UTC) on January 1st 1970.\n  // - In PST this will be December 31st 1969 at 4pm.\n  // - In GMT this will be January 1st 1970 at 1am.\n  // Note that they even have different years, dates and months!\n  const newDate = new Date(0);\n\n  // `setFullYear()` allows years like 0001 to be set correctly. This function does not\n  // change the internal time of the date.\n  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).\n  // - In PST this will now be September 20, 2019 at 4pm\n  // - In GMT this will now be September 20, 2019 at 1am\n\n  newDate.setFullYear(year, month, date);\n  // We want the final date to be at local midnight, so we reset the time.\n  // - In PST this will now be September 20, 2019 at 12am\n  // - In GMT this will now be September 20, 2019 at 12am\n  newDate.setHours(0, 0, 0);\n\n  return newDate;\n}\n\nfunction getNamedFormat(locale: string, format: string): string {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] ??= {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [\n        shortTime,\n        shortDate,\n      ]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [\n        mediumTime,\n        mediumDate,\n      ]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [\n        longTime,\n        longDate,\n      ]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [\n        fullTime,\n        fullDate,\n      ]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function (match, key) {\n      return opt_values != null && key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n\nfunction padNumber(\n  num: number,\n  digits: number,\n  minusSign = '-',\n  trim?: boolean,\n  negWrap?: boolean,\n): string {\n  let neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.slice(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substring(0, digits);\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(\n  name: DateType,\n  size: number,\n  offset: number = 0,\n  trim = false,\n  negWrap = false,\n): DateFormatter {\n  return function (date: Date, locale: string): string {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n\n    if (name === DateType.Hours) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === DateType.FractionalSeconds) {\n      return formatFractionalSeconds(part, size);\n    }\n\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\n\nfunction getDatePart(part: DateType, date: Date): number {\n  switch (part) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.FractionalSeconds:\n      return date.getMilliseconds();\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new RuntimeError(\n        RuntimeErrorCode.UNKNOWN_DATE_TYPE_VALUE,\n        ngDevMode && `Unknown DateType value \"${part}\".`,\n      );\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(\n  name: TranslationType,\n  width: TranslationWidth,\n  form: FormStyle = FormStyle.Format,\n  extended = false,\n): DateFormatter {\n  return function (date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(\n  date: Date,\n  locale: string,\n  name: TranslationType,\n  width: TranslationWidth,\n  form: FormStyle,\n  extended: boolean,\n) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        const index = rules.findIndex((rule) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const [from, to] = rule;\n            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;\n            const beforeTo =\n              currentHours < to.hours || (currentHours === to.hours && currentMinutes < to.minutes);\n            // We must account for normal rules that span a period during the day (e.g. 6am-9am)\n            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.\n            // 10pm - 5am) where `from` is greater (later!) than `to`.\n            //\n            // In the first case the current time must be BOTH after `from` AND before `to`\n            // (e.g. 8am is after 6am AND before 10am).\n            //\n            // In the second case the current time must be EITHER after `from` OR before `to`\n            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is\n            // after 10pm).\n            if (from.hours < to.hours) {\n              if (afterFrom && beforeTo) {\n                return true;\n              }\n            } else if (afterFrom || beforeTo) {\n              return true;\n            }\n          } else {\n            // noon or midnight\n            if (rule.hours === currentHours && rule.minutes === currentMinutes) {\n              return true;\n            }\n          }\n          return false;\n        });\n        if (index !== -1) {\n          return dayPeriods[index];\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, <TranslationWidth>width)[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, <TranslationWidth>width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected: never = name;\n      throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_TRANSLATION_TYPE,\n        ngDevMode && `unexpected translation type ${unexpected}`,\n      );\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function (date: Date, locale: string, offset: number) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return (\n          (zone >= 0 ? '+' : '') +\n          padNumber(hours, 2, minusSign) +\n          padNumber(Math.abs(zone % 60), 2, minusSign)\n        );\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return (\n          'GMT' +\n          (zone >= 0 ? '+' : '') +\n          padNumber(hours, 2, minusSign) +\n          ':' +\n          padNumber(Math.abs(zone % 60), 2, minusSign)\n        );\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return (\n            (zone >= 0 ? '+' : '') +\n            padNumber(hours, 2, minusSign) +\n            ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign)\n          );\n        }\n      default:\n        throw new RuntimeError(\n          RuntimeErrorCode.UNKNOWN_ZONE_WIDTH,\n          ngDevMode && `Unknown zone width \"${width}\"`,\n        );\n    }\n  };\n}\n\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year: number) {\n  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();\n  return createDate(\n    year,\n    0,\n    1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear,\n  );\n}\n\n/**\n *  ISO Week starts on day 1 (Monday) and ends with day 0 (Sunday)\n */\nexport function getThursdayThisIsoWeek(datetime: Date) {\n  // getDay returns 0-6 range with sunday as 0.\n  const currentDay = datetime.getDay();\n\n  // On a Sunday, read the previous Thursday since ISO weeks start on Monday.\n  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;\n\n  return createDate(\n    datetime.getFullYear(),\n    datetime.getMonth(),\n    datetime.getDate() + deltaToThursday,\n  );\n}\n\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function (date: Date, locale: string) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth =\n        new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const thisThurs = getThursdayThisIsoWeek(date);\n      // Some days of a year are part of next year according to ISO 8601.\n      // Compute the firstThurs from the year of this week's Thursday\n      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\n/**\n * Returns a date formatter that provides the week-numbering year for the input date.\n */\nfunction weekNumberingYearGetter(size: number, trim = false): DateFormatter {\n  return function (date: Date, locale: string) {\n    const thisThurs = getThursdayThisIsoWeek(date);\n    const weekNumberingYear = thisThurs.getFullYear();\n    return padNumber(\n      weekNumberingYear,\n      size,\n      getLocaleNumberSymbol(locale, NumberSymbol.MinusSign),\n      trim,\n    );\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset: number) => string;\n\nconst DATE_FORMATS: {[format: string]: DateFormatter} = {};\n\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format: string): DateFormatter | null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'Y':\n      formatter = weekNumberingYearGetter(1);\n      break;\n    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD\n    // 2010 => 10)\n    case 'YY':\n      formatter = weekNumberingYearGetter(2, true);\n      break;\n    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD\n    // 2010 => 2010)\n    case 'YYY':\n      formatter = weekNumberingYearGetter(3);\n      break;\n    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'YYYY':\n      formatter = weekNumberingYearGetter(4);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'LLLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Wide,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'LLLLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n      );\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)\n    case 'c':\n    case 'cc':\n      formatter = dateGetter(DateType.Day, 1);\n      break;\n    case 'ccc':\n      formatter = dateStrGetter(\n        TranslationType.Days,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'cccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'ccccc':\n      formatter = dateStrGetter(\n        TranslationType.Days,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'cccccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Wide,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Abbreviated,\n        FormStyle.Format,\n        true,\n      );\n      break;\n    case 'BBBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Wide,\n        FormStyle.Format,\n        true,\n      );\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Narrow,\n        FormStyle.Format,\n        true,\n      );\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\n      break;\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const reverseValue = reverse ? -1 : 1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport function toDate(value: string | number | Date): Date {\n  if (isDate(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n\n    if (/^(\\d{4}(-\\d{1,2}(-\\d{1,2})?)?)$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m = 1, d = 1] = value.split('-').map((val: string) => +val);\n      return createDate(y, m - 1, d);\n    }\n\n    const parsedNb = parseFloat(value);\n\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN((value as any) - parsedNb)) {\n      return new Date(parsedNb);\n    }\n\n    let match: RegExpMatchArray | null;\n    if ((match = value.match(ISO8601_DATE_REGEX))) {\n      return isoStringToDate(match);\n    }\n  }\n\n  const date = new Date(value as any);\n  if (!isDate(date)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_TO_DATE_CONVERSION,\n      ngDevMode && `Unable to convert \"${value}\" into a date`,\n    );\n  }\n  return date;\n}\n\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)\n  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`\n  // becomes `999ms`.\n  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n\nexport function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {\n  getLocaleNumberFormat,\n  getLocaleNumberSymbol,\n  getNumberOfCurrencyDigits,\n  NumberFormatStyle,\n  NumberSymbol,\n} from './locale_data_api';\nimport {RuntimeErrorCode} from '../errors';\n\nexport const NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst MAX_DIGITS = 22;\nconst DECIMAL_SEP = '.';\nconst ZERO_CHAR = '0';\nconst PATTERN_SEP = ';';\nconst GROUP_SEP = ',';\nconst DIGIT_CHAR = '#';\nconst CURRENCY_CHAR = '¤';\nconst PERCENT_CHAR = '%';\n\n/**\n * Transforms a number to a locale string based on a style and a format.\n */\nfunction formatNumberToLocaleString(\n  value: number,\n  pattern: ParsedNumberFormat,\n  locale: string,\n  groupSymbol: NumberSymbol,\n  decimalSymbol: NumberSymbol,\n  digitsInfo?: string,\n  isPercent = false,\n): string {\n  let formattedText = '';\n  let isZero = false;\n\n  if (!isFinite(value)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    let parsedNumber = parseNumber(value);\n\n    if (isPercent) {\n      parsedNumber = toPercent(parsedNumber);\n    }\n\n    let minInt = pattern.minInt;\n    let minFraction = pattern.minFrac;\n    let maxFraction = pattern.maxFrac;\n\n    if (digitsInfo) {\n      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INVALID_DIGIT_INFO,\n          ngDevMode && `${digitsInfo} is not a valid digit info`,\n        );\n      }\n      const minIntPart = parts[1];\n      const minFractionPart = parts[3];\n      const maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n\n    roundNumber(parsedNumber, minFraction, maxFraction);\n\n    let digits = parsedNumber.digits;\n    let integerLen = parsedNumber.integerLen;\n    const exponent = parsedNumber.exponent;\n    let decimals = [];\n    isZero = digits.every((d) => !d);\n\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    const groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n\n    // append the decimal digits\n    if (decimals.length) {\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n\n  if (value < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n\n  return formattedText;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code, such as `USD` for the US dollar and `EUR` for the euro.\n * Used to determine the number of digits in the decimal part.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted currency value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nexport function formatCurrency(\n  value: number,\n  locale: string,\n  currency: string,\n  currencyCode?: string,\n  digitsInfo?: string,\n): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n\n  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode!);\n  pattern.maxFrac = pattern.minFrac;\n\n  const res = formatNumberToLocaleString(\n    value,\n    pattern,\n    locale,\n    NumberSymbol.CurrencyGroup,\n    NumberSymbol.CurrencyDecimal,\n    digitsInfo,\n  );\n  return (\n    res\n      .replace(CURRENCY_CHAR, currency)\n      // if we have 2 time the currency character, the second one is ignored\n      .replace(CURRENCY_CHAR, '')\n      // If there is a spacing between currency character and the value and\n      // the currency character is suppressed by passing an empty string, the\n      // spacing character would remain as part of the string. Then we\n      // should remove it.\n      .trim()\n  );\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted percentage value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n * @publicApi\n *\n */\nexport function formatPercent(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  const res = formatNumberToLocaleString(\n    value,\n    pattern,\n    locale,\n    NumberSymbol.Group,\n    NumberSymbol.Decimal,\n    digitsInfo,\n    true,\n  );\n  return res.replace(\n    new RegExp(PERCENT_CHAR, 'g'),\n    getLocaleNumberSymbol(locale, NumberSymbol.PercentSign),\n  );\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted text string.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nexport function formatNumber(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  return formatNumberToLocaleString(\n    value,\n    pattern,\n    locale,\n    NumberSymbol.Group,\n    NumberSymbol.Decimal,\n    digitsInfo,\n  );\n}\n\ninterface ParsedNumberFormat {\n  minInt: number;\n  // the minimum number of digits required in the fraction part of the number\n  minFrac: number;\n  // the maximum number of digits required in the fraction part of the number\n  maxFrac: number;\n  // the prefix for a positive number\n  posPre: string;\n  // the suffix for a positive number\n  posSuf: string;\n  // the prefix for a negative number (e.g. `-` or `(`))\n  negPre: string;\n  // the suffix for a negative number (e.g. `)`)\n  negSuf: string;\n  // number of digits in each group of separated digits\n  gSize: number;\n  // number of digits in the last group of digits before the decimal separator\n  lgSize: number;\n}\n\nfunction parseNumberFormat(format: string, minusSign = '-'): ParsedNumberFormat {\n  const p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0,\n  };\n\n  const patternParts = format.split(PATTERN_SEP);\n  const positive = patternParts[0];\n  const negative = patternParts[1];\n\n  const positiveParts =\n      positive.indexOf(DECIMAL_SEP) !== -1\n        ? positive.split(DECIMAL_SEP)\n        : [\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1),\n          ],\n    integer = positiveParts[0],\n    fraction = positiveParts[1] || '';\n\n  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));\n\n  for (let i = 0; i < fraction.length; i++) {\n    const ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n\n  const groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;\n\n  if (negative) {\n    const trunkLen = positive.length - p.posPre.length - p.posSuf.length,\n      pos = negative.indexOf(DIGIT_CHAR);\n\n    p.negPre = negative.substring(0, pos).replace(/'/g, '');\n    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n\n  return p;\n}\n\ninterface ParsedNumber {\n  // an array of digits containing leading zeros as necessary\n  digits: number[];\n  // the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n  exponent: number;\n  // the number of the digits in `d` that are to the left of the decimal point\n  integerLen: number;\n}\n\n// Transforms a parsed number into a percentage by multiplying it by 100\nfunction toPercent(parsedNumber: ParsedNumber): ParsedNumber {\n  // if the number is 0, don't do anything\n  if (parsedNumber.digits[0] === 0) {\n    return parsedNumber;\n  }\n\n  // Getting the current number of decimals\n  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n  if (parsedNumber.exponent) {\n    parsedNumber.exponent += 2;\n  } else {\n    if (fractionLen === 0) {\n      parsedNumber.digits.push(0, 0);\n    } else if (fractionLen === 1) {\n      parsedNumber.digits.push(0);\n    }\n    parsedNumber.integerLen += 2;\n  }\n\n  return parsedNumber;\n}\n\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n */\nfunction parseNumber(num: number): ParsedNumber {\n  let numStr = Math.abs(num) + '';\n  let exponent = 0,\n    digits,\n    integerLen;\n  let i, j, zeros;\n\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {\n    /* empty */\n  }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = Number(numStr.charAt(i));\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n\n  return {digits, exponent, integerLen};\n}\n\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber: ParsedNumber, minFrac: number, maxFrac: number) {\n  if (minFrac > maxFrac) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_NUMBER_OF_DIGITS_AFTER_FRACTION,\n      ngDevMode &&\n        `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`,\n    );\n  }\n\n  let digits = parsedNumber.digits;\n  let fractionLen = digits.length - parsedNumber.integerLen;\n  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n\n  // The index of the digit to where rounding is to occur\n  let roundAt = fractionSize + parsedNumber.integerLen;\n  let digit = digits[roundAt];\n\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, (roundAt = fractionSize + 1));\n    digits[0] = 0;\n    for (let i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n  let dropTrailingZeros = fractionSize !== 0;\n  // Minimal length = nb of decimals required + current nb of integers\n  // Any number besides that is optional and can be removed if it's a trailing 0\n  const minLen = minFrac + parsedNumber.integerLen;\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const carry = digits.reduceRight(function (carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d < 10 ? d : d - 10; // d % 10\n    if (dropTrailingZeros) {\n      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n      if (digits[i] === 0 && i >= minLen) {\n        digits.pop();\n      } else {\n        dropTrailingZeros = false;\n      }\n    }\n    return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\n\nexport function parseIntAutoRadix(text: string): number {\n  const result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_INTEGER_LITERAL,\n      ngDevMode && 'Invalid integer literal when parsing ' + text,\n    );\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Inject, Injectable, LOCALE_ID, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {getLocalePluralCase, Plural} from './locale_data_api';\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: () => new NgLocaleLocalization(inject(LOCALE_ID)),\n})\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n  value: number,\n  cases: string[],\n  ngLocalization: NgLocalization,\n  locale?: string,\n): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new RuntimeError(\n    RuntimeErrorCode.NO_PLURAL_MESSAGE_FOUND,\n    ngDevMode && `No plural message found for value \"${value}\"`,\n  );\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(@Inject(LOCALE_ID) protected locale: string) {\n    super();\n  }\n\n  override getPluralCategory(value: any, locale?: string): string {\n    const plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  Renderer2,\n  ɵstringify as stringify,\n} from '@angular/core';\n\ntype NgClassSupportedTypes = string[] | Set<string> | {[klass: string]: any} | null | undefined;\n\nconst WS_REGEXP = /\\s+/;\n\nconst EMPTY_ARRAY: string[] = [];\n\n/**\n * Represents internal object used to track state of each CSS class. There are 3 different (boolean)\n * flags that, combined together, indicate state of a given CSS class:\n * - enabled: indicates if a class should be present in the DOM (true) or not (false);\n * - changed: tracks if a class was toggled (added or removed) during the custom dirty-checking\n * process; changed classes must be synchronized with the DOM;\n * - touched: tracks if a class is present in the current object bound to the class / ngClass input;\n * classes that are not present any more can be removed from the internal data structures;\n */\ninterface CssClassState {\n  // PERF: could use a bit mask to represent state as all fields are boolean flags\n  enabled: boolean;\n  changed: boolean;\n  touched: boolean;\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```html\n * <some-element [ngClass]=\"stringExp|arrayExp|objExp|Set\">...</some-element>\n *\n * <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [class bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * ```html\n * <some-element [class]=\"'first second'\">...</some-element>\n *\n * <some-element [class.expanded]=\"isExpanded\">...</some-element>\n *\n * <some-element [class]=\"['first', 'second']\">...</some-element>\n *\n * <some-element [class]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * ```\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n *\n * @see [Class bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngClass]',\n})\nexport class NgClass implements DoCheck {\n  private initialClasses = EMPTY_ARRAY;\n  private rawClass: NgClassSupportedTypes;\n\n  private stateMap = new Map<string, CssClassState>();\n\n  constructor(\n    private _ngEl: ElementRef,\n    private _renderer: Renderer2,\n  ) {}\n\n  @Input('class')\n  set klass(value: string) {\n    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY;\n  }\n\n  @Input('ngClass')\n  set ngClass(value: string | string[] | Set<string> | {[klass: string]: any} | null | undefined) {\n    this.rawClass = typeof value === 'string' ? value.trim().split(WS_REGEXP) : value;\n  }\n\n  /*\n  The NgClass directive uses the custom change detection algorithm for its inputs. The custom\n  algorithm is necessary since inputs are represented as complex object or arrays that need to be\n  deeply-compared.\n\n  This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance\n  might negatively impact runtime performance of the entire change detection cycle. The design of\n  this algorithm is making sure that:\n  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when\n  needed), even if references to bound objects change;\n  - there is no memory allocation if nothing changes (even relatively modest memory allocation\n  during the change detection cycle can result in GC pauses for some of the CD cycles).\n\n  The algorithm works by iterating over the set of bound classes, staring with [class] binding and\n  then going over [ngClass] binding. For each CSS class name:\n  - check if it was seen before (this information is tracked in the state map) and if its value\n  changed;\n  - mark it as \"touched\" - names that are not marked are not present in the latest set of binding\n  and we can remove such class name from the internal data structures;\n\n  After iteration over all the CSS class names we've got data structure with all the information\n  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush\n  changes to the DOM and reset internal data structures so those are ready for the next change\n  detection cycle.\n   */\n  ngDoCheck(): void {\n    // classes from the [class] binding\n    for (const klass of this.initialClasses) {\n      this._updateState(klass, true);\n    }\n\n    // classes from the [ngClass] binding\n    const rawClass = this.rawClass;\n    if (Array.isArray(rawClass) || rawClass instanceof Set) {\n      for (const klass of rawClass) {\n        this._updateState(klass, true);\n      }\n    } else if (rawClass != null) {\n      for (const klass of Object.keys(rawClass)) {\n        this._updateState(klass, Boolean(rawClass[klass]));\n      }\n    }\n\n    this._applyStateDiff();\n  }\n\n  private _updateState(klass: string, nextEnabled: boolean) {\n    const state = this.stateMap.get(klass);\n    if (state !== undefined) {\n      if (state.enabled !== nextEnabled) {\n        state.changed = true;\n        state.enabled = nextEnabled;\n      }\n      state.touched = true;\n    } else {\n      this.stateMap.set(klass, {enabled: nextEnabled, changed: true, touched: true});\n    }\n  }\n\n  private _applyStateDiff() {\n    for (const stateEntry of this.stateMap) {\n      const klass = stateEntry[0];\n      const state = stateEntry[1];\n\n      if (state.changed) {\n        this._toggleClass(klass, state.enabled);\n        state.changed = false;\n      } else if (!state.touched) {\n        // A class that was previously active got removed from the new collection of classes -\n        // remove from the DOM as well.\n        if (state.enabled) {\n          this._toggleClass(klass, false);\n        }\n        this.stateMap.delete(klass);\n      }\n\n      state.touched = false;\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    if (ngDevMode) {\n      if (typeof klass !== 'string') {\n        throw new Error(\n          `NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`,\n        );\n      }\n    }\n    klass = klass.trim();\n    if (klass.length > 0) {\n      klass.split(WS_REGEXP).forEach((klass) => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentRef,\n  createNgModule,\n  Directive,\n  DoCheck,\n  EnvironmentInjector,\n  Injector,\n  Input,\n  NgModuleRef,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Instantiates a {@link /api/core/Component Component} type and inserts its Host View into the current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will be destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInputs`: Optional component inputs object, which will be bind to the\n * component.\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletEnvironmentInjector`: Optional custom {@link EnvironmentInjector} which will\n * provide the component's environment.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if it exists.\n *\n * * `ngComponentOutletNgModule`: Optional NgModule class reference to allow loading another\n * module dynamically, then loading a component from that module.\n *\n * * `ngComponentOutletNgModuleFactory`: Deprecated config option that allows providing optional\n * NgModule factory to allow loading another module dynamically, then loading a component from that\n * module. Use `ngComponentOutletNgModule` instead.\n *\n * ### Syntax\n *\n * Simple\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * With inputs\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   inputs: inputsExpression;\">\n * </ng-container>\n * ```\n *\n * Customized injector/content\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized NgModule reference\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModule: ngModuleClass;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\n@Directive({\n  selector: '[ngComponentOutlet]',\n  exportAs: 'ngComponentOutlet',\n})\nexport class NgComponentOutlet<T = any> implements OnChanges, DoCheck, OnDestroy {\n  /** Component that should be rendered in the outlet. */\n  @Input() ngComponentOutlet: Type<T> | null = null;\n\n  @Input() ngComponentOutletInputs?: Record<string, unknown>;\n  @Input() ngComponentOutletInjector?: Injector;\n  @Input() ngComponentOutletEnvironmentInjector?: EnvironmentInjector;\n  @Input() ngComponentOutletContent?: Node[][];\n\n  @Input() ngComponentOutletNgModule?: Type<any>;\n\n  private _componentRef: ComponentRef<T> | undefined;\n  private _moduleRef: NgModuleRef<any> | undefined;\n\n  /**\n   * A helper data structure that allows us to track inputs that were part of the\n   * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones\n   * that are no longer referenced.\n   */\n  private _inputsUsed = new Map<string, boolean>();\n\n  /**\n   * Gets the instance of the currently-rendered component.\n   * Will be null if no component has been rendered.\n   */\n  get componentInstance(): T | null {\n    return this._componentRef?.instance ?? null;\n  }\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  private _needToReCreateNgModuleInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return (\n      changes['ngComponentOutletNgModule'] !== undefined ||\n      changes['ngComponentOutletNgModuleFactory'] !== undefined\n    );\n  }\n\n  private _needToReCreateComponentInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return (\n      changes['ngComponentOutlet'] !== undefined ||\n      changes['ngComponentOutletContent'] !== undefined ||\n      changes['ngComponentOutletInjector'] !== undefined ||\n      changes['ngComponentOutletEnvironmentInjector'] !== undefined ||\n      this._needToReCreateNgModuleInstance(changes)\n    );\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._needToReCreateComponentInstance(changes)) {\n      this._viewContainerRef.clear();\n      this._inputsUsed.clear();\n      this._componentRef = undefined;\n\n      if (this.ngComponentOutlet) {\n        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n        if (this._needToReCreateNgModuleInstance(changes)) {\n          this._moduleRef?.destroy();\n\n          if (this.ngComponentOutletNgModule) {\n            this._moduleRef = createNgModule(\n              this.ngComponentOutletNgModule,\n              getParentInjector(injector),\n            );\n          } else {\n            this._moduleRef = undefined;\n          }\n        }\n\n        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {\n          injector,\n          ngModuleRef: this._moduleRef,\n          projectableNodes: this.ngComponentOutletContent,\n          environmentInjector: this.ngComponentOutletEnvironmentInjector,\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  ngDoCheck() {\n    if (this._componentRef) {\n      if (this.ngComponentOutletInputs) {\n        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {\n          this._inputsUsed.set(inputName, true);\n        }\n      }\n\n      this._applyInputStateDiff(this._componentRef);\n    }\n  }\n\n  /** @docs-private */\n  ngOnDestroy() {\n    this._moduleRef?.destroy();\n  }\n\n  private _applyInputStateDiff(componentRef: ComponentRef<unknown>) {\n    for (const [inputName, touched] of this._inputsUsed) {\n      if (!touched) {\n        // The input that was previously active no longer exists and needs to be set to undefined.\n        componentRef.setInput(inputName, undefined);\n        this._inputsUsed.delete(inputName);\n      } else {\n        // Since touched is true, it can be asserted that the inputs object is not empty.\n        componentRef.setInput(inputName, this.ngComponentOutletInputs![inputName]);\n        this._inputsUsed.set(inputName, false);\n      }\n    }\n  }\n}\n\n// Helper function that returns an Injector instance of a parent NgModule.\nfunction getParentInjector(injector: Injector): Injector {\n  const parentNgModule = injector.get(NgModuleRef);\n  return parentNgModule.injector;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  ɵRuntimeError as RuntimeError,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * @publicApi\n *\n * @deprecated 20.0\n * The `ngFor` directive is deprecated. Use the `@for` block instead.\n */\nexport class NgForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {\n  constructor(\n    /** Reference to the current item from the collection. */\n    public $implicit: T,\n\n    /**\n     * The value of the iterable expression. Useful when the expression is\n     * more complex then a property access, for example when using the async pipe\n     * (`userStreams | async`).\n     */\n    public ngForOf: U,\n\n    /** Returns an index of the current item in the collection. */\n    public index: number,\n\n    /** Returns total amount of items in the collection. */\n    public count: number,\n  ) {}\n\n  // Indicates whether this is the first item in the collection.\n  get first(): boolean {\n    return this.index === 0;\n  }\n\n  // Indicates whether this is the last item in the collection.\n  get last(): boolean {\n    return this.index === this.count - 1;\n  }\n\n  // Indicates whether an index of this item in the collection is even.\n  get even(): boolean {\n    return this.index % 2 === 0;\n  }\n\n  // Indicates whether an index of this item in the collection is odd.\n  get odd(): boolean {\n    return !this.even;\n  }\n}\n\n/**\n * A [structural directive](guide/directives/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/directives/structural-directives#asterisk) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```html\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```html\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/directives/structural-directives#one-per-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For further discussion, see\n * [Structural Directives](guide/directives/structural-directives#one-per-element).\n *\n * @usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```html\n * <li *ngFor=\"let user of users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `count: number`: The length of the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/animations/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/directives/structural-directives)\n * @ngModule CommonModule\n * @publicApi\n *\n * @deprecated 20.0\n * Use the `@for` block instead. Intent to remove in v22\n */\n@Directive({\n  selector: '[ngFor][ngForOf]',\n})\nexport class NgForOf<T, U extends NgIterable<T> = NgIterable<T>> implements DoCheck {\n  /**\n   * The value of the iterable expression, which can be used as a\n   * [template input variable](guide/directives/structural-directives#shorthand).\n   * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n   */\n  @Input()\n  set ngForOf(ngForOf: (U & NgIterable<T>) | undefined | null) {\n    this._ngForOf = ngForOf;\n    this._ngForOfDirty = true;\n  }\n  /**\n   * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.\n   *\n   * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object\n   * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n   * as the key.\n   *\n   * `NgForOf` uses the computed key to associate items in an iterable with DOM elements\n   * it produces for these items.\n   *\n   * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an\n   * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a\n   * primary key), and this iterable could be updated with new object instances that still\n   * represent the same underlying entity (for example, when data is re-fetched from the server,\n   * and the iterable is recreated and re-rendered, but most of the data is still the same).\n   *\n   * @see {@link TrackByFunction}\n   * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n   */\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(\n        `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n          `See https://angular.dev/api/common/NgForOf#change-propagation for more information.`,\n      );\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n\n  private _ngForOf: U | undefined | null = null;\n  private _ngForOfDirty: boolean = true;\n  private _differ: IterableDiffer<T> | null = null;\n  // waiting for microsoft/typescript#43662 to allow the return type `TrackByFunction|undefined` for\n  // the getter\n  private _trackByFn!: TrackByFunction<T>;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    private _template: TemplateRef<NgForOfContext<T, U>>,\n    private _differs: IterableDiffers,\n  ) {}\n\n  /**\n   * A reference to the template that is stamped out for each item in the iterable.\n   * @see [template reference variable](guide/templates/variables#template-reference-variables)\n   * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n   */\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T, U>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  /**\n   * Applies the changes when needed.\n   * @docs-private\n   */\n  ngDoCheck(): void {\n    if (this._ngForOfDirty) {\n      this._ngForOfDirty = false;\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = this._ngForOf;\n      if (!this._differ && value) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          try {\n            // CAUTION: this logic is duplicated for production mode below, as the try-catch\n            // is only present in development builds.\n            this._differ = this._differs.find(value).create(this.ngForTrackBy);\n          } catch {\n            let errorMessage =\n              `Cannot find a differ supporting object '${value}' of type '` +\n              `${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;\n            if (typeof value === 'object') {\n              errorMessage += ' Did you mean to use the keyvalue pipe?';\n            }\n            throw new RuntimeError(RuntimeErrorCode.NG_FOR_MISSING_DIFFER, errorMessage);\n          }\n        } else {\n          // CAUTION: this logic is duplicated for development mode above, as the try-catch\n          // is only present in development builds.\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        }\n      }\n    }\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const viewContainer = this._viewContainer;\n    changes.forEachOperation(\n      (\n        item: IterableChangeRecord<T>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        if (item.previousIndex == null) {\n          // NgForOf is never \"null\" or \"undefined\" here because the differ detected\n          // that a new item needs to be inserted from the iterable. This implies that\n          // there is an iterable value for \"_ngForOf\".\n          viewContainer.createEmbeddedView(\n            this._template,\n            new NgForOfContext<T, U>(item.item, this._ngForOf!, -1, -1),\n            currentIndex === null ? undefined : currentIndex,\n          );\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);\n        } else if (adjustedPreviousIndex !== null) {\n          const view = viewContainer.get(adjustedPreviousIndex)!;\n          viewContainer.move(view, currentIndex);\n          applyViewChange(view as EmbeddedViewRef<NgForOfContext<T, U>>, item);\n        }\n      },\n    );\n\n    for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T, U>>>viewContainer.get(i);\n      const context = viewRef.context;\n      context.index = i;\n      context.count = ilen;\n      context.ngForOf = this._ngForOf!;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T, U>>>viewContainer.get(record.currentIndex);\n      applyViewChange(viewRef, record);\n    });\n  }\n\n  /**\n   * Asserts the correct type of the context for the template that `NgForOf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgForOf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(\n    dir: NgForOf<T, U>,\n    ctx: any,\n  ): ctx is NgForOfContext<T, U> {\n    return true;\n  }\n}\n\n// Also export the `NgForOf` class as `NgFor` to improve the DX for\n// cases when the directive is used as standalone, so the class name\n// matches the CSS selector (*ngFor).\nexport {NgForOf as NgFor};\n\nfunction applyViewChange<T>(\n  view: EmbeddedViewRef<NgForOfContext<T>>,\n  record: IterableChangeRecord<T>,\n) {\n  view.context.$implicit = record.item;\n}\n\nfunction getTypeName(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n  ɵstringify as stringify,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/directives/structural-directives#asterisk) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```html\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```html\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```html\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```html\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```html\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * safe-navigation-operator (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```html\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```html\n * <ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](guide/directives/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n *\n * @deprecated 20.0\n * Use the `@if` block instead. Intent to remove in v22\n */\n@Directive({\n  selector: '[ngIf]',\n})\nexport class NgIf<T = unknown> {\n  private _context: NgIfContext<T> = new NgIfContext<T>();\n  private _thenTemplateRef: TemplateRef<NgIfContext<T>> | null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext<T>> | null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext<T>> | null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext<T>> | null = null;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    templateRef: TemplateRef<NgIfContext<T>>,\n  ) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  /**\n   * The Boolean expression to evaluate as the condition for showing a template.\n   * @deprecated Use the `@if` block instead. Intent to remove in v22\n   */\n  @Input()\n  set ngIf(condition: T) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to true.\n   * @deprecated Use the `@if` block instead. Intent to remove in v22\n   */\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext<T>> | null) {\n    assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfThen');\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null; // clear previous view if any.\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to false.\n   * @deprecated Use the `@if` block instead. Intent to remove in v22\n   */\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext<T>> | null) {\n    assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfElse');\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null; // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef = this._viewContainer.createEmbeddedView(\n            this._thenTemplateRef,\n            this._context,\n          );\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef = this._viewContainer.createEmbeddedView(\n            this._elseTemplateRef,\n            this._context,\n          );\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n\n  /**\n   * Assert the correct type of the expression bound to the `ngIf` input within the template.\n   *\n   * The presence of this static field is a signal to the Ivy template type check compiler that\n   * when the `NgIf` structural directive renders its template, the type of the expression bound\n   * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n   */\n  static ngTemplateGuard_ngIf: 'binding';\n\n  /**\n   * Asserts the correct type of the context for the template that `NgIf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgIf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T>(\n    dir: NgIf<T>,\n    ctx: any,\n  ): ctx is NgIfContext<Exclude<T, false | 0 | '' | null | undefined>> {\n    return true;\n  }\n}\n\n/**\n * @publicApi\n *\n * @deprecated 20.0\n * The ngIf directive is deprecated in favor of the @if block instead.\n */\nexport class NgIfContext<T = unknown> {\n  public $implicit: T = null!;\n  public ngIf: T = null!;\n}\n\nfunction assertTemplate(\n  templateRef: TemplateRef<any> | null,\n  property: string | false | null,\n): void {\n  if (templateRef && !templateRef.createEmbeddedView) {\n    throw new RuntimeError(\n      RuntimeErrorCode.NG_IF_NOT_A_TEMPLATE_REF,\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  DoCheck,\n  Host,\n  Input,\n  Optional,\n  ɵRuntimeError as RuntimeError,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    private _templateRef: TemplateRef<Object>,\n  ) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see {@link NgSwitchCase}\n * @see {@link NgSwitchDefault}\n * @see [Structural Directives](guide/directives/structural-directives)\n *\n * @deprecated 20.0\n * Use the `@switch` block instead. Intent to remove in v22\n */\n@Directive({\n  selector: '[ngSwitch]',\n})\nexport class NgSwitch {\n  private _defaultViews: SwitchView[] = [];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  /** @deprecated Use the `@switch` block instead. Intent to remove in v22 */\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number {\n    return this._caseCount++;\n  }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value === this._ngSwitch;\n    this._lastCasesMatched ||= matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (const defaultView of this._defaultViews) {\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * As of Angular v17 the NgSwitch directive uses strict equality comparison (`===`) instead of\n * loose equality (`==`) to match different cases.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchDefault}\n *\n * @deprecated 20.0\n * Use the `@case` block within a `@switch` block instead. Intent to remove in v22\n */\n@Directive({\n  selector: '[ngSwitchCase]',\n})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   * @deprecated Use the `@case` block within a `@switch` block instead. Intent to remove in v22\n   */\n  @Input() ngSwitchCase: any;\n\n  constructor(\n    viewContainer: ViewContainerRef,\n    templateRef: TemplateRef<Object>,\n    @Optional() @Host() private ngSwitch: NgSwitch,\n  ) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n    }\n\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   * @docs-private\n   */\n  ngDoCheck() {\n    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchCase}\n *\n * @deprecated 20.0\n * Use the `@default` block within a `@switch` block instead. Intent to remove in v22\n */\n@Directive({\n  selector: '[ngSwitchDefault]',\n})\nexport class NgSwitchDefault {\n  constructor(\n    viewContainer: ViewContainerRef,\n    templateRef: TemplateRef<Object>,\n    @Optional() @Host() ngSwitch: NgSwitch,\n  ) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n    }\n\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n\nfunction throwNgSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\n  throw new RuntimeError(\n    RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND,\n    `An element with the \"${attrName}\" attribute ` +\n      `(matching the \"${directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` +\n      `(matching \"NgSwitch\" directive)`,\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {getPluralCategory, NgLocalization} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```html\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngPlural]',\n})\nexport class NgPlural {\n  private _activeView?: SwitchView;\n  private _caseViews: {[k: string]: SwitchView} = {};\n\n  constructor(private _localization: NgLocalization) {}\n\n  @Input()\n  set ngPlural(value: number) {\n    this._updateView(value);\n  }\n\n  addCase(value: string, switchView: SwitchView): void {\n    this._caseViews[value] = switchView;\n  }\n\n  private _updateView(switchValue: number): void {\n    this._clearViews();\n\n    const cases = Object.keys(this._caseViews);\n    const key = getPluralCategory(switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n\n  private _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n\n  private _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```html\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngPluralCase]',\n})\nexport class NgPluralCase {\n  constructor(\n    @Attribute('ngPluralCase') public value: string,\n    template: TemplateRef<Object>,\n    viewContainer: ViewContainerRef,\n    @Host() ngPlural: NgPlural,\n  ) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  KeyValueChanges,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Renderer2,\n  RendererStyleFlags2,\n} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```html\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```html\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [style bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```html\n * <some-element [style]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * @description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * @see [Style bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngStyle]',\n})\nexport class NgStyle implements DoCheck {\n  private _ngStyle: {[key: string]: string} | null | undefined = null;\n  private _differ: KeyValueDiffer<string, string | number> | null = null;\n\n  constructor(\n    private _ngEl: ElementRef,\n    private _differs: KeyValueDiffers,\n    private _renderer: Renderer2,\n  ) {}\n\n  @Input('ngStyle')\n  set ngStyle(values: {[klass: string]: any} | null | undefined) {\n    this._ngStyle = values;\n    if (!this._differ && values) {\n      this._differ = this._differs.find(values).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle!);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _setStyle(nameAndUnit: string, value: string | number | null | undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    const flags = name.indexOf('-') === -1 ? undefined : (RendererStyleFlags2.DashCase as number);\n\n    if (value != null) {\n      this._renderer.setStyle(\n        this._ngEl.nativeElement,\n        name,\n        unit ? `${value}${unit}` : value,\n        flags,\n      );\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string | number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EmbeddedViewRef,\n  Injector,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```html\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngTemplateOutlet]',\n})\nexport class NgTemplateOutlet<C = unknown> implements OnChanges {\n  private _viewRef: EmbeddedViewRef<C> | null = null;\n\n  /**\n   * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n   * object, the object's keys will be available for binding by the local template `let`\n   * declarations.\n   * Using the key `$implicit` in the context object will set its value as default.\n   */\n  @Input() public ngTemplateOutletContext: C | null | undefined = null;\n\n  /**\n   * A string defining the template reference and optionally the context object for the template.\n   */\n  @Input() public ngTemplateOutlet: TemplateRef<C> | null | undefined = null;\n\n  /** Injector to be used within the embedded view. */\n  @Input() public ngTemplateOutletInjector: Injector | null | undefined = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._shouldRecreateView(changes)) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      // If there is no outlet, clear the destroyed view ref.\n      if (!this.ngTemplateOutlet) {\n        this._viewRef = null;\n        return;\n      }\n\n      // Create a context forward `Proxy` that will always bind to the user-specified context,\n      // without having to destroy and re-create views whenever the context changes.\n      const viewContext = this._createContextForwardProxy();\n      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {\n        injector: this.ngTemplateOutletInjector ?? undefined,\n      });\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if either is true:\n   * - the outlet changed.\n   * - the injector changed.\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    return !!changes['ngTemplateOutlet'] || !!changes['ngTemplateOutletInjector'];\n  }\n\n  /**\n   * For a given outlet instance, we create a proxy object that delegates\n   * to the user-specified context. This allows changing, or swapping out\n   * the context object completely without having to destroy/re-create the view.\n   */\n  private _createContextForwardProxy(): C {\n    return <C>new Proxy(\n      {},\n      {\n        set: (_target, prop, newValue) => {\n          if (!this.ngTemplateOutletContext) {\n            return false;\n          }\n          return Reflect.set(this.ngTemplateOutletContext, prop, newValue);\n        },\n        get: (_target, prop, receiver) => {\n          if (!this.ngTemplateOutletContext) {\n            return undefined;\n          }\n          return Reflect.get(this.ngTemplateOutletContext, prop, receiver);\n        },\n      },\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgFor, NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgFor,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet,\n};\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectorRef,\n  EventEmitter,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  untracked,\n  ɵisPromise,\n  ɵisSubscribable,\n  ɵINTERNAL_APPLICATION_ERROR_HANDLER as INTERNAL_APPLICATION_ERROR_HANDLER,\n  inject,\n} from '@angular/core';\nimport type {Observable, Subscribable, Unsubscribable} from 'rxjs';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(\n    async: Subscribable<any> | PromiseLike<any>,\n    updateLatestValue: any,\n    onError: (e: unknown) => void,\n  ): Unsubscribable | PromiseLike<any>;\n  dispose(subscription: Unsubscribable | PromiseLike<any>): void;\n}\n\nclass SubscribableStrategy implements SubscriptionStrategy {\n  createSubscription(\n    async: Subscribable<any>,\n    updateLatestValue: any,\n    onError: (e: unknown) => void,\n  ): Unsubscribable {\n    // Subscription can be side-effectful, and we don't want any signal reads which happen in the\n    // side effect of the subscription to be tracked by a component's template when that\n    // subscription is triggered via the async pipe. So we wrap the subscription in `untracked` to\n    // decouple from the current reactive context.\n    //\n    // `untracked` also prevents signal _writes_ which happen in the subscription side effect from\n    // being treated as signal writes during the template evaluation (which throws errors).\n    return untracked(() =>\n      async.subscribe({\n        next: updateLatestValue,\n        error: onError,\n      }),\n    );\n  }\n\n  dispose(subscription: Unsubscribable): void {\n    // See the comment in `createSubscription` above on the use of `untracked`.\n    untracked(() => subscription.unsubscribe());\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(\n    async: PromiseLike<any>,\n    updateLatestValue: ((v: any) => any) | null,\n    onError: ((e: unknown) => void) | null,\n  ): Unsubscribable {\n    // According to the promise specification, promises are not cancellable by default.\n    // Once a promise is created, it will either resolve or reject, and it doesn't\n    // provide a built-in mechanism to cancel it.\n    // There may be situations where a promise is provided, and it either resolves after\n    // the pipe has been destroyed or never resolves at all. If the promise never\n    // resolves — potentially due to factors beyond our control, such as third-party\n    // libraries — this can lead to a memory leak.\n    // When we use `async.then(updateLatestValue)`, the engine captures a reference to the\n    // `updateLatestValue` function. This allows the promise to invoke that function when it\n    // resolves. In this case, the promise directly captures a reference to the\n    // `updateLatestValue` function. If the promise resolves later, it retains a reference\n    // to the original `updateLatestValue`, meaning that even if the context where\n    // `updateLatestValue` was defined has been destroyed, the function reference remains in memory.\n    // This can lead to memory leaks if `updateLatestValue` is no longer needed or if it holds\n    // onto resources that should be released.\n    // When we do `async.then(v => ...)` the promise captures a reference to the lambda\n    // function (the arrow function).\n    // When we assign `updateLatestValue = null` within the context of an `unsubscribe` function,\n    // we're changing the reference of `updateLatestValue` in the current scope to `null`.\n    // The lambda will no longer have access to it after the assignment, effectively\n    // preventing any further calls to the original function and allowing it to be garbage collected.\n    async.then(\n      // Using optional chaining because we may have set it to `null`; since the promise\n      // is async, the view might be destroyed by the time the promise resolves.\n      (v) => updateLatestValue?.(v),\n      (e) => onError?.(e),\n    );\n    return {\n      unsubscribe: () => {\n        updateLatestValue = null;\n        onError = null;\n      },\n    };\n  }\n\n  dispose(subscription: Unsubscribable): void {\n    subscription.unsubscribe();\n  }\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _subscribableStrategy = new SubscribableStrategy();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks. When the reference of the expression changes, the `async` pipe\n * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'async',\n  pure: false,\n})\nexport class AsyncPipe implements OnDestroy, PipeTransform {\n  private _ref: ChangeDetectorRef | null;\n  private _latestValue: any = null;\n  private markForCheckOnValueUpdate = true;\n\n  private _subscription: Unsubscribable | PromiseLike<any> | null = null;\n  private _obj: Subscribable<any> | PromiseLike<any> | EventEmitter<any> | null = null;\n  private _strategy: SubscriptionStrategy | null = null;\n  private readonly applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n\n  constructor(ref: ChangeDetectorRef) {\n    // Assign `ref` into `this._ref` manually instead of declaring `_ref` in the constructor\n    // parameter list, as the type of `this._ref` includes `null` unlike the type of `ref`.\n    this._ref = ref;\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n    // Clear the `ChangeDetectorRef` and its association with the view data, to mitigate\n    // potential memory leaks in Observables that could otherwise cause the view data to\n    // be retained.\n    // https://github.com/angular/angular/issues/17624\n    this._ref = null;\n  }\n\n  // NOTE(@benlesh): Because Observable has deprecated a few call patterns for `subscribe`,\n  // TypeScript has a hard time matching Observable to Subscribable, for more information\n  // see https://github.com/microsoft/TypeScript/issues/43643\n\n  transform<T>(obj: Observable<T> | Subscribable<T> | PromiseLike<T>): T | null;\n  transform<T>(obj: null | undefined): null;\n  transform<T>(obj: Observable<T> | Subscribable<T> | PromiseLike<T> | null | undefined): T | null;\n  transform<T>(obj: Observable<T> | Subscribable<T> | PromiseLike<T> | null | undefined): T | null {\n    if (!this._obj) {\n      if (obj) {\n        try {\n          // Only call `markForCheck` if the value is updated asynchronously.\n          // Synchronous updates _during_ subscription should not wastefully mark for check -\n          // this value is already going to be returned from the transform function.\n          this.markForCheckOnValueUpdate = false;\n          this._subscribe(obj);\n        } finally {\n          this.markForCheckOnValueUpdate = true;\n        }\n      }\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    return this._latestValue;\n  }\n\n  private _subscribe(obj: Subscribable<any> | PromiseLike<any> | EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n      obj,\n      (value: Object) => this._updateLatestValue(obj, value),\n      (e) => this.applicationErrorHandler(e),\n    );\n  }\n\n  private _selectStrategy(\n    obj: Subscribable<any> | PromiseLike<any> | EventEmitter<any>,\n  ): SubscriptionStrategy {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisSubscribable(obj)) {\n      return _subscribableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n\n  private _dispose(): void {\n    // Note: `dispose` is only called if a subscription has been initialized before, indicating\n    // that `this._strategy` is also available.\n    this._strategy!.dispose(this._subscription!);\n    this._latestValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      if (this.markForCheckOnValueUpdate) {\n        this._ref?.markForCheck();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Transforms text to all lower case.\n *\n * @see {@link UpperCasePipe}\n * @see {@link TitleCasePipe}\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'lowercase',\n})\nexport class LowerCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to lower case.\n   */\n  transform(value: string): string;\n  transform(value: null | undefined): null;\n  transform(value: string | null | undefined): string | null;\n  transform(value: string | null | undefined): string | null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\n}\n\n//\n// Regex below matches any Unicode word and number compatible with ES5. In ES2018 the same result\n// can be achieved by using /[0-9\\p{L}]\\S*/gu and also known as Unicode Property Escapes\n// (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+%2F%5B0-9%5Cp%7BL%7D%5D%5CS*%2Fgu%3B%0A%0A&unicodePropertyEscape=1\n//\n\nconst unicodeWordMatch =\n  /(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])\\S*/g;\n\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see {@link LowerCasePipe}\n * @see {@link UpperCasePipe}\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * {@example common/pipes/ts/titlecase_pipe.ts region='TitleCasePipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'titlecase',\n})\nexport class TitleCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to title case.\n   */\n  transform(value: string): string;\n  transform(value: null | undefined): null;\n  transform(value: string | null | undefined): string | null;\n  transform(value: string | null | undefined): string | null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.replace(\n      unicodeWordMatch,\n      (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase(),\n    );\n  }\n}\n\n/**\n * Transforms text to all upper case.\n * @see {@link LowerCasePipe}\n * @see {@link TitleCasePipe}\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'uppercase',\n})\nexport class UpperCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to upper case.\n   */\n  transform(value: string): string;\n  transform(value: null | undefined): null;\n  transform(value: string | null | undefined): string | null;\n  transform(value: string | null | undefined): string | null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Inject, InjectionToken, LOCALE_ID, Optional, Pipe, PipeTransform} from '@angular/core';\n\nimport {formatDate} from '../i18n/format_date';\n\nimport {DatePipeConfig, DEFAULT_DATE_FORMAT} from './date_pipe_config';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Optionally-provided default timezone to use for all instances of `DatePipe` (such as `'+0430'`).\n * If the value isn't provided, the `DatePipe` will use the end-user's local system timezone.\n *\n * @deprecated use DATE_PIPE_DEFAULT_OPTIONS token to configure DatePipe\n */\nexport const DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken<string>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'DATE_PIPE_DEFAULT_TIMEZONE' : '',\n);\n\n/**\n * DI token that allows to provide default configuration for the `DatePipe` instances in an\n * application. The value is an object which can include the following fields:\n * - `dateFormat`: configures the default date format. If not provided, the `DatePipe`\n * will use the 'mediumDate' as a value.\n * - `timezone`: configures the default timezone. If not provided, the `DatePipe` will\n * use the end-user's local system timezone.\n *\n * @see {@link DatePipeConfig}\n *\n * @usageNotes\n *\n * Various date pipe default values can be overwritten by providing this token with\n * the value that has this interface.\n *\n * For example:\n *\n * Override the default date format by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {dateFormat: 'shortDate'}}\n * ]\n * ```\n *\n * Override the default timezone by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {timezone: '-1200'}}\n * ]\n * ```\n */\nexport const DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken<DatePipeConfig>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'DATE_PIPE_DEFAULT_OPTIONS' : '',\n);\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * `DatePipe` is executed only when it detects a pure change to the input value.\n * A pure change is either a change to a primitive input value\n * (such as `String`, `Number`, `Boolean`, or `Symbol`),\n * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).\n *\n * Note that mutating a `Date` object does not cause the pipe to be rendered again.\n * To ensure that the pipe is executed, you must create a new `Date` object.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n/format-data-locale) for more information.\n *\n * The time zone of the formatted value can be specified either by passing it in as the second\n * parameter of the pipe, or by setting the default through the `DATE_PIPE_DEFAULT_OPTIONS`\n * injection token. The value that is passed in as the second parameter takes precedence over\n * the one defined using the injection token.\n *\n * @see {@link formatDate}\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |\n * |---------------|-------------------------------------|-------------------------------------------------|\n * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |\n * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |\n * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |\n * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |\n * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |\n * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |\n * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |\n * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |\n * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |\n * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |\n * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |\n * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type              | Format      | Description                                                   | Example Value                                              |\n *  |-------------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                     | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                         | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                         | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year                    | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | ISO Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month                   | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                         | MMMM        | Wide                                                          | September                                                  |\n *  |                         | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone        | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                         | LLLL        | Wide                                                          | September                                                  |\n *  |                         | LLLLL       | Narrow                                                        | S                                                          |\n *  | ISO Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                         | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month           | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month            | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                         | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |\n *  | Week day                | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                         | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                         | EEEEE       | Narrow                                                        | T                                                          |\n *  |                         | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Week day standalone     | c, cc       | Numeric: 1 digit                                              | 2                                                          |\n *  |                         | ccc         | Abbreviated                                                   | Tue                                                        |\n *  |                         | cccc        | Wide                                                          | Tuesday                                                    |\n *  |                         | ccccc       | Narrow                                                        | T                                                          |\n *  |                         | cccccc      | Short                                                         | Tu                                                         |\n *  | Period                  | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                         | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                         | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*                 | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                         | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone*      | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                         | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12               | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                         | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23               | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                         | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute                  | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                         | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second                  | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                         | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds      | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                         | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                         | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone                    | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                         | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                         | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                         | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                         | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                         | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                         | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * {{ dateObj | date:\"MMM dd, yyyy 'at' hh:mm a\" }}  // output is 'Jun 15, 2015 at 09:43 PM'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```angular-ts\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\n@Pipe({\n  name: 'date',\n})\nexport class DatePipe implements PipeTransform {\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    @Inject(DATE_PIPE_DEFAULT_TIMEZONE) @Optional() private defaultTimezone?: string | null,\n    @Inject(DATE_PIPE_DEFAULT_OPTIONS) @Optional() private defaultOptions?: DatePipeConfig | null,\n  ) {}\n\n  /**\n   * @param value The date expression: a `Date` object,  a number\n   * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n   * @param format The date/time components to include, using predefined options or a\n   * custom format string.  When not provided, the `DatePipe` looks for the value using the\n   * `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads the `dateFormat` property).\n   * If the token is not configured, the `mediumDate` is used as a value.\n   * @param timezone A timezone offset (such as `'+0430'`). When not provided, the `DatePipe`\n   * looks for the value using the `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads\n   * the `timezone` property). If the token is not configured, the end-user's local system\n   * timezone is used as a value.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n/locale-id).\n   *\n   * @see {@link DATE_PIPE_DEFAULT_OPTIONS}\n   *\n   * @returns A date string in the desired format.\n   */\n  transform(\n    value: Date | string | number,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null;\n  transform(value: null | undefined, format?: string, timezone?: string, locale?: string): null;\n  transform(\n    value: Date | string | number | null | undefined,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null;\n  transform(\n    value: Date | string | number | null | undefined,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null {\n    if (value == null || value === '' || value !== value) return null;\n\n    try {\n      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;\n      const _timezone =\n        timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? undefined;\n      return formatDate(value, _format, locale || this.locale, _timezone);\n    } catch (error) {\n      throw invalidPipeArgumentError(DatePipe, (error as Error).message);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {getPluralCategory, NgLocalization} from '../i18n/localization';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst _INTERPOLATION_REGEXP: RegExp = /#/g;\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'i18nPlural',\n})\nexport class I18nPluralPipe implements PipeTransform {\n  constructor(private _localization: NgLocalization) {}\n\n  /**\n   * @param value the number to be formatted\n   * @param pluralMap an object that mimics the ICU format, see\n   * https://unicode-org.github.io/icu/userguide/format_parse/messages/.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(\n    value: number | null | undefined,\n    pluralMap: {[count: string]: string},\n    locale?: string,\n  ): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'i18nSelect',\n})\nexport class I18nSelectPipe implements PipeTransform {\n  /**\n   * @param value a string to be internationalized.\n   * @param mapping an object that indicates the text that should be displayed\n   * for different values of the provided `value`.\n   */\n  transform(value: string | null | undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'json',\n  pure: false,\n})\nexport class JsonPipe implements PipeTransform {\n  /**\n   * @param value A value of any type to convert into a JSON-format string.\n   */\n  transform(value: any): string {\n    return JSON.stringify(value, null, 2);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  KeyValueChangeRecord,\n  KeyValueChanges,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n * Passing `null` as the compareFn will use natural ordering of the input.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: ((a: KeyValue<any, any>, b: KeyValue<any, any>) => number) | null =\n    defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n    input: ReadonlyMap<K, V>,\n    compareFn?: ((a: KeyValue<K, V>, b: KeyValue<K, V>) => number) | null,\n  ): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n    input: Record<K, V>,\n    compareFn?: ((a: KeyValue<string, V>, b: KeyValue<string, V>) => number) | null,\n  ): Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n    input: Record<K, V> | ReadonlyMap<K, V>,\n    compareFn?: ((a: KeyValue<K, V>, b: KeyValue<K, V>) => number) | null,\n  ): Array<KeyValue<K, V>>;\n  transform(\n    input: null | undefined,\n    compareFn?: ((a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number) | null,\n  ): null;\n  transform<K, V>(\n    input: ReadonlyMap<K, V> | null | undefined,\n    compareFn?: ((a: KeyValue<K, V>, b: KeyValue<K, V>) => number) | null,\n  ): Array<KeyValue<K, V>> | null;\n  transform<K extends number, V>(\n    input: Record<K, V> | null | undefined,\n    compareFn?: ((a: KeyValue<string, V>, b: KeyValue<string, V>) => number) | null,\n  ): Array<KeyValue<string, V>> | null;\n\n  transform<K extends string, V>(\n    input: Record<K, V> | ReadonlyMap<K, V> | null | undefined,\n    compareFn?: ((a: KeyValue<K, V>, b: KeyValue<K, V>) => number) | null,\n  ): Array<KeyValue<K, V>> | null;\n\n  transform<T>(\n    input: T,\n    compareFn?: T extends object ? (a: T[keyof T], b: T[keyof T]) => number : never,\n  ): T extends object ? Array<KeyValue<keyof T, T[keyof T]>> : null;\n\n  transform<K, V>(\n    input: undefined | null | {[key: string]: V; [key: number]: V} | ReadonlyMap<K, V>,\n    compareFn: ((a: KeyValue<K, V>, b: KeyValue<K, V>) => number) | null = defaultComparator,\n  ): Array<KeyValue<K, V>> | null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    // make a differ for whatever type we've been passed in\n    this.differ ??= this.differs.find(input).create();\n\n    const differChanges: KeyValueChanges<K, V> | null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      if (compareFn) {\n        this.keyValues.sort(compareFn);\n      }\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n  keyValueA: KeyValue<K, V>,\n  keyValueB: KeyValue<K, V>,\n): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // If both keys are the same, return 0 (no sorting needed).\n  if (a === b) return 0;\n  // If one of the keys is `null` or `undefined`, place it at the end of the sort.\n  if (a == null) return 1; // `a` comes after `b`.\n  if (b == null) return -1; // `b` comes after `a`.\n  // If both keys are strings, compare them lexicographically.\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  // If both keys are numbers, sort them numerically.\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  // If both keys are booleans, sort `false` before `true`.\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // Fallback case: if keys are of different types, compare their string representations.\n  const aString = String(a);\n  const bString = String(b);\n  // Compare the string representations lexicographically.\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DEFAULT_CURRENCY_CODE,\n  Inject,\n  LOCALE_ID,\n  Pipe,\n  PipeTransform,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {formatCurrency, formatNumber, formatPercent} from '../i18n/format_number';\nimport {getCurrencySymbol} from '../i18n/locale_data_api';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a value according to digit options and locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * @see {@link formatNumber}\n *\n * @usageNotes\n *\n * ### digitsInfo\n *\n * The value's decimal representation is specified by the `digitsInfo`\n * parameter, written in the following format:<br>\n *\n * ```\n * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n * ```\n *\n *  - `minIntegerDigits`:\n * The minimum number of integer digits before the decimal point.\n * Default is 1.\n *\n * - `minFractionDigits`:\n * The minimum number of digits after the decimal point.\n * Default is 0.\n *\n *  - `maxFractionDigits`:\n * The maximum number of digits after the decimal point.\n * Default is 3.\n *\n * If the formatted value is truncated it will be rounded using the \"to-nearest\" method:\n *\n * ```\n * {{3.6 | number: '1.0-0'}}\n * <!--will output '4'-->\n *\n * {{-3.6 | number:'1.0-0'}}\n * <!--will output '-4'-->\n * ```\n *\n * ### locale\n *\n * `locale` will format a value according to locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n *\n * See [Setting your app locale](guide/i18n/locale-id).\n *\n * ### Example\n *\n * The following code shows how the pipe transforms values\n * according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'number',\n})\nexport class DecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   * @param value The value to be formatted.\n   * @param digitsInfo Sets digit and decimal representation.\n   * [See more](#digitsinfo).\n   * @param locale Specifies what locale format rules to use.\n   * [See more](#locale).\n   */\n  transform(value: number | string, digitsInfo?: string, locale?: string): string | null;\n  transform(value: null | undefined, digitsInfo?: string, locale?: string): null;\n  transform(\n    value: number | string | null | undefined,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null;\n  transform(\n    value: number | string | null | undefined,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null {\n    if (!isValue(value)) return null;\n\n    locale ||= this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatNumber(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(DecimalPipe, (error as Error).message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see {@link formatPercent}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'percent',\n})\nexport class PercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: number | string, digitsInfo?: string, locale?: string): string | null;\n  transform(value: null | undefined, digitsInfo?: string, locale?: string): null;\n  transform(\n    value: number | string | null | undefined,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null;\n  /**\n   *\n   * @param value The number to be formatted as a percentage.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `0`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n/locale-id).\n   */\n  transform(\n    value: number | string | null | undefined,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null {\n    if (!isValue(value)) return null;\n    locale ||= this._locale;\n    try {\n      const num = strToNumber(value);\n      return formatPercent(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(PercentPipe, (error as Error).message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n *\n * @see {@link getCurrencySymbol}\n * @see {@link formatCurrency}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'currency',\n})\nexport class CurrencyPipe implements PipeTransform {\n  constructor(\n    @Inject(LOCALE_ID) private _locale: string,\n    @Inject(DEFAULT_CURRENCY_CODE) private _defaultCurrencyCode: string = 'USD',\n  ) {}\n  /**\n   *\n   * @param value The number to be formatted as currency.\n   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n   * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be\n   * configured using the `DEFAULT_CURRENCY_CODE` injection token.\n   * @param display The format for the currency indicator. One of the following:\n   *   - `code`: Show the code (such as `USD`).\n   *   - `symbol`(default): Show the symbol (such as `$`).\n   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n   * currency.\n   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n   * locale has no narrow symbol, uses the standard symbol for the locale.\n   *   - String: Use the given string value instead of a code or a symbol.\n   * For example, an empty string will suppress the currency & symbol.\n   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n   *\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `2`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `2`.\n   * If not provided, the number will be formatted with the proper amount of digits,\n   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n/locale-id).\n   */\n  transform(\n    value: number | string,\n    currencyCode?: string,\n    display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null;\n  transform(\n    value: null | undefined,\n    currencyCode?: string,\n    display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean,\n    digitsInfo?: string,\n    locale?: string,\n  ): null;\n  transform(\n    value: number | string | null | undefined,\n    currencyCode?: string,\n    display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean,\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null;\n  transform(\n    value: number | string | null | undefined,\n    currencyCode: string = this._defaultCurrencyCode,\n    display: 'code' | 'symbol' | 'symbol-narrow' | string | boolean = 'symbol',\n    digitsInfo?: string,\n    locale?: string,\n  ): string | null {\n    if (!isValue(value)) return null;\n\n    locale ||= this._locale;\n\n    if (typeof display === 'boolean') {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(\n          `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`,\n        );\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let currency: string = currencyCode || this._defaultCurrencyCode;\n    if (display !== 'code') {\n      if (display === 'symbol' || display === 'symbol-narrow') {\n        currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n      } else {\n        currency = display;\n      }\n    }\n\n    try {\n      const num = strToNumber(value);\n      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, (error as Error).message);\n    }\n  }\n}\n\nfunction isValue(value: number | string | null | undefined): value is number | string {\n  return !(value == null || value === '' || value !== value);\n}\n\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value: number | string): number {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new RuntimeError(\n      RuntimeErrorCode.VALUE_NOT_A_NUMBER,\n      ngDevMode && `${value} is not a number`,\n    );\n  }\n  return value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DATE_PIPE_DEFAULT_OPTIONS, DATE_PIPE_DEFAULT_TIMEZONE, DatePipe} from './date_pipe';\nimport {DatePipeConfig} from './date_pipe_config';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {KeyValue, KeyValuePipe} from './keyvalue_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DATE_PIPE_DEFAULT_OPTIONS,\n  DATE_PIPE_DEFAULT_TIMEZONE,\n  DatePipe,\n  DatePipeConfig,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  KeyValue,\n  KeyValuePipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe,\n};\n\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  KeyValuePipe,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {COMMON_PIPES} from './pipes/index';\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n})\nexport class CommonModule {}\n"],"names":["_platformLocation","_baseHref","ngOnDestroy","_removeListenerFns","length","getBaseHref","path","hash","substring","prepareExternalUrl","internal","url","joinWithSlash","pushState","state","title","queryParams","normalizeQueryParams","pathname","replaceState","NumberFormatStyle","Plural","Decimal","WeekDay","getLastDefinedValue","amPm","width","days","daysData","formStyle","res","getLocaleCurrencies","locale","RuntimeError","ngDevMode","format","DATE_FORMATS_SPLIT","exec","parts","push","assertValidDateFormat","date","getTimezoneOffset","dateTimezoneOffset","timezoneToOffset","timezone","text","forEach","value","dateFormatter","getDateFormatter","replace","some","part","test","message","join","console","error","formatRuntimeError","newDate","setFullYear","year","month","getNamedFormat","NAMED_FORMATS","localeId","formatValue","getLocaleDateFormat","FormatWidth","Short","Medium","Long","Full","getLocaleTimeFormat","shortTime","formatDateTime","getLocaleDateTimeFormat","shortDate","mediumTime","longTime","longDate","fullTime","fullDate","str","opt_values","match","key","padNumber","num","digits","minusSign","trim","negWrap","neg","String","strNum","formatFractionalSeconds","milliseconds","offset","name","size","getLocaleNumberSymbol","NumberSymbol","MinusSign","localeMinus","getDatePart","getDate","getHours","getSeconds","getMilliseconds","getDateTranslation","form","extended","getLocaleMonthNames","getMonth","currentHours","dayPeriods","getLocaleExtraDayPeriods","index","rules","findIndex","rule","Array","isArray","from","to","afterFrom","hours","currentMinutes","minutes","beforeTo","getLocaleEraNames","getFullYear","unexpected","zone","Math","abs","getFirstThursdayOfYear","createDate","JANUARY","getDay","firstDayOfYear","THURSDAY","getThursdayThisIsoWeek","datetime","deltaToThursday","currentDay","weekGetter","monthBased","result","Date","today","thisThurs","firstThurs","diff","getTime","weekNumberingYear","DATE_FORMATS","TranslationWidth","Wide","dateStrGetter","Narrow","formatter","dateGetter","weekNumberingYearGetter","Abbreviated","FormStyle","Standalone","PATTERN_SEP","GROUP_SEP","DIGIT_CHAR","CURRENCY_CHAR","formatNumberToLocaleString","pattern","groupSymbol","decimalSymbol","digitsInfo","isPercent","formattedText","isZero","isFinite","parsedNumber","toPercent","minInt","NUMBER_FORMAT_REGEXP","minIntPart","minFractionPart","maxFractionPart","parseIntAutoRadix","maxFraction","minFraction","integerLen","unshift","decimals","negPre","negSuf","posPre","posSuf","minFrac","maxFrac","patternParts","split","positive","indexOf","DECIMAL_SEP","lastIndexOf","ZERO_CHAR","integer","positiveParts","fraction","i","ch","charAt","p","groups","trunkLen","pos","negative","slice","exponent","fractionLen","numStr","search","NgLocalization","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","Injectable","ɵɵngDeclareClassMetadata","decorators","args","NgLocaleLocalization","constructor","getPluralCategory","plural","getLocalePluralCase","Zero","One","Two","_renderer","ngClass","rawClass","WS_REGEXP","klass","_updateState","Object","keys","Boolean","_applyStateDiff","stateMap","get","undefined","enabled","nextEnabled","changed","touched","set","ngComponentOutletEnvironmentInjector","ngComponentOutletNgModule","_componentRef","_moduleRef","_inputsUsed","Map","instance","_viewContainerRef","_needToReCreateNgModuleInstance","changes","_needToReCreateComponentInstance","ngOnChanges","clear","ngComponentOutlet","ngComponentOutletInjector","parentInjector","destroy","createNgModule","getParentInjector","injector","createComponent","ngModuleRef","ngComponentOutletContent","_applyInputStateDiff","componentRef","inputName","Input","$implicit","ngForOf","count","first","last","_ngForOf","ngForTrackBy","_trackByFn","_viewContainer","_template","_differs","ngForTemplate","_ngForOfDirty","_differ","find","create","errorMessage","getTypeName","_applyChanges","viewContainer","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","view","move","ilen","context","forEachIdentityChange","record","viewRef","applyViewChange","_thenTemplateRef","templateRef","ngIf","condition","_context","ngIfThen","assertTemplate","_thenViewRef","ngIfElse","_updateView","ngTemplateContextGuard","dir","ctx","_created","createEmbeddedView","_templateRef","_ngSwitch","ngSwitch","newValue","_caseCount","_addCase","_addDefault","matched","_lastCaseCheckIndex","_updateDefaultCases","_lastCasesMatched","_view","SwitchView","Host","propDecorators","ngSwitchCase","ɵdir","ɵɵngDeclareDirective","NgSwitchDefault","isStandalone","selector","ngPlural","addCase","switchView","_caseViews","switchValue","_clearViews","cases","_localization","_activateView","_activeView","NgPluralCase","TemplateRef","ViewContainerRef","NgPlural","_ngEl","ngStyle","values","_ngStyle","ngDoCheck","_setStyle","nameAndUnit","removeStyle","nativeElement","flags","ngTemplateOutletContext","_shouldRecreateView","_viewRef","viewContainerRef","ngTemplateOutlet","viewContext","ngTemplateOutletInjector","_target","prop","COMMON_DIRECTIVES","subscription","unsubscribe","dispose","PromiseStrategy","SubscribableStrategy","_strategy","applicationErrorHandler","inject","INTERNAL_APPLICATION_ERROR_HANDLER","ref","_ref","_subscription","_dispose","transform","obj","_obj","LowerCasePipe","Pipe","ɵɵngDeclarePipe","unicodeWordMatch","txt","toUpperCase","toLowerCase","TitleCasePipe","defaultTimezone","defaultOptions","DATE_PIPE_DEFAULT_TIMEZONE","pluralMap","_INTERPOLATION_REGEXP","toString","I18nPluralPipe","token","i1","mapping","hasOwnProperty","I18nSelectPipe","ɵpipe","JsonPipe","pure","keyValues","differ","differs","input","differChanges","isValue","_locale","strToNumber","formatNumber","DecimalPipe","LOCALE_ID","PercentPipe","currencyCode","_defaultCurrencyCode","display","Inject","DEFAULT_CURRENCY_CODE","COMMON_PIPES","NgModule"],"mappings":"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"}