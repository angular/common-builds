{"version":3,"file":"http-testing.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/testing/src/api.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/testing/src/request.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/testing/src/backend.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/common/http/testing/src/provider.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpRequest} from '../../index';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @publicApi\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n  ): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n    matchFn: (req: HttpRequest<any>) => boolean,\n    description?: string,\n  ): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n    description?: string,\n  ): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: (req: HttpRequest<any>) => boolean, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n    description?: string,\n  ): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHeaders,\n  HttpRequest,\n  HttpResponse,\n  HttpStatusCode,\n} from '../../index';\nimport {Observer} from 'rxjs';\n\n/**\n * Type that describes options that can be used to create an error\n * in `TestRequest`.\n */\ntype TestRequestErrorOptions = {\n  headers?: HttpHeaders | {[name: string]: string | string[]};\n  status?: number;\n  statusText?: string;\n};\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nexport class TestRequest {\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled(): boolean {\n    return this._cancelled;\n  }\n\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n\n  constructor(\n    public request: HttpRequest<any>,\n    private observer: Observer<HttpEvent<any>>,\n  ) {}\n\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(\n    body:\n      | ArrayBuffer\n      | Blob\n      | boolean\n      | string\n      | number\n      | Object\n      | (boolean | string | number | Object | null)[]\n      | null,\n    opts: {\n      headers?: HttpHeaders | {[name: string]: string | string[]};\n      status?: number;\n      statusText?: string;\n    } = {},\n  ): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers =\n      opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText: string | undefined = opts.statusText;\n    let status: number = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = HttpStatusCode.NoContent;\n        statusText ||= 'No Content';\n      } else {\n        statusText ||= 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n\n  /**\n   * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n   * @deprecated Http requests never emit an `ErrorEvent`. Please specify a `ProgressEvent`.\n   */\n  error(error: ErrorEvent, opts?: TestRequestErrorOptions): void;\n  /**\n   * Resolve the request by returning an `ProgressEvent` (e.g. simulating a network failure).\n   */\n  error(error: ProgressEvent, opts?: TestRequestErrorOptions): void;\n  error(error: ProgressEvent | ErrorEvent, opts: TestRequestErrorOptions = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    const headers =\n      opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(\n      new HttpErrorResponse({\n        error,\n        headers,\n        status: opts.status || 0,\n        statusText: opts.statusText || '',\n        url: this.request.urlWithParams,\n      }),\n    );\n  }\n\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(\n  body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(\n  body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(\n  body:\n    | ArrayBuffer\n    | Blob\n    | boolean\n    | string\n    | number\n    | Object\n    | (boolean | string | number | Object | null)[],\n  format: string = 'JSON',\n): Object | string | number | (Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (\n    typeof body === 'string' ||\n    typeof body === 'number' ||\n    typeof body === 'object' ||\n    typeof body === 'boolean' ||\n    Array.isArray(body)\n  ) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(\n  body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(\n  responseType: string,\n  body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[] | null,\n): ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[] | null {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '../../index';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n@Injectable()\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n  /**\n   * List of pending requests which have not yet been expected.\n   */\n  private open: TestRequest[] = [];\n\n  /**\n   * Used when checking if we need to throw the NOT_USING_FETCH_BACKEND_IN_SSR error\n   */\n  private isTestingBackend = true;\n\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent} as HttpEvent<any>);\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n  private _match(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n  ): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter((testReq) => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter((testReq) => match(testReq.request));\n    } else {\n      return this.open.filter(\n        (testReq) =>\n          (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n          (!match.url || testReq.request.urlWithParams === match.url),\n      );\n    }\n  }\n\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const results = this._match(match);\n    results.forEach((result) => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n  expectOne(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n    description?: string,\n  ): TestRequest {\n    description ||= this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n        `Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`,\n      );\n    }\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open.map(describeRequest).join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n      throw new Error(message);\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n  expectNone(\n    match: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n    description?: string,\n  ): void {\n    description ||= this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n        `Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`,\n      );\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding requests.\n   */\n  verify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter((testReq) => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(describeRequest).join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n\n  private descriptionFromMatcher(\n    matcher: string | RequestMatch | ((req: HttpRequest<any>) => boolean),\n  ): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n\nfunction describeRequest(testRequest: TestRequest): string {\n  const url = testRequest.request.urlWithParams;\n  const method = testRequest.request.method;\n  return `${method} ${url}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpBackend, ɵREQUESTS_CONTRIBUTE_TO_STABILITY} from '../../index';\nimport {Provider} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n\nexport function provideHttpClientTesting(): Provider[] {\n  return [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n    {provide: ɵREQUESTS_CONTRIBUTE_TO_STABILITY, useValue: false},\n  ];\n}\n"],"names":["HttpTestingController","cancelled","_cancelled","observer","request","statusText","opts","status","undefined","body","HttpStatusCode","NoContent","Error","next","HttpResponse","headers","url","complete","error","HttpErrorResponse","HttpHeaders","urlWithParams","_toArrayBufferBody","ArrayBuffer","_toBlob","Blob","isTestingBackend","handle","req","testReq","TestRequest","open","push","type","HttpEventType","Sent","filter","match","method","toUpperCase","results","message","description","length","requests","map","describeRequest","join","matches","expectNone","descriptionFromMatcher","provide","HttpBackend","useExisting","HttpClientTestingBackend"],"mappings":"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"}